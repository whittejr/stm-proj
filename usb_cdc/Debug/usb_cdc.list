
usb_cdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007cb0  08007cb0  00008cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d64  08007d64  000091cc  2**0
                  CONTENTS
  4 .ARM          00000008  08007d64  08007d64  00008d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d6c  08007d6c  000091cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d6c  08007d6c  00008d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d70  08007d70  00008d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08007d74  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001430  200001cc  08007f40  000091cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015fc  08007f40  000095fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8b4  00000000  00000000  000091f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000288b  00000000  00000000  00014aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  00017338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000773  00000000  00000000  00017d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191b4  00000000  00000000  000184eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfc5  00000000  00000000  0003169f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000847cf  00000000  00000000  0003f664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3e33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c4c  00000000  00000000  000c3e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c6ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08007c98 	.word	0x08007c98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08007c98 	.word	0x08007c98

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CDC_ReceiveCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/

/* USER CODE BEGIN 0 */
void CDC_ReceiveCallback (uint8_t *Buf, uint32_t Len) {
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < Len; i++) {
 8000166:	2300      	movs	r3, #0
 8000168:	60fb      	str	r3, [r7, #12]
 800016a:	bf00      	nop
 800016c:	68fa      	ldr	r2, [r7, #12]
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	429a      	cmp	r2, r3
 8000172:	d214      	bcs.n	800019e <CDC_ReceiveCallback+0x42>
		if (Buf[0] != '\n') {
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b0a      	cmp	r3, #10
 800017a:	d00c      	beq.n	8000196 <CDC_ReceiveCallback+0x3a>
			buff[buffLen] = Buf[0];
 800017c:	4b0b      	ldr	r3, [pc, #44]	@ (80001ac <CDC_ReceiveCallback+0x50>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	461a      	mov	r2, r3
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	7819      	ldrb	r1, [r3, #0]
 8000186:	4b0a      	ldr	r3, [pc, #40]	@ (80001b0 <CDC_ReceiveCallback+0x54>)
 8000188:	5499      	strb	r1, [r3, r2]
			buffLen++;
 800018a:	4b08      	ldr	r3, [pc, #32]	@ (80001ac <CDC_ReceiveCallback+0x50>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	3301      	adds	r3, #1
 8000190:	b2da      	uxtb	r2, r3
 8000192:	4b06      	ldr	r3, [pc, #24]	@ (80001ac <CDC_ReceiveCallback+0x50>)
 8000194:	701a      	strb	r2, [r3, #0]
			recFlag = 1; // Sinaliza que deve processar
			break;
		}

		else {
			recFlag = 1; // Final da mensagem detectado
 8000196:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <CDC_ReceiveCallback+0x58>)
 8000198:	2201      	movs	r2, #1
 800019a:	701a      	strb	r2, [r3, #0]
			break;
 800019c:	e000      	b.n	80001a0 <CDC_ReceiveCallback+0x44>
		}
	}


}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	200002e8 	.word	0x200002e8
 80001b0:	200001e8 	.word	0x200001e8
 80001b4:	200002e9 	.word	0x200002e9

080001b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b08e      	sub	sp, #56	@ 0x38
 80001bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t cnt = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	637b      	str	r3, [r7, #52]	@ 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c2:	f000 f98f 	bl	80004e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c6:	f000 f841 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ca:	f000 f899 	bl	8000300 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001ce:	f006 fc11 	bl	80069f4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  recFlag = 0;
 80001d2:	4b1a      	ldr	r3, [pc, #104]	@ (800023c <main+0x84>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	701a      	strb	r2, [r3, #0]
  buffLen = 0;
 80001d8:	4b19      	ldr	r3, [pc, #100]	@ (8000240 <main+0x88>)
 80001da:	2200      	movs	r2, #0
 80001dc:	701a      	strb	r2, [r3, #0]
  cnt = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	637b      	str	r3, [r7, #52]	@ 0x34
  while (1)
  {
	if (recFlag) {                        // Mensagem completa recebida
 80001e2:	4b16      	ldr	r3, [pc, #88]	@ (800023c <main+0x84>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d023      	beq.n	8000232 <main+0x7a>
	  recFlag = 0;
 80001ea:	4b14      	ldr	r3, [pc, #80]	@ (800023c <main+0x84>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]

	  if (buffLen > 0) {
 80001f0:	4b13      	ldr	r3, [pc, #76]	@ (8000240 <main+0x88>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d01c      	beq.n	8000232 <main+0x7a>
		  cnt++;
 80001f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80001fa:	3301      	adds	r3, #1
 80001fc:	637b      	str	r3, [r7, #52]	@ 0x34
		  sprintf(text, "\n Mensagem de numero %lu: ", cnt);
 80001fe:	463b      	mov	r3, r7
 8000200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000202:	4910      	ldr	r1, [pc, #64]	@ (8000244 <main+0x8c>)
 8000204:	4618      	mov	r0, r3
 8000206:	f007 f897 	bl	8007338 <siprintf>
		  CDC_Transmit_FS((uint8_t *)text, strlen(text));
 800020a:	463b      	mov	r3, r7
 800020c:	4618      	mov	r0, r3
 800020e:	f7ff ff9d 	bl	800014c <strlen>
 8000212:	4603      	mov	r3, r0
 8000214:	b29a      	uxth	r2, r3
 8000216:	463b      	mov	r3, r7
 8000218:	4611      	mov	r1, r2
 800021a:	4618      	mov	r0, r3
 800021c:	f006 fcae 	bl	8006b7c <CDC_Transmit_FS>


		  CDC_Transmit_FS(buff, buffLen);   // Envia a mensagem recebida
 8000220:	4b07      	ldr	r3, [pc, #28]	@ (8000240 <main+0x88>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	4619      	mov	r1, r3
 8000226:	4808      	ldr	r0, [pc, #32]	@ (8000248 <main+0x90>)
 8000228:	f006 fca8 	bl	8006b7c <CDC_Transmit_FS>
		  buffLen = 0;                      // Reseta o comprimento do buffer
 800022c:	4b04      	ldr	r3, [pc, #16]	@ (8000240 <main+0x88>)
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]


		  }
	  }
	HAL_Delay(100);
 8000232:	2064      	movs	r0, #100	@ 0x64
 8000234:	f000 f9b8 	bl	80005a8 <HAL_Delay>
	if (recFlag) {                        // Mensagem completa recebida
 8000238:	e7d3      	b.n	80001e2 <main+0x2a>
 800023a:	bf00      	nop
 800023c:	200002e9 	.word	0x200002e9
 8000240:	200002e8 	.word	0x200002e8
 8000244:	08007cb0 	.word	0x08007cb0
 8000248:	200001e8 	.word	0x200001e8

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b094      	sub	sp, #80	@ 0x50
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000256:	2228      	movs	r2, #40	@ 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f007 f88c 	bl	8007378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000280:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000298:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800029c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 f812 	bl	80022cc <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ae:	f000 f849 	bl	8000344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fa7e 	bl	80027d0 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002da:	f000 f833 	bl	8000344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002de:	2310      	movs	r3, #16
 80002e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f002 fbcd 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002f4:	f000 f826 	bl	8000344 <Error_Handler>
  }
}
 80002f8:	bf00      	nop
 80002fa:	3750      	adds	r7, #80	@ 0x50
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <MX_GPIO_Init+0x40>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	4a0d      	ldr	r2, [pc, #52]	@ (8000340 <MX_GPIO_Init+0x40>)
 800030c:	f043 0320 	orr.w	r3, r3, #32
 8000310:	6193      	str	r3, [r2, #24]
 8000312:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <MX_GPIO_Init+0x40>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	f003 0320 	and.w	r3, r3, #32
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031e:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <MX_GPIO_Init+0x40>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	4a07      	ldr	r2, [pc, #28]	@ (8000340 <MX_GPIO_Init+0x40>)
 8000324:	f043 0304 	orr.w	r3, r3, #4
 8000328:	6193      	str	r3, [r2, #24]
 800032a:	4b05      	ldr	r3, [pc, #20]	@ (8000340 <MX_GPIO_Init+0x40>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	f003 0304 	and.w	r3, r3, #4
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	40021000 	.word	0x40021000

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <Error_Handler+0x8>

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a14      	ldr	r2, [pc, #80]	@ (80003ac <HAL_MspInit+0x5c>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a0e      	ldr	r2, [pc, #56]	@ (80003ac <HAL_MspInit+0x5c>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000386:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <HAL_MspInit+0x60>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <HAL_MspInit+0x60>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010000 	.word	0x40010000

080003b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <NMI_Handler+0x4>

080003bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <HardFault_Handler+0x4>

080003c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <MemManage_Handler+0x4>

080003cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <BusFault_Handler+0x4>

080003d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <UsageFault_Handler+0x4>

080003dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000404:	f000 f8b4 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}

0800040c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000410:	4802      	ldr	r0, [pc, #8]	@ (800041c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000412:	f000 fb16 	bl	8000a42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000fbc 	.word	0x20000fbc

08000420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000428:	4a14      	ldr	r2, [pc, #80]	@ (800047c <_sbrk+0x5c>)
 800042a:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <_sbrk+0x60>)
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000434:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <_sbrk+0x64>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d102      	bne.n	8000442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800043c:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <_sbrk+0x64>)
 800043e:	4a12      	ldr	r2, [pc, #72]	@ (8000488 <_sbrk+0x68>)
 8000440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000442:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <_sbrk+0x64>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	693a      	ldr	r2, [r7, #16]
 800044c:	429a      	cmp	r2, r3
 800044e:	d207      	bcs.n	8000460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000450:	f006 ff9a 	bl	8007388 <__errno>
 8000454:	4603      	mov	r3, r0
 8000456:	220c      	movs	r2, #12
 8000458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800045a:	f04f 33ff 	mov.w	r3, #4294967295
 800045e:	e009      	b.n	8000474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000460:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <_sbrk+0x64>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000466:	4b07      	ldr	r3, [pc, #28]	@ (8000484 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	4a05      	ldr	r2, [pc, #20]	@ (8000484 <_sbrk+0x64>)
 8000470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000472:	68fb      	ldr	r3, [r7, #12]
}
 8000474:	4618      	mov	r0, r3
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20005000 	.word	0x20005000
 8000480:	00000400 	.word	0x00000400
 8000484:	200002ec 	.word	0x200002ec
 8000488:	20001600 	.word	0x20001600

0800048c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000498:	f7ff fff8 	bl	800048c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800049c:	480b      	ldr	r0, [pc, #44]	@ (80004cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800049e:	490c      	ldr	r1, [pc, #48]	@ (80004d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004a0:	4a0c      	ldr	r2, [pc, #48]	@ (80004d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a4:	e002      	b.n	80004ac <LoopCopyDataInit>

080004a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004aa:	3304      	adds	r3, #4

080004ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b0:	d3f9      	bcc.n	80004a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b2:	4a09      	ldr	r2, [pc, #36]	@ (80004d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004b4:	4c09      	ldr	r4, [pc, #36]	@ (80004dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b8:	e001      	b.n	80004be <LoopFillZerobss>

080004ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004bc:	3204      	adds	r2, #4

080004be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c0:	d3fb      	bcc.n	80004ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004c2:	f006 ff67 	bl	8007394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c6:	f7ff fe77 	bl	80001b8 <main>
  bx lr
 80004ca:	4770      	bx	lr
  ldr r0, =_sdata
 80004cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d0:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80004d4:	08007d74 	.word	0x08007d74
  ldr r2, =_sbss
 80004d8:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80004dc:	200015fc 	.word	0x200015fc

080004e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC1_2_IRQHandler>
	...

080004e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <HAL_Init+0x28>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a07      	ldr	r2, [pc, #28]	@ (800050c <HAL_Init+0x28>)
 80004ee:	f043 0310 	orr.w	r3, r3, #16
 80004f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f4:	2003      	movs	r0, #3
 80004f6:	f000 f947 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fa:	200f      	movs	r0, #15
 80004fc:	f000 f808 	bl	8000510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000500:	f7ff ff26 	bl	8000350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40022000 	.word	0x40022000

08000510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000518:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <HAL_InitTick+0x54>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <HAL_InitTick+0x58>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000526:	fbb3 f3f1 	udiv	r3, r3, r1
 800052a:	fbb2 f3f3 	udiv	r3, r2, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f95f 	bl	80007f2 <HAL_SYSTICK_Config>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
 800053c:	e00e      	b.n	800055c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0f      	cmp	r3, #15
 8000542:	d80a      	bhi.n	800055a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000544:	2200      	movs	r2, #0
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	f000 f927 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000550:	4a06      	ldr	r2, [pc, #24]	@ (800056c <HAL_InitTick+0x5c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000556:	2300      	movs	r3, #0
 8000558:	e000      	b.n	800055c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000000 	.word	0x20000000
 8000568:	20000008 	.word	0x20000008
 800056c:	20000004 	.word	0x20000004

08000570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <HAL_IncTick+0x1c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <HAL_IncTick+0x20>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	4a03      	ldr	r2, [pc, #12]	@ (8000590 <HAL_IncTick+0x20>)
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	20000008 	.word	0x20000008
 8000590:	200002f0 	.word	0x200002f0

08000594 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b02      	ldr	r3, [pc, #8]	@ (80005a4 <HAL_GetTick+0x10>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	200002f0 	.word	0x200002f0

080005a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b0:	f7ff fff0 	bl	8000594 <HAL_GetTick>
 80005b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c0:	d005      	beq.n	80005ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <HAL_Delay+0x44>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ce:	bf00      	nop
 80005d0:	f7ff ffe0 	bl	8000594 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d8f7      	bhi.n	80005d0 <HAL_Delay+0x28>
  {
  }
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000008 	.word	0x20000008

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4906      	ldr	r1, [pc, #24]	@ (8000688 <__NVIC_EnableIRQ+0x34>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	e000e100 	.word	0xe000e100

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	490c      	ldr	r1, [pc, #48]	@ (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4908      	ldr	r1, [pc, #32]	@ (80006dc <__NVIC_SetPriority+0x50>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	3b04      	subs	r3, #4
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	@ 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43da      	mvns	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	401a      	ands	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43d9      	mvns	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	@ 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f7ff ff90 	bl	800068c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff2d 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff42 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff90 	bl	80006e0 <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5f 	bl	800068c <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff35 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffa2 	bl	8000744 <SysTick_Config>
 8000800:	4603      	mov	r3, r0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	e0e8      	b.n	80009ee <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d106      	bne.n	8000836 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f006 fad7 	bl	8006de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2203      	movs	r2, #3
 800083a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f002 f9f6 	bl	8002c3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3304      	adds	r3, #4
 8000856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000858:	f002 f9cc 	bl	8002bf4 <USB_CoreInit>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d005      	beq.n	800086e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2202      	movs	r2, #2
 8000866:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e0bf      	b.n	80009ee <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f002 f9fa 	bl	8002c6e <USB_SetCurrentMode>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d005      	beq.n	800088c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2202      	movs	r2, #2
 8000884:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	e0b0      	b.n	80009ee <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e03e      	b.n	8000910 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	4613      	mov	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	440b      	add	r3, r1
 80008a0:	3311      	adds	r3, #17
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80008a6:	7bfa      	ldrb	r2, [r7, #15]
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	440b      	add	r3, r1
 80008b4:	3310      	adds	r3, #16
 80008b6:	7bfa      	ldrb	r2, [r7, #15]
 80008b8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008ba:	7bfa      	ldrb	r2, [r7, #15]
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	440b      	add	r3, r1
 80008c8:	3313      	adds	r3, #19
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80008ce:	7bfa      	ldrb	r2, [r7, #15]
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	4613      	mov	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	440b      	add	r3, r1
 80008dc:	3320      	adds	r3, #32
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80008e2:	7bfa      	ldrb	r2, [r7, #15]
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	440b      	add	r3, r1
 80008f0:	3324      	adds	r3, #36	@ 0x24
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	4613      	mov	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	440b      	add	r3, r1
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	3301      	adds	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	7bfa      	ldrb	r2, [r7, #15]
 8000916:	429a      	cmp	r2, r3
 8000918:	d3bb      	bcc.n	8000892 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800091a:	2300      	movs	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	e044      	b.n	80009aa <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000920:	7bfa      	ldrb	r2, [r7, #15]
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	4613      	mov	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	440b      	add	r3, r1
 800092e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000936:	7bfa      	ldrb	r2, [r7, #15]
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	4613      	mov	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	440b      	add	r3, r1
 8000944:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000948:	7bfa      	ldrb	r2, [r7, #15]
 800094a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800094c:	7bfa      	ldrb	r2, [r7, #15]
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	4613      	mov	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000962:	7bfa      	ldrb	r2, [r7, #15]
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	440b      	add	r3, r1
 8000970:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000978:	7bfa      	ldrb	r2, [r7, #15]
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	440b      	add	r3, r1
 800099c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	3301      	adds	r3, #1
 80009a8:	73fb      	strb	r3, [r7, #15]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	7bfa      	ldrb	r2, [r7, #15]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d3b5      	bcc.n	8000920 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3304      	adds	r3, #4
 80009bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009be:	f002 f962 	bl	8002c86 <USB_DevInit>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d005      	beq.n	80009d4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2202      	movs	r2, #2
 80009cc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e00c      	b.n	80009ee <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2201      	movs	r2, #1
 80009de:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 fbe1 	bl	80051ae <USB_DevDisconnect>

  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d101      	bne.n	8000a0c <HAL_PCD_Start+0x16>
 8000a08:	2302      	movs	r3, #2
 8000a0a:	e016      	b.n	8000a3a <HAL_PCD_Start+0x44>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 f8f8 	bl	8002c0e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000a1e:	2101      	movs	r1, #1
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f006 fc52 	bl	80072ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f004 fbb5 	bl	800519a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b088      	sub	sp, #32
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 fbb7 	bl	80051c2 <USB_ReadInterrupts>
 8000a54:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 fb1a 	bl	800109a <PCD_EP_ISR_Handler>

    return;
 8000a66:	e119      	b.n	8000c9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d013      	beq.n	8000a9a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000a84:	b292      	uxth	r2, r2
 8000a86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f006 fa25 	bl	8006eda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000a90:	2100      	movs	r1, #0
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f905 	bl	8000ca2 <HAL_PCD_SetAddress>

    return;
 8000a98:	e100      	b.n	8000c9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00c      	beq.n	8000abe <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000ab6:	b292      	uxth	r2, r2
 8000ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000abc:	e0ee      	b.n	8000c9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00c      	beq.n	8000ae2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000ada:	b292      	uxth	r2, r2
 8000adc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000ae0:	e0dc      	b.n	8000c9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d027      	beq.n	8000b3c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 0204 	bic.w	r2, r2, #4
 8000afe:	b292      	uxth	r2, r2
 8000b00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0208 	bic.w	r2, r2, #8
 8000b16:	b292      	uxth	r2, r2
 8000b18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f006 fa15 	bl	8006f4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000b34:	b292      	uxth	r2, r2
 8000b36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000b3a:	e0af      	b.n	8000c9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 8083 	beq.w	8000c4e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	77fb      	strb	r3, [r7, #31]
 8000b4c:	e010      	b.n	8000b70 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	7ffb      	ldrb	r3, [r7, #31]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	441a      	add	r2, r3
 8000b5a:	7ffb      	ldrb	r3, [r7, #31]
 8000b5c:	8812      	ldrh	r2, [r2, #0]
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	3320      	adds	r3, #32
 8000b64:	443b      	add	r3, r7
 8000b66:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000b6a:	7ffb      	ldrb	r3, [r7, #31]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	77fb      	strb	r3, [r7, #31]
 8000b70:	7ffb      	ldrb	r3, [r7, #31]
 8000b72:	2b07      	cmp	r3, #7
 8000b74:	d9eb      	bls.n	8000b4e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f042 0201 	orr.w	r2, r2, #1
 8000b88:	b292      	uxth	r2, r2
 8000b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0201 	bic.w	r2, r2, #1
 8000ba0:	b292      	uxth	r2, r2
 8000ba2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000ba6:	bf00      	nop
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f6      	beq.n	8000ba8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000bcc:	b292      	uxth	r2, r2
 8000bce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	77fb      	strb	r3, [r7, #31]
 8000bd6:	e00f      	b.n	8000bf8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	4611      	mov	r1, r2
 8000be0:	7ffa      	ldrb	r2, [r7, #31]
 8000be2:	0092      	lsls	r2, r2, #2
 8000be4:	440a      	add	r2, r1
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	3320      	adds	r3, #32
 8000bea:	443b      	add	r3, r7
 8000bec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000bf0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000bf2:	7ffb      	ldrb	r3, [r7, #31]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	77fb      	strb	r3, [r7, #31]
 8000bf8:	7ffb      	ldrb	r3, [r7, #31]
 8000bfa:	2b07      	cmp	r3, #7
 8000bfc:	d9ec      	bls.n	8000bd8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f042 0208 	orr.w	r2, r2, #8
 8000c10:	b292      	uxth	r2, r2
 8000c12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000c28:	b292      	uxth	r2, r2
 8000c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f042 0204 	orr.w	r2, r2, #4
 8000c40:	b292      	uxth	r2, r2
 8000c42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f006 f966 	bl	8006f18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000c4c:	e026      	b.n	8000c9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00f      	beq.n	8000c78 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000c6a:	b292      	uxth	r2, r2
 8000c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f006 f924 	bl	8006ebe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000c76:	e011      	b.n	8000c9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00c      	beq.n	8000c9c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000c94:	b292      	uxth	r2, r2
 8000c96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000c9a:	bf00      	nop
  }
}
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d101      	bne.n	8000cbc <HAL_PCD_SetAddress+0x1a>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e012      	b.n	8000ce2 <HAL_PCD_SetAddress+0x40>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	78fa      	ldrb	r2, [r7, #3]
 8000cc8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	78fa      	ldrb	r2, [r7, #3]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 fa4e 	bl	8005174 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	70fb      	strb	r3, [r7, #3]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	803b      	strh	r3, [r7, #0]
 8000d00:	4613      	mov	r3, r2
 8000d02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	da0e      	bge.n	8000d2e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	f003 0207 	and.w	r2, r3, #7
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	3310      	adds	r3, #16
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	705a      	strb	r2, [r3, #1]
 8000d2c:	e00e      	b.n	8000d4c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	f003 0207 	and.w	r2, r3, #7
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000d58:	883a      	ldrh	r2, [r7, #0]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	78ba      	ldrb	r2, [r7, #2]
 8000d62:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000d64:	78bb      	ldrb	r3, [r7, #2]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d102      	bne.n	8000d70 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d101      	bne.n	8000d7e <HAL_PCD_EP_Open+0x94>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e00e      	b.n	8000d9c <HAL_PCD_EP_Open+0xb2>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68f9      	ldr	r1, [r7, #12]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 ff97 	bl	8002cc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8000d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	da0e      	bge.n	8000dd6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	f003 0207 	and.w	r2, r3, #7
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	3310      	adds	r3, #16
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	705a      	strb	r2, [r3, #1]
 8000dd4:	e00e      	b.n	8000df4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	f003 0207 	and.w	r2, r3, #7
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2200      	movs	r2, #0
 8000df2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d101      	bne.n	8000e0e <HAL_PCD_EP_Close+0x6a>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e00e      	b.n	8000e2c <HAL_PCD_EP_Close+0x88>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68f9      	ldr	r1, [r7, #12]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fb0f 	bl	8003440 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	460b      	mov	r3, r1
 8000e42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e44:	7afb      	ldrb	r3, [r7, #11]
 8000e46:	f003 0207 	and.w	r2, r3, #7
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4413      	add	r3, r2
 8000e5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	2200      	movs	r2, #0
 8000e72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e74:	7afb      	ldrb	r3, [r7, #11]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6979      	ldr	r1, [r7, #20]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 fcc6 	bl	8003818 <USB_EPStartXfer>

  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	f003 0207 	and.w	r2, r3, #7
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8000eb8:	681b      	ldr	r3, [r3, #0]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ed4:	7afb      	ldrb	r3, [r7, #11]
 8000ed6:	f003 0207 	and.w	r2, r3, #7
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	3310      	adds	r3, #16
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f10:	7afb      	ldrb	r3, [r7, #11]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6979      	ldr	r1, [r7, #20]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fc78 	bl	8003818 <USB_EPStartXfer>

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	7912      	ldrb	r2, [r2, #4]
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d901      	bls.n	8000f50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e04c      	b.n	8000fea <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da0e      	bge.n	8000f76 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	f003 0207 	and.w	r2, r3, #7
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	3310      	adds	r3, #16
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2201      	movs	r2, #1
 8000f72:	705a      	strb	r2, [r3, #1]
 8000f74:	e00c      	b.n	8000f90 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2201      	movs	r2, #1
 8000f94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <HAL_PCD_EP_SetStall+0x7e>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e01c      	b.n	8000fea <HAL_PCD_EP_SetStall+0xb8>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68f9      	ldr	r1, [r7, #12]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 ffdb 	bl	8004f7a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d108      	bne.n	8000fe0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4610      	mov	r0, r2
 8000fdc:	f004 f900 	bl	80051e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	7912      	ldrb	r2, [r2, #4]
 8001008:	4293      	cmp	r3, r2
 800100a:	d901      	bls.n	8001010 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e040      	b.n	8001092 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001014:	2b00      	cmp	r3, #0
 8001016:	da0e      	bge.n	8001036 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	f003 0207 	and.w	r2, r3, #7
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	3310      	adds	r3, #16
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2201      	movs	r2, #1
 8001032:	705a      	strb	r2, [r3, #1]
 8001034:	e00e      	b.n	8001054 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	f003 0207 	and.w	r2, r3, #7
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2200      	movs	r2, #0
 8001058:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	b2da      	uxtb	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800106c:	2b01      	cmp	r3, #1
 800106e:	d101      	bne.n	8001074 <HAL_PCD_EP_ClrStall+0x82>
 8001070:	2302      	movs	r3, #2
 8001072:	e00e      	b.n	8001092 <HAL_PCD_EP_ClrStall+0xa0>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68f9      	ldr	r1, [r7, #12]
 8001082:	4618      	mov	r0, r3
 8001084:	f003 ffc9 	bl	800501a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b096      	sub	sp, #88	@ 0x58
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80010a2:	e3bb      	b.n	800181c <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80010b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80010be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f040 8175 	bne.w	80013b2 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80010c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d14e      	bne.n	8001172 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80010e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80010e4:	81fb      	strh	r3, [r7, #14]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3310      	adds	r3, #16
 80010fc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001106:	b29b      	uxth	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	3302      	adds	r3, #2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	4413      	add	r3, r2
 800111c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001128:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800112a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	441a      	add	r2, r3
 8001134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001136:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001138:	2100      	movs	r1, #0
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f005 fea5 	bl	8006e8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7b5b      	ldrb	r3, [r3, #13]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8368 	beq.w	800181c <PCD_EP_ISR_Handler+0x782>
 800114c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	f040 8363 	bne.w	800181c <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7b5b      	ldrb	r3, [r3, #13]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001160:	b2da      	uxtb	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	735a      	strb	r2, [r3, #13]
 8001170:	e354      	b.n	800181c <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001178:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001184:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800118c:	2b00      	cmp	r3, #0
 800118e:	d034      	beq.n	80011fa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001198:	b29b      	uxth	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	3306      	adds	r3, #6
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011ba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80011c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80011ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011cc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	f004 f856 	bl	8005280 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80011e0:	4013      	ands	r3, r2
 80011e2:	823b      	strh	r3, [r7, #16]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	8a3a      	ldrh	r2, [r7, #16]
 80011ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011ee:	b292      	uxth	r2, r2
 80011f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f005 fe1c 	bl	8006e30 <HAL_PCD_SetupStageCallback>
 80011f8:	e310      	b.n	800181c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80011fa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f280 830c 	bge.w	800181c <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b29a      	uxth	r2, r3
 800120c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001210:	4013      	ands	r3, r2
 8001212:	83fb      	strh	r3, [r7, #30]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	8bfa      	ldrh	r2, [r7, #30]
 800121a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800121e:	b292      	uxth	r2, r2
 8001220:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800122a:	b29b      	uxth	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	3306      	adds	r3, #6
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	4413      	add	r3, r2
 8001240:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800124a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800124c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800124e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d019      	beq.n	800128a <PCD_EP_ISR_Handler+0x1f0>
 8001256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d015      	beq.n	800128a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001264:	6959      	ldr	r1, [r3, #20]
 8001266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001268:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800126a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800126c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800126e:	b29b      	uxth	r3, r3
 8001270:	f004 f806 	bl	8005280 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001276:	695a      	ldr	r2, [r3, #20]
 8001278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	441a      	add	r2, r3
 800127e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001280:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001282:	2100      	movs	r1, #0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f005 fde5 	bl	8006e54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001294:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800129c:	2b00      	cmp	r3, #0
 800129e:	f040 82bd 	bne.w	800181c <PCD_EP_ISR_Handler+0x782>
 80012a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80012a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80012aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80012ae:	f000 82b5 	beq.w	800181c <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	4413      	add	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012dc:	b29a      	uxth	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	801a      	strh	r2, [r3, #0]
 80012e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80012e8:	d91d      	bls.n	8001326 <PCD_EP_ISR_Handler+0x28c>
 80012ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80012f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <PCD_EP_ISR_Handler+0x26a>
 80012fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001300:	3b01      	subs	r3, #1
 8001302:	647b      	str	r3, [r7, #68]	@ 0x44
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	b29a      	uxth	r2, r3
 800130a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800130c:	b29b      	uxth	r3, r3
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	b29b      	uxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b29b      	uxth	r3, r3
 8001316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800131a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800131e:	b29a      	uxth	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	801a      	strh	r2, [r3, #0]
 8001324:	e026      	b.n	8001374 <PCD_EP_ISR_Handler+0x2da>
 8001326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10a      	bne.n	8001344 <PCD_EP_ISR_Handler+0x2aa>
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800133c:	b29a      	uxth	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	801a      	strh	r2, [r3, #0]
 8001342:	e017      	b.n	8001374 <PCD_EP_ISR_Handler+0x2da>
 8001344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	085b      	lsrs	r3, r3, #1
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44
 800134c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <PCD_EP_ISR_Handler+0x2c4>
 8001358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800135a:	3301      	adds	r3, #1
 800135c:	647b      	str	r3, [r7, #68]	@ 0x44
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b29a      	uxth	r2, r3
 8001364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001366:	b29b      	uxth	r3, r3
 8001368:	029b      	lsls	r3, r3, #10
 800136a:	b29b      	uxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b29a      	uxth	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001384:	827b      	strh	r3, [r7, #18]
 8001386:	8a7b      	ldrh	r3, [r7, #18]
 8001388:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800138c:	827b      	strh	r3, [r7, #18]
 800138e:	8a7b      	ldrh	r3, [r7, #18]
 8001390:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001394:	827b      	strh	r3, [r7, #18]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	8a7b      	ldrh	r3, [r7, #18]
 800139c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80013a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80013a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	8013      	strh	r3, [r2, #0]
 80013b0:	e234      	b.n	800181c <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80013c6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f280 80fc 	bge.w	80015c8 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80013e6:	4013      	ands	r3, r2
 80013e8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80013fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001402:	b292      	uxth	r2, r2
 8001404:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001406:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800141c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800141e:	7b1b      	ldrb	r3, [r3, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d125      	bne.n	8001470 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800142c:	b29b      	uxth	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	3306      	adds	r3, #6
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	4413      	add	r3, r2
 8001442:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800144c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001450:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8092 	beq.w	800157e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001460:	6959      	ldr	r1, [r3, #20]
 8001462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001464:	88da      	ldrh	r2, [r3, #6]
 8001466:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800146a:	f003 ff09 	bl	8005280 <USB_ReadPMA>
 800146e:	e086      	b.n	800157e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001472:	78db      	ldrb	r3, [r3, #3]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d10a      	bne.n	800148e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001478:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800147c:	461a      	mov	r2, r3
 800147e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 f9d9 	bl	8001838 <HAL_PCD_EP_DB_Receive>
 8001486:	4603      	mov	r3, r0
 8001488:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800148c:	e077      	b.n	800157e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80014a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014a8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	441a      	add	r2, r3
 80014ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80014be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80014c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80014c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d024      	beq.n	8001536 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4413      	add	r3, r2
 8001500:	3302      	adds	r3, #2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	4413      	add	r3, r2
 800150a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001514:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001518:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800151c:	2b00      	cmp	r3, #0
 800151e:	d02e      	beq.n	800157e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001526:	6959      	ldr	r1, [r3, #20]
 8001528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800152a:	891a      	ldrh	r2, [r3, #8]
 800152c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001530:	f003 fea6 	bl	8005280 <USB_ReadPMA>
 8001534:	e023      	b.n	800157e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800153e:	b29b      	uxth	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	3306      	adds	r3, #6
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001562:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001570:	6959      	ldr	r1, [r3, #20]
 8001572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001574:	895a      	ldrh	r2, [r3, #10]
 8001576:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800157a:	f003 fe81 	bl	8005280 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800157e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001586:	441a      	add	r2, r3
 8001588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800158a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800158c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001594:	441a      	add	r2, r3
 8001596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001598:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800159a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <PCD_EP_ISR_Handler+0x514>
 80015a2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80015a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d206      	bcs.n	80015bc <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80015ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f005 fc4d 	bl	8006e54 <HAL_PCD_DataOutStageCallback>
 80015ba:	e005      	b.n	80015c8 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 f928 	bl	8003818 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80015c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80015cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 8123 	beq.w	800181c <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80015d6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	3310      	adds	r3, #16
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4413      	add	r3, r2
 80015e8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001604:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	441a      	add	r2, r3
 8001616:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800161a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800161e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001622:	b29b      	uxth	r3, r3
 8001624:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001628:	78db      	ldrb	r3, [r3, #3]
 800162a:	2b01      	cmp	r3, #1
 800162c:	f040 80a2 	bne.w	8001774 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001638:	7b1b      	ldrb	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8093 	beq.w	8001766 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001640:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001648:	2b00      	cmp	r3, #0
 800164a:	d046      	beq.n	80016da <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800164c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800164e:	785b      	ldrb	r3, [r3, #1]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d126      	bne.n	80016a2 <PCD_EP_ISR_Handler+0x608>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001662:	b29b      	uxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	4413      	add	r3, r2
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
 800166c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	011a      	lsls	r2, r3, #4
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	4413      	add	r3, r2
 8001676:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001686:	b29a      	uxth	r2, r3
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800169a:	b29a      	uxth	r2, r3
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	801a      	strh	r2, [r3, #0]
 80016a0:	e061      	b.n	8001766 <PCD_EP_ISR_Handler+0x6cc>
 80016a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d15d      	bne.n	8001766 <PCD_EP_ISR_Handler+0x6cc>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016be:	4413      	add	r3, r2
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	011a      	lsls	r2, r3, #4
 80016c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ca:	4413      	add	r3, r2
 80016cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d4:	2200      	movs	r2, #0
 80016d6:	801a      	strh	r2, [r3, #0]
 80016d8:	e045      	b.n	8001766 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d126      	bne.n	8001736 <PCD_EP_ISR_Handler+0x69c>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016fc:	4413      	add	r3, r2
 80016fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	011a      	lsls	r2, r3, #4
 8001706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001708:	4413      	add	r3, r2
 800170a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800171a:	b29a      	uxth	r2, r3
 800171c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800171e:	801a      	strh	r2, [r3, #0]
 8001720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800172a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800172e:	b29a      	uxth	r2, r3
 8001730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001732:	801a      	strh	r2, [r3, #0]
 8001734:	e017      	b.n	8001766 <PCD_EP_ISR_Handler+0x6cc>
 8001736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001738:	785b      	ldrb	r3, [r3, #1]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d113      	bne.n	8001766 <PCD_EP_ISR_Handler+0x6cc>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001746:	b29b      	uxth	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800174c:	4413      	add	r3, r2
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	011a      	lsls	r2, r3, #4
 8001756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001758:	4413      	add	r3, r2
 800175a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800175e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001762:	2200      	movs	r2, #0
 8001764:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4619      	mov	r1, r3
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f005 fb8c 	bl	8006e8a <HAL_PCD_DataInStageCallback>
 8001772:	e053      	b.n	800181c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001774:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d146      	bne.n	800180e <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001788:	b29b      	uxth	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	3302      	adds	r3, #2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80017ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d907      	bls.n	80017c8 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80017b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80017c0:	1ad2      	subs	r2, r2, r3
 80017c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c4:	619a      	str	r2, [r3, #24]
 80017c6:	e002      	b.n	80017ce <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80017c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80017ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	4619      	mov	r1, r3
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f005 fb54 	bl	8006e8a <HAL_PCD_DataInStageCallback>
 80017e2:	e01b      	b.n	800181c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80017e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80017ec:	441a      	add	r2, r3
 80017ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80017f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f4:	69da      	ldr	r2, [r3, #28]
 80017f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80017fa:	441a      	add	r2, r3
 80017fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001806:	4618      	mov	r0, r3
 8001808:	f002 f806 	bl	8003818 <USB_EPStartXfer>
 800180c:	e006      	b.n	800181c <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800180e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001812:	461a      	mov	r2, r3
 8001814:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f91b 	bl	8001a52 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001824:	b29b      	uxth	r3, r3
 8001826:	b21b      	sxth	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	f6ff ac3b 	blt.w	80010a4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3758      	adds	r7, #88	@ 0x58
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d07e      	beq.n	800194e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4413      	add	r3, r2
 8001864:	3302      	adds	r3, #2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	4413      	add	r3, r2
 800186e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001878:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	8b7b      	ldrh	r3, [r7, #26]
 8001880:	429a      	cmp	r2, r3
 8001882:	d306      	bcc.n	8001892 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	699a      	ldr	r2, [r3, #24]
 8001888:	8b7b      	ldrh	r3, [r7, #26]
 800188a:	1ad2      	subs	r2, r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	619a      	str	r2, [r3, #24]
 8001890:	e002      	b.n	8001898 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d123      	bne.n	80018e8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018ba:	833b      	strh	r3, [r7, #24]
 80018bc:	8b3b      	ldrh	r3, [r7, #24]
 80018be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80018c2:	833b      	strh	r3, [r7, #24]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	441a      	add	r2, r3
 80018d2:	8b3b      	ldrh	r3, [r7, #24]
 80018d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80018d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80018dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d01f      	beq.n	8001932 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	441a      	add	r2, r3
 800191c:	8afb      	ldrh	r3, [r7, #22]
 800191e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001922:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800192a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800192e:	b29b      	uxth	r3, r3
 8001930:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001932:	8b7b      	ldrh	r3, [r7, #26]
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 8087 	beq.w	8001a48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	6959      	ldr	r1, [r3, #20]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	891a      	ldrh	r2, [r3, #8]
 8001946:	8b7b      	ldrh	r3, [r7, #26]
 8001948:	f003 fc9a 	bl	8005280 <USB_ReadPMA>
 800194c:	e07c      	b.n	8001a48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001956:	b29b      	uxth	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	3306      	adds	r3, #6
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	4413      	add	r3, r2
 800196c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001976:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	8b7b      	ldrh	r3, [r7, #26]
 800197e:	429a      	cmp	r2, r3
 8001980:	d306      	bcc.n	8001990 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	699a      	ldr	r2, [r3, #24]
 8001986:	8b7b      	ldrh	r3, [r7, #26]
 8001988:	1ad2      	subs	r2, r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	619a      	str	r2, [r3, #24]
 800198e:	e002      	b.n	8001996 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d123      	bne.n	80019e6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019b8:	83fb      	strh	r3, [r7, #30]
 80019ba:	8bfb      	ldrh	r3, [r7, #30]
 80019bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80019c0:	83fb      	strh	r3, [r7, #30]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	441a      	add	r2, r3
 80019d0:	8bfb      	ldrh	r3, [r7, #30]
 80019d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80019d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80019da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d11f      	bne.n	8001a30 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a0a:	83bb      	strh	r3, [r7, #28]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	441a      	add	r2, r3
 8001a1a:	8bbb      	ldrh	r3, [r7, #28]
 8001a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001a30:	8b7b      	ldrh	r3, [r7, #26]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	6959      	ldr	r1, [r3, #20]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	895a      	ldrh	r2, [r3, #10]
 8001a42:	8b7b      	ldrh	r3, [r7, #26]
 8001a44:	f003 fc1c 	bl	8005280 <USB_ReadPMA>
    }
  }

  return count;
 8001a48:	8b7b      	ldrh	r3, [r7, #26]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b0a4      	sub	sp, #144	@ 0x90
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 81dd 	beq.w	8001e26 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	3302      	adds	r3, #2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a94:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d907      	bls.n	8001ab4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001aac:	1ad2      	subs	r2, r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	619a      	str	r2, [r3, #24]
 8001ab2:	e002      	b.n	8001aba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 80b9 	bne.w	8001c36 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	785b      	ldrb	r3, [r3, #1]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d126      	bne.n	8001b1a <HAL_PCD_EP_DB_Transmit+0xc8>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae0:	4413      	add	r3, r2
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	011a      	lsls	r2, r3, #4
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	4413      	add	r3, r2
 8001aee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b02:	801a      	strh	r2, [r3, #0]
 8001b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b16:	801a      	strh	r2, [r3, #0]
 8001b18:	e01a      	b.n	8001b50 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	785b      	ldrb	r3, [r3, #1]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d116      	bne.n	8001b50 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b36:	4413      	add	r3, r2
 8001b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	011a      	lsls	r2, r3, #4
 8001b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b42:	4413      	add	r3, r2
 8001b44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	785b      	ldrb	r3, [r3, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d126      	bne.n	8001bac <HAL_PCD_EP_DB_Transmit+0x15a>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	011a      	lsls	r2, r3, #4
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	801a      	strh	r2, [r3, #0]
 8001baa:	e017      	b.n	8001bdc <HAL_PCD_EP_DB_Transmit+0x18a>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	785b      	ldrb	r3, [r3, #1]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d113      	bne.n	8001bdc <HAL_PCD_EP_DB_Transmit+0x18a>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	4413      	add	r3, r2
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	011a      	lsls	r2, r3, #4
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	4413      	add	r3, r2
 8001bd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001bd4:	623b      	str	r3, [r7, #32]
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f005 f951 	bl	8006e8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 82fc 	beq.w	80021ec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c0e:	82fb      	strh	r3, [r7, #22]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	441a      	add	r2, r3
 8001c1e:	8afb      	ldrh	r3, [r7, #22]
 8001c20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	8013      	strh	r3, [r2, #0]
 8001c34:	e2da      	b.n	80021ec <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d021      	beq.n	8001c84 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c5a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	441a      	add	r2, r3
 8001c6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	f040 82ae 	bne.w	80021ec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001c98:	441a      	add	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ca6:	441a      	add	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d30b      	bcc.n	8001cd0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	6a1a      	ldr	r2, [r3, #32]
 8001cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cc8:	1ad2      	subs	r2, r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	621a      	str	r2, [r3, #32]
 8001cce:	e017      	b.n	8001d00 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d108      	bne.n	8001cea <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001cd8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001cdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001ce8:	e00a      	b.n	8001d00 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	785b      	ldrb	r3, [r3, #1]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d165      	bne.n	8001dd4 <HAL_PCD_EP_DB_Transmit+0x382>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d1c:	4413      	add	r3, r2
 8001d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	011a      	lsls	r2, r3, #4
 8001d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d28:	4413      	add	r3, r2
 8001d2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d3e:	801a      	strh	r2, [r3, #0]
 8001d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d44:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d46:	d91d      	bls.n	8001d84 <HAL_PCD_EP_DB_Transmit+0x332>
 8001d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <HAL_PCD_EP_DB_Transmit+0x310>
 8001d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	029b      	lsls	r3, r3, #10
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	e044      	b.n	8001e0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10a      	bne.n	8001da2 <HAL_PCD_EP_DB_Transmit+0x350>
 8001d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d9e:	801a      	strh	r2, [r3, #0]
 8001da0:	e035      	b.n	8001e0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_PCD_EP_DB_Transmit+0x36a>
 8001db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001db8:	3301      	adds	r3, #1
 8001dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	e01c      	b.n	8001e0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	785b      	ldrb	r3, [r3, #1]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d118      	bne.n	8001e0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001df0:	4413      	add	r3, r2
 8001df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	011a      	lsls	r2, r3, #4
 8001dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e0c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	6959      	ldr	r1, [r3, #20]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	891a      	ldrh	r2, [r3, #8]
 8001e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	f003 f9e9 	bl	80051f6 <USB_WritePMA>
 8001e24:	e1e2      	b.n	80021ec <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3306      	adds	r3, #6
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d307      	bcc.n	8001e6e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001e66:	1ad2      	subs	r2, r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	619a      	str	r2, [r3, #24]
 8001e6c:	e002      	b.n	8001e74 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 80c0 	bne.w	8001ffe <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	785b      	ldrb	r3, [r3, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d126      	bne.n	8001ed4 <HAL_PCD_EP_DB_Transmit+0x482>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e9a:	4413      	add	r3, r2
 8001e9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	011a      	lsls	r2, r3, #4
 8001ea4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001eac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001eae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ed0:	801a      	strh	r2, [r3, #0]
 8001ed2:	e01a      	b.n	8001f0a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	785b      	ldrb	r3, [r3, #1]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d116      	bne.n	8001f0a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ef0:	4413      	add	r3, r2
 8001ef2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	011a      	lsls	r2, r3, #4
 8001efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001efc:	4413      	add	r3, r2
 8001efe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f02:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f06:	2200      	movs	r2, #0
 8001f08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d12b      	bne.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x51e>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f2c:	4413      	add	r3, r2
 8001f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	011a      	lsls	r2, r3, #4
 8001f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f38:	4413      	add	r3, r2
 8001f3a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	e017      	b.n	8001fa0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	785b      	ldrb	r3, [r3, #1]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d113      	bne.n	8001fa0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f86:	4413      	add	r3, r2
 8001f88:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	011a      	lsls	r2, r3, #4
 8001f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f92:	4413      	add	r3, r2
 8001f94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f004 ff6f 	bl	8006e8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 811a 	bne.w	80021ec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fd2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	441a      	add	r2, r3
 8001fe4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8001fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	8013      	strh	r3, [r2, #0]
 8001ffc:	e0f6      	b.n	80021ec <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d121      	bne.n	800204c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800201e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002022:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	441a      	add	r2, r3
 8002034:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800203c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002040:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002048:	b29b      	uxth	r3, r3
 800204a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002052:	2b01      	cmp	r3, #1
 8002054:	f040 80ca 	bne.w	80021ec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002060:	441a      	add	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800206e:	441a      	add	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	6a1a      	ldr	r2, [r3, #32]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	429a      	cmp	r2, r3
 800207e:	d30b      	bcc.n	8002098 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6a1a      	ldr	r2, [r3, #32]
 800208c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002090:	1ad2      	subs	r2, r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	621a      	str	r2, [r3, #32]
 8002096:	e017      	b.n	80020c8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d108      	bne.n	80020b2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80020a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80020a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80020b0:	e00a      	b.n	80020c8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	785b      	ldrb	r3, [r3, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d165      	bne.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x750>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020ea:	4413      	add	r3, r2
 80020ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	011a      	lsls	r2, r3, #4
 80020f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020f6:	4413      	add	r3, r2
 80020f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80020fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002108:	b29a      	uxth	r2, r3
 800210a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800210c:	801a      	strh	r2, [r3, #0]
 800210e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002112:	2b3e      	cmp	r3, #62	@ 0x3e
 8002114:	d91d      	bls.n	8002152 <HAL_PCD_EP_DB_Transmit+0x700>
 8002116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800211e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_PCD_EP_DB_Transmit+0x6de>
 800212a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800212c:	3b01      	subs	r3, #1
 800212e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002130:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b29a      	uxth	r2, r3
 8002136:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002138:	b29b      	uxth	r3, r3
 800213a:	029b      	lsls	r3, r3, #10
 800213c:	b29b      	uxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800214a:	b29a      	uxth	r2, r3
 800214c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800214e:	801a      	strh	r2, [r3, #0]
 8002150:	e041      	b.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <HAL_PCD_EP_DB_Transmit+0x71e>
 800215a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002168:	b29a      	uxth	r2, r3
 800216a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800216c:	801a      	strh	r2, [r3, #0]
 800216e:	e032      	b.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002170:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_PCD_EP_DB_Transmit+0x738>
 8002184:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002186:	3301      	adds	r3, #1
 8002188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800218a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29a      	uxth	r2, r3
 8002190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002192:	b29b      	uxth	r3, r3
 8002194:	029b      	lsls	r3, r3, #10
 8002196:	b29b      	uxth	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b29a      	uxth	r2, r3
 800219c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800219e:	801a      	strh	r2, [r3, #0]
 80021a0:	e019      	b.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x784>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d115      	bne.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x784>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b8:	4413      	add	r3, r2
 80021ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	011a      	lsls	r2, r3, #4
 80021c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c4:	4413      	add	r3, r2
 80021c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80021cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021d4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6959      	ldr	r1, [r3, #20]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	895a      	ldrh	r2, [r3, #10]
 80021e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f003 f805 	bl	80051f6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002206:	82bb      	strh	r3, [r7, #20]
 8002208:	8abb      	ldrh	r3, [r7, #20]
 800220a:	f083 0310 	eor.w	r3, r3, #16
 800220e:	82bb      	strh	r3, [r7, #20]
 8002210:	8abb      	ldrh	r3, [r7, #20]
 8002212:	f083 0320 	eor.w	r3, r3, #32
 8002216:	82bb      	strh	r3, [r7, #20]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	8abb      	ldrh	r3, [r7, #20]
 8002228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800222c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002238:	b29b      	uxth	r3, r3
 800223a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3790      	adds	r7, #144	@ 0x90
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002246:	b480      	push	{r7}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	817b      	strh	r3, [r7, #10]
 8002254:	4613      	mov	r3, r2
 8002256:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002258:	897b      	ldrh	r3, [r7, #10]
 800225a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002264:	897b      	ldrh	r3, [r7, #10]
 8002266:	f003 0207 	and.w	r2, r3, #7
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	3310      	adds	r3, #16
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e009      	b.n	8002290 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800227c:	897a      	ldrh	r2, [r7, #10]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4413      	add	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002290:	893b      	ldrh	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2200      	movs	r2, #0
 800229a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	80da      	strh	r2, [r3, #6]
 80022a4:	e00b      	b.n	80022be <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2201      	movs	r2, #1
 80022aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e272      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8087 	beq.w	80023fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ec:	4b92      	ldr	r3, [pc, #584]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d00c      	beq.n	8002312 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d112      	bne.n	800232a <HAL_RCC_OscConfig+0x5e>
 8002304:	4b8c      	ldr	r3, [pc, #560]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002310:	d10b      	bne.n	800232a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002312:	4b89      	ldr	r3, [pc, #548]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d06c      	beq.n	80023f8 <HAL_RCC_OscConfig+0x12c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d168      	bne.n	80023f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e24c      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x76>
 8002334:	4b80      	ldr	r3, [pc, #512]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a7f      	ldr	r2, [pc, #508]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	e02e      	b.n	80023a0 <HAL_RCC_OscConfig+0xd4>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x98>
 800234a:	4b7b      	ldr	r3, [pc, #492]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a7a      	ldr	r2, [pc, #488]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b78      	ldr	r3, [pc, #480]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a77      	ldr	r2, [pc, #476]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e01d      	b.n	80023a0 <HAL_RCC_OscConfig+0xd4>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0xbc>
 800236e:	4b72      	ldr	r3, [pc, #456]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a71      	ldr	r2, [pc, #452]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b6f      	ldr	r3, [pc, #444]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6e      	ldr	r2, [pc, #440]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0xd4>
 8002388:	4b6b      	ldr	r3, [pc, #428]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6a      	ldr	r2, [pc, #424]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800238e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b68      	ldr	r3, [pc, #416]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a67      	ldr	r2, [pc, #412]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7fe f8f4 	bl	8000594 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b0:	f7fe f8f0 	bl	8000594 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	@ 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e200      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0xe4>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe f8e0 	bl	8000594 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe f8dc 	bl	8000594 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	@ 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e1ec      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ea:	4b53      	ldr	r3, [pc, #332]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x10c>
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d063      	beq.n	80024ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002406:	4b4c      	ldr	r3, [pc, #304]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002412:	4b49      	ldr	r3, [pc, #292]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b08      	cmp	r3, #8
 800241c:	d11c      	bne.n	8002458 <HAL_RCC_OscConfig+0x18c>
 800241e:	4b46      	ldr	r3, [pc, #280]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	4b43      	ldr	r3, [pc, #268]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_RCC_OscConfig+0x176>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e1c0      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002442:	4b3d      	ldr	r3, [pc, #244]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4939      	ldr	r1, [pc, #228]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	e03a      	b.n	80024ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002460:	4b36      	ldr	r3, [pc, #216]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fe f895 	bl	8000594 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe f891 	bl	8000594 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1a1      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002480:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b2a      	ldr	r3, [pc, #168]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4927      	ldr	r1, [pc, #156]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
 80024a0:	e015      	b.n	80024ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a2:	4b26      	ldr	r3, [pc, #152]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7fe f874 	bl	8000594 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b0:	f7fe f870 	bl	8000594 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e180      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d03a      	beq.n	8002550 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d019      	beq.n	8002516 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e2:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <HAL_RCC_OscConfig+0x274>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7fe f854 	bl	8000594 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe f850 	bl	8000594 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e160      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002502:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800250e:	2001      	movs	r0, #1
 8002510:	f000 fa9c 	bl	8002a4c <RCC_Delay>
 8002514:	e01c      	b.n	8002550 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002516:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <HAL_RCC_OscConfig+0x274>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7fe f83a 	bl	8000594 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002522:	e00f      	b.n	8002544 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002524:	f7fe f836 	bl	8000594 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d908      	bls.n	8002544 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e146      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	42420000 	.word	0x42420000
 8002540:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	4b92      	ldr	r3, [pc, #584]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e9      	bne.n	8002524 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a6 	beq.w	80026aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002562:	4b8b      	ldr	r3, [pc, #556]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4b88      	ldr	r3, [pc, #544]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a87      	ldr	r2, [pc, #540]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002578:	61d3      	str	r3, [r2, #28]
 800257a:	4b85      	ldr	r3, [pc, #532]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b82      	ldr	r3, [pc, #520]	@ (8002794 <HAL_RCC_OscConfig+0x4c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b7f      	ldr	r3, [pc, #508]	@ (8002794 <HAL_RCC_OscConfig+0x4c8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7e      	ldr	r2, [pc, #504]	@ (8002794 <HAL_RCC_OscConfig+0x4c8>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fd fff7 	bl	8000594 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fd fff3 	bl	8000594 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b64      	cmp	r3, #100	@ 0x64
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e103      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b75      	ldr	r3, [pc, #468]	@ (8002794 <HAL_RCC_OscConfig+0x4c8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x312>
 80025d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6213      	str	r3, [r2, #32]
 80025dc:	e02d      	b.n	800263a <HAL_RCC_OscConfig+0x36e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x334>
 80025e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4a69      	ldr	r2, [pc, #420]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6213      	str	r3, [r2, #32]
 80025f2:	4b67      	ldr	r3, [pc, #412]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a66      	ldr	r2, [pc, #408]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	f023 0304 	bic.w	r3, r3, #4
 80025fc:	6213      	str	r3, [r2, #32]
 80025fe:	e01c      	b.n	800263a <HAL_RCC_OscConfig+0x36e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d10c      	bne.n	8002622 <HAL_RCC_OscConfig+0x356>
 8002608:	4b61      	ldr	r3, [pc, #388]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a60      	ldr	r2, [pc, #384]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	4b5e      	ldr	r3, [pc, #376]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a5d      	ldr	r2, [pc, #372]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e00b      	b.n	800263a <HAL_RCC_OscConfig+0x36e>
 8002622:	4b5b      	ldr	r3, [pc, #364]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a5a      	ldr	r2, [pc, #360]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	4b58      	ldr	r3, [pc, #352]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a57      	ldr	r2, [pc, #348]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d015      	beq.n	800266e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7fd ffa7 	bl	8000594 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fd ffa3 	bl	8000594 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0b1      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002660:	4b4b      	ldr	r3, [pc, #300]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ee      	beq.n	800264a <HAL_RCC_OscConfig+0x37e>
 800266c:	e014      	b.n	8002698 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7fd ff91 	bl	8000594 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fd ff8d 	bl	8000594 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e09b      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268c:	4b40      	ldr	r3, [pc, #256]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ee      	bne.n	8002676 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d105      	bne.n	80026aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269e:	4b3c      	ldr	r3, [pc, #240]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8087 	beq.w	80027c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b4:	4b36      	ldr	r3, [pc, #216]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d061      	beq.n	8002784 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d146      	bne.n	8002756 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c8:	4b33      	ldr	r3, [pc, #204]	@ (8002798 <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fd ff61 	bl	8000594 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fd ff5d 	bl	8000594 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e06d      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e8:	4b29      	ldr	r3, [pc, #164]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026fc:	d108      	bne.n	8002710 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	4921      	ldr	r1, [pc, #132]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002710:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a19      	ldr	r1, [r3, #32]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	430b      	orrs	r3, r1
 8002722:	491b      	ldr	r1, [pc, #108]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_RCC_OscConfig+0x4cc>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fd ff31 	bl	8000594 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002736:	f7fd ff2d 	bl	8000594 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e03d      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x46a>
 8002754:	e035      	b.n	80027c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <HAL_RCC_OscConfig+0x4cc>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fd ff1a 	bl	8000594 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7fd ff16 	bl	8000594 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e026      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x498>
 8002782:	e01e      	b.n	80027c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d107      	bne.n	800279c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e019      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
 8002790:	40021000 	.word	0x40021000
 8002794:	40007000 	.word	0x40007000
 8002798:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800279c:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <HAL_RCC_OscConfig+0x500>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0d0      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d910      	bls.n	8002814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b67      	ldr	r3, [pc, #412]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0207 	bic.w	r2, r3, #7
 80027fa:	4965      	ldr	r1, [pc, #404]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0b8      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800282c:	4b59      	ldr	r3, [pc, #356]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a58      	ldr	r2, [pc, #352]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002836:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002844:	4b53      	ldr	r3, [pc, #332]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a52      	ldr	r2, [pc, #328]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800284e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b50      	ldr	r3, [pc, #320]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	494d      	ldr	r1, [pc, #308]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d040      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b47      	ldr	r3, [pc, #284]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d115      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b41      	ldr	r3, [pc, #260]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e073      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b3d      	ldr	r3, [pc, #244]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06b      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b39      	ldr	r3, [pc, #228]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4936      	ldr	r1, [pc, #216]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7fd fe68 	bl	8000594 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fd fe64 	bl	8000594 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e053      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b2d      	ldr	r3, [pc, #180]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b27      	ldr	r3, [pc, #156]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d210      	bcs.n	8002920 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b24      	ldr	r3, [pc, #144]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 0207 	bic.w	r2, r3, #7
 8002906:	4922      	ldr	r1, [pc, #136]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e032      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800292c:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4916      	ldr	r1, [pc, #88]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	490e      	ldr	r1, [pc, #56]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800295e:	f000 f821 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002962:	4602      	mov	r2, r0
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	490a      	ldr	r1, [pc, #40]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002970:	5ccb      	ldrb	r3, [r1, r3]
 8002972:	fa22 f303 	lsr.w	r3, r2, r3
 8002976:	4a09      	ldr	r2, [pc, #36]	@ (800299c <HAL_RCC_ClockConfig+0x1cc>)
 8002978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x1d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fdc6 	bl	8000510 <HAL_InitTick>

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40022000 	.word	0x40022000
 8002994:	40021000 	.word	0x40021000
 8002998:	08007d0c 	.word	0x08007d0c
 800299c:	20000000 	.word	0x20000000
 80029a0:	20000004 	.word	0x20000004

080029a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029be:	4b1e      	ldr	r3, [pc, #120]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x30>
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x36>
 80029d2:	e027      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d4:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80029d6:	613b      	str	r3, [r7, #16]
      break;
 80029d8:	e027      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0c9b      	lsrs	r3, r3, #18
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029f2:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	0c5b      	lsrs	r3, r3, #17
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	4a11      	ldr	r2, [pc, #68]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a06:	fb03 f202 	mul.w	r2, r3, r2
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e004      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0c      	ldr	r2, [pc, #48]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	613b      	str	r3, [r7, #16]
      break;
 8002a22:	e002      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a26:	613b      	str	r3, [r7, #16]
      break;
 8002a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2a:	693b      	ldr	r3, [r7, #16]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	007a1200 	.word	0x007a1200
 8002a40:	08007d1c 	.word	0x08007d1c
 8002a44:	08007d2c 	.word	0x08007d2c
 8002a48:	003d0900 	.word	0x003d0900

08002a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a54:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <RCC_Delay+0x34>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <RCC_Delay+0x38>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0a5b      	lsrs	r3, r3, #9
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a68:	bf00      	nop
  }
  while (Delay --);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1e5a      	subs	r2, r3, #1
 8002a6e:	60fa      	str	r2, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f9      	bne.n	8002a68 <RCC_Delay+0x1c>
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	20000000 	.word	0x20000000
 8002a84:	10624dd3 	.word	0x10624dd3

08002a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d07d      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa8:	4b4f      	ldr	r3, [pc, #316]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	4a4b      	ldr	r2, [pc, #300]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	61d3      	str	r3, [r2, #28]
 8002ac0:	4b49      	ldr	r3, [pc, #292]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002acc:	2301      	movs	r3, #1
 8002ace:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b46      	ldr	r3, [pc, #280]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d118      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002adc:	4b43      	ldr	r3, [pc, #268]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a42      	ldr	r2, [pc, #264]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae8:	f7fd fd54 	bl	8000594 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	e008      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7fd fd50 	bl	8000594 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	@ 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e06d      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b02:	4b3a      	ldr	r3, [pc, #232]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b0e:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02e      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d027      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b36:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b42:	4a29      	ldr	r2, [pc, #164]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d014      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7fd fd1f 	bl	8000594 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fd fd1b 	bl	8000594 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e036      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ee      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4917      	ldr	r1, [pc, #92]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4a13      	ldr	r2, [pc, #76]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bac:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	490b      	ldr	r1, [pc, #44]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bca:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4904      	ldr	r1, [pc, #16]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	42420440 	.word	0x42420440

08002bf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c1e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002c22:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c42:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002c46:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	4013      	ands	r3, r2
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	4638      	mov	r0, r7
 8002c90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b09d      	sub	sp, #116	@ 0x74
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ce6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	78db      	ldrb	r3, [r3, #3]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d81f      	bhi.n	8002d32 <USB_ActivateEndpoint+0x72>
 8002cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <USB_ActivateEndpoint+0x38>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d25 	.word	0x08002d25
 8002d00:	08002d3b 	.word	0x08002d3b
 8002d04:	08002d17 	.word	0x08002d17
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002d08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002d0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002d14:	e012      	b.n	8002d3c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002d16:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002d1a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8002d1e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002d22:	e00b      	b.n	8002d3c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002d24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002d28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002d30:	e004      	b.n	8002d3c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8002d38:	e000      	b.n	8002d3c <USB_ActivateEndpoint+0x7c>
      break;
 8002d3a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	441a      	add	r2, r3
 8002d46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	441a      	add	r2, r3
 8002d8a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	7b1b      	ldrb	r3, [r3, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 8178 	bne.w	800309c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8084 	beq.w	8002ebe <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	011a      	lsls	r2, r3, #4
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	88db      	ldrh	r3, [r3, #6]
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	827b      	strh	r3, [r7, #18]
 8002df8:	8a7b      	ldrh	r3, [r7, #18]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01b      	beq.n	8002e3a <USB_ActivateEndpoint+0x17a>
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e18:	823b      	strh	r3, [r7, #16]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	441a      	add	r2, r3
 8002e24:	8a3b      	ldrh	r3, [r7, #16]
 8002e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	78db      	ldrb	r3, [r3, #3]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d020      	beq.n	8002e84 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e58:	81bb      	strh	r3, [r7, #12]
 8002e5a:	89bb      	ldrh	r3, [r7, #12]
 8002e5c:	f083 0320 	eor.w	r3, r3, #32
 8002e60:	81bb      	strh	r3, [r7, #12]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	441a      	add	r2, r3
 8002e6c:	89bb      	ldrh	r3, [r7, #12]
 8002e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	8013      	strh	r3, [r2, #0]
 8002e82:	e2d5      	b.n	8003430 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e9a:	81fb      	strh	r3, [r7, #14]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	89fb      	ldrh	r3, [r7, #14]
 8002ea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002eac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	8013      	strh	r3, [r2, #0]
 8002ebc:	e2b8      	b.n	8003430 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ece:	4413      	add	r3, r2
 8002ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	011a      	lsls	r2, r3, #4
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	88db      	ldrh	r3, [r3, #6]
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f02:	4413      	add	r3, r2
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	011a      	lsls	r2, r3, #4
 8002f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0e:	4413      	add	r3, r2
 8002f10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	801a      	strh	r2, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f2c:	d91d      	bls.n	8002f6a <USB_ActivateEndpoint+0x2aa>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <USB_ActivateEndpoint+0x288>
 8002f42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f44:	3b01      	subs	r3, #1
 8002f46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	029b      	lsls	r3, r3, #10
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4313      	orrs	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	801a      	strh	r2, [r3, #0]
 8002f68:	e026      	b.n	8002fb8 <USB_ActivateEndpoint+0x2f8>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <USB_ActivateEndpoint+0x2c8>
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	801a      	strh	r2, [r3, #0]
 8002f86:	e017      	b.n	8002fb8 <USB_ActivateEndpoint+0x2f8>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <USB_ActivateEndpoint+0x2e2>
 8002f9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	029b      	lsls	r3, r3, #10
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002fc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01b      	beq.n	8003008 <USB_ActivateEndpoint+0x348>
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe6:	843b      	strh	r3, [r7, #32]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	8c3b      	ldrh	r3, [r7, #32]
 8002ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ffc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003004:	b29b      	uxth	r3, r3
 8003006:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d124      	bne.n	800305a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003026:	83bb      	strh	r3, [r7, #28]
 8003028:	8bbb      	ldrh	r3, [r7, #28]
 800302a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800302e:	83bb      	strh	r3, [r7, #28]
 8003030:	8bbb      	ldrh	r3, [r7, #28]
 8003032:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003036:	83bb      	strh	r3, [r7, #28]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	441a      	add	r2, r3
 8003042:	8bbb      	ldrh	r3, [r7, #28]
 8003044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800304c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003054:	b29b      	uxth	r3, r3
 8003056:	8013      	strh	r3, [r2, #0]
 8003058:	e1ea      	b.n	8003430 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800306c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003070:	83fb      	strh	r3, [r7, #30]
 8003072:	8bfb      	ldrh	r3, [r7, #30]
 8003074:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003078:	83fb      	strh	r3, [r7, #30]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	441a      	add	r2, r3
 8003084:	8bfb      	ldrh	r3, [r7, #30]
 8003086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800308a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800308e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003096:	b29b      	uxth	r3, r3
 8003098:	8013      	strh	r3, [r2, #0]
 800309a:	e1c9      	b.n	8003430 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	78db      	ldrb	r3, [r3, #3]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d11e      	bne.n	80030e2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ba:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	441a      	add	r2, r3
 80030c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80030cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030d4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80030d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030dc:	b29b      	uxth	r3, r3
 80030de:	8013      	strh	r3, [r2, #0]
 80030e0:	e01d      	b.n	800311e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80030f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800310a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800310e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800311a:	b29b      	uxth	r3, r3
 800311c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800312e:	4413      	add	r3, r2
 8003130:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	011a      	lsls	r2, r3, #4
 8003138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800313a:	4413      	add	r3, r2
 800313c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003140:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	891b      	ldrh	r3, [r3, #8]
 8003146:	085b      	lsrs	r3, r3, #1
 8003148:	b29b      	uxth	r3, r3
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	657b      	str	r3, [r7, #84]	@ 0x54
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800315c:	b29b      	uxth	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003162:	4413      	add	r3, r2
 8003164:	657b      	str	r3, [r7, #84]	@ 0x54
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	011a      	lsls	r2, r3, #4
 800316c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316e:	4413      	add	r3, r2
 8003170:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003174:	653b      	str	r3, [r7, #80]	@ 0x50
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	895b      	ldrh	r3, [r3, #10]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	b29b      	uxth	r3, r3
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003184:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	785b      	ldrb	r3, [r3, #1]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 8093 	bne.w	80032b6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80031a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01b      	beq.n	80031e4 <USB_ActivateEndpoint+0x524>
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80031d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80031f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <USB_ActivateEndpoint+0x574>
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800320e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003212:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	441a      	add	r2, r3
 800321e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800322c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003230:	b29b      	uxth	r3, r3
 8003232:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800324c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800324e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003252:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003254:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003256:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800325a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	441a      	add	r2, r3
 8003266:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800326c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003278:	b29b      	uxth	r3, r3
 800327a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800328e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003292:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80032a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	8013      	strh	r3, [r2, #0]
 80032b4:	e0bc      	b.n	8003430 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80032c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80032ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01d      	beq.n	800330e <USB_ActivateEndpoint+0x64e>
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	441a      	add	r2, r3
 80032f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80032fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003302:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800330a:	b29b      	uxth	r3, r3
 800330c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800331e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01d      	beq.n	8003366 <USB_ActivateEndpoint+0x6a6>
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800333c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003340:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800335a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800335e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003362:	b29b      	uxth	r3, r3
 8003364:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	78db      	ldrb	r3, [r3, #3]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d024      	beq.n	80033b8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003384:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003388:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800338c:	f083 0320 	eor.w	r3, r3, #32
 8003390:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	441a      	add	r2, r3
 800339e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80033a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	8013      	strh	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	441a      	add	r2, r3
 80033dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80033e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	441a      	add	r2, r3
 8003418:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800341c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800342c:	b29b      	uxth	r3, r3
 800342e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003430:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8003434:	4618      	mov	r0, r3
 8003436:	3774      	adds	r7, #116	@ 0x74
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop

08003440 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003440:	b480      	push	{r7}
 8003442:	b08d      	sub	sp, #52	@ 0x34
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	7b1b      	ldrb	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 808e 	bne.w	8003570 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d044      	beq.n	80034e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	81bb      	strh	r3, [r7, #12]
 800346a:	89bb      	ldrh	r3, [r7, #12]
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <USB_DeactivateEndpoint+0x6c>
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b29b      	uxth	r3, r3
 8003482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348a:	817b      	strh	r3, [r7, #10]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	441a      	add	r2, r3
 8003496:	897b      	ldrh	r3, [r7, #10]
 8003498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800349c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034c2:	813b      	strh	r3, [r7, #8]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	893b      	ldrh	r3, [r7, #8]
 80034d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
 80034e4:	e192      	b.n	800380c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	827b      	strh	r3, [r7, #18]
 80034f4:	8a7b      	ldrh	r3, [r7, #18]
 80034f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01b      	beq.n	8003536 <USB_DeactivateEndpoint+0xf6>
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003514:	823b      	strh	r3, [r7, #16]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	441a      	add	r2, r3
 8003520:	8a3b      	ldrh	r3, [r7, #16]
 8003522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800352a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800352e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003532:	b29b      	uxth	r3, r3
 8003534:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354c:	81fb      	strh	r3, [r7, #14]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	441a      	add	r2, r3
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800355e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800356a:	b29b      	uxth	r3, r3
 800356c:	8013      	strh	r3, [r2, #0]
 800356e:	e14d      	b.n	800380c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	785b      	ldrb	r3, [r3, #1]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f040 80a5 	bne.w	80036c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	843b      	strh	r3, [r7, #32]
 8003588:	8c3b      	ldrh	r3, [r7, #32]
 800358a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01b      	beq.n	80035ca <USB_DeactivateEndpoint+0x18a>
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a8:	83fb      	strh	r3, [r7, #30]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	441a      	add	r2, r3
 80035b4:	8bfb      	ldrh	r3, [r7, #30]
 80035b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	83bb      	strh	r3, [r7, #28]
 80035d8:	8bbb      	ldrh	r3, [r7, #28]
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01b      	beq.n	800361a <USB_DeactivateEndpoint+0x1da>
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f8:	837b      	strh	r3, [r7, #26]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	441a      	add	r2, r3
 8003604:	8b7b      	ldrh	r3, [r7, #26]
 8003606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800360a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800360e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003612:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003616:	b29b      	uxth	r3, r3
 8003618:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800362c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003630:	833b      	strh	r3, [r7, #24]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	441a      	add	r2, r3
 800363c:	8b3b      	ldrh	r3, [r7, #24]
 800363e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800364a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800364e:	b29b      	uxth	r3, r3
 8003650:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	b29b      	uxth	r3, r3
 8003660:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003668:	82fb      	strh	r3, [r7, #22]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	441a      	add	r2, r3
 8003674:	8afb      	ldrh	r3, [r7, #22]
 8003676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800367a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800367e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003686:	b29b      	uxth	r3, r3
 8003688:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800369c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036a0:	82bb      	strh	r3, [r7, #20]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	441a      	add	r2, r3
 80036ac:	8abb      	ldrh	r3, [r7, #20]
 80036ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036be:	b29b      	uxth	r3, r3
 80036c0:	8013      	strh	r3, [r2, #0]
 80036c2:	e0a3      	b.n	800380c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80036d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80036d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01b      	beq.n	8003714 <USB_DeactivateEndpoint+0x2d4>
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	441a      	add	r2, r3
 80036fe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003708:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800370c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003710:	b29b      	uxth	r3, r3
 8003712:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003722:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <USB_DeactivateEndpoint+0x324>
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800373e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003742:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003750:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003754:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003758:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800375c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003760:	b29b      	uxth	r3, r3
 8003762:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	441a      	add	r2, r3
 8003786:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800378c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003790:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003798:	b29b      	uxth	r3, r3
 800379a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	441a      	add	r2, r3
 80037be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ea:	847b      	strh	r3, [r7, #34]	@ 0x22
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	441a      	add	r2, r3
 80037f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80037f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003808:	b29b      	uxth	r3, r3
 800380a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3734      	adds	r7, #52	@ 0x34
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b0c2      	sub	sp, #264	@ 0x108
 800381c:	af00      	add	r7, sp, #0
 800381e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003826:	6018      	str	r0, [r3, #0]
 8003828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800382c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003830:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	785b      	ldrb	r3, [r3, #1]
 800383e:	2b01      	cmp	r3, #1
 8003840:	f040 86b7 	bne.w	80045b2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699a      	ldr	r2, [r3, #24]
 8003850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d908      	bls.n	8003872 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003870:	e007      	b.n	8003882 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	7b1b      	ldrb	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d13a      	bne.n	8003908 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6959      	ldr	r1, [r3, #20]
 800389e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	88da      	ldrh	r2, [r3, #6]
 80038aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80038b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80038b8:	6800      	ldr	r0, [r0, #0]
 80038ba:	f001 fc9c 	bl	80051f6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80038be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038d8:	b29b      	uxth	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	011a      	lsls	r2, r3, #4
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	801a      	strh	r2, [r3, #0]
 8003904:	f000 be1f 	b.w	8004546 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800390c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	78db      	ldrb	r3, [r3, #3]
 8003914:	2b02      	cmp	r3, #2
 8003916:	f040 8462 	bne.w	80041de <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800391a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800391e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6a1a      	ldr	r2, [r3, #32]
 8003926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800392a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	429a      	cmp	r2, r3
 8003934:	f240 83df 	bls.w	80040f6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800393c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800395a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003966:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	441a      	add	r2, r3
 800397c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003988:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800398c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003990:	b29b      	uxth	r3, r3
 8003992:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a1a      	ldr	r2, [r3, #32]
 80039a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a4:	1ad2      	subs	r2, r2, r3
 80039a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 81c7 	beq.w	8003d68 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	785b      	ldrb	r3, [r3, #1]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d177      	bne.n	8003ae6 <USB_EPStartXfer+0x2ce>
 80039f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	4413      	add	r3, r2
 8003a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	011a      	lsls	r2, r3, #4
 8003a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	801a      	strh	r2, [r3, #0]
 8003a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a46:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a48:	d921      	bls.n	8003a8e <USB_EPStartXfer+0x276>
 8003a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <USB_EPStartXfer+0x252>
 8003a60:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003a64:	3b01      	subs	r3, #1
 8003a66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	029b      	lsls	r3, r3, #10
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	e050      	b.n	8003b30 <USB_EPStartXfer+0x318>
 8003a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <USB_EPStartXfer+0x294>
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	801a      	strh	r2, [r3, #0]
 8003aaa:	e041      	b.n	8003b30 <USB_EPStartXfer+0x318>
 8003aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <USB_EPStartXfer+0x2b4>
 8003ac2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	029b      	lsls	r3, r3, #10
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	4313      	orrs	r3, r2
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	801a      	strh	r2, [r3, #0]
 8003ae4:	e024      	b.n	8003b30 <USB_EPStartXfer+0x318>
 8003ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	785b      	ldrb	r3, [r3, #1]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d11c      	bne.n	8003b30 <USB_EPStartXfer+0x318>
 8003af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	4413      	add	r3, r2
 8003b0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	011a      	lsls	r2, r3, #4
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	4413      	add	r3, r2
 8003b20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	895b      	ldrh	r3, [r3, #10]
 8003b3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6959      	ldr	r1, [r3, #20]
 8003b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003b56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003b5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003b5e:	6800      	ldr	r0, [r0, #0]
 8003b60:	f001 fb49 	bl	80051f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8003b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b74:	441a      	add	r2, r3
 8003b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d90f      	bls.n	8003bbe <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6a1a      	ldr	r2, [r3, #32]
 8003baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	621a      	str	r2, [r3, #32]
 8003bbc:	e00e      	b.n	8003bdc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d177      	bne.n	8003cdc <USB_EPStartXfer+0x4c4>
 8003bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
 8003c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	011a      	lsls	r2, r3, #4
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	4413      	add	r3, r2
 8003c22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	801a      	strh	r2, [r3, #0]
 8003c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c3e:	d921      	bls.n	8003c84 <USB_EPStartXfer+0x46c>
 8003c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <USB_EPStartXfer+0x448>
 8003c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	029b      	lsls	r3, r3, #10
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	4313      	orrs	r3, r2
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	801a      	strh	r2, [r3, #0]
 8003c82:	e056      	b.n	8003d32 <USB_EPStartXfer+0x51a>
 8003c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10a      	bne.n	8003ca2 <USB_EPStartXfer+0x48a>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	e047      	b.n	8003d32 <USB_EPStartXfer+0x51a>
 8003ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <USB_EPStartXfer+0x4aa>
 8003cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	029b      	lsls	r3, r3, #10
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	801a      	strh	r2, [r3, #0]
 8003cda:	e02a      	b.n	8003d32 <USB_EPStartXfer+0x51a>
 8003cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	785b      	ldrb	r3, [r3, #1]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d122      	bne.n	8003d32 <USB_EPStartXfer+0x51a>
 8003cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	011a      	lsls	r2, r3, #4
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	4413      	add	r3, r2
 8003d22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	891b      	ldrh	r3, [r3, #8]
 8003d3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6959      	ldr	r1, [r3, #20]
 8003d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003d58:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003d5c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003d60:	6800      	ldr	r0, [r0, #0]
 8003d62:	f001 fa48 	bl	80051f6 <USB_WritePMA>
 8003d66:	e3ee      	b.n	8004546 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	785b      	ldrb	r3, [r3, #1]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d177      	bne.n	8003e68 <USB_EPStartXfer+0x650>
 8003d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d98:	4413      	add	r3, r2
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	011a      	lsls	r2, r3, #4
 8003daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dac:	4413      	add	r3, r2
 8003dae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dca:	d921      	bls.n	8003e10 <USB_EPStartXfer+0x5f8>
 8003dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d104      	bne.n	8003dec <USB_EPStartXfer+0x5d4>
 8003de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003de6:	3b01      	subs	r3, #1
 8003de8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e0c:	801a      	strh	r2, [r3, #0]
 8003e0e:	e056      	b.n	8003ebe <USB_EPStartXfer+0x6a6>
 8003e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <USB_EPStartXfer+0x616>
 8003e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e2a:	801a      	strh	r2, [r3, #0]
 8003e2c:	e047      	b.n	8003ebe <USB_EPStartXfer+0x6a6>
 8003e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <USB_EPStartXfer+0x636>
 8003e44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	029b      	lsls	r3, r3, #10
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	e02a      	b.n	8003ebe <USB_EPStartXfer+0x6a6>
 8003e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	785b      	ldrb	r3, [r3, #1]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d122      	bne.n	8003ebe <USB_EPStartXfer+0x6a6>
 8003e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e98:	4413      	add	r3, r2
 8003e9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	011a      	lsls	r2, r3, #4
 8003eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eac:	4413      	add	r3, r2
 8003eae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ebc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	891b      	ldrh	r3, [r3, #8]
 8003eca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6959      	ldr	r1, [r3, #20]
 8003eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003ee4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003ee8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003eec:	6800      	ldr	r0, [r0, #0]
 8003eee:	f001 f982 	bl	80051f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8003ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f02:	441a      	add	r2, r3
 8003f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d90f      	bls.n	8003f4c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a1a      	ldr	r2, [r3, #32]
 8003f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3c:	1ad2      	subs	r2, r2, r3
 8003f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	621a      	str	r2, [r3, #32]
 8003f4a:	e00e      	b.n	8003f6a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2200      	movs	r2, #0
 8003f68:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	785b      	ldrb	r3, [r3, #1]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d177      	bne.n	8004076 <USB_EPStartXfer+0x85e>
 8003f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa6:	4413      	add	r3, r2
 8003fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	011a      	lsls	r2, r3, #4
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	4413      	add	r3, r2
 8003fbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fd8:	d921      	bls.n	800401e <USB_EPStartXfer+0x806>
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <USB_EPStartXfer+0x7e2>
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004004:	b29b      	uxth	r3, r3
 8004006:	029b      	lsls	r3, r3, #10
 8004008:	b29b      	uxth	r3, r3
 800400a:	4313      	orrs	r3, r2
 800400c:	b29b      	uxth	r3, r3
 800400e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004016:	b29a      	uxth	r2, r3
 8004018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	e050      	b.n	80040c0 <USB_EPStartXfer+0x8a8>
 800401e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <USB_EPStartXfer+0x824>
 8004026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004034:	b29a      	uxth	r2, r3
 8004036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004038:	801a      	strh	r2, [r3, #0]
 800403a:	e041      	b.n	80040c0 <USB_EPStartXfer+0x8a8>
 800403c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <USB_EPStartXfer+0x844>
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004056:	3301      	adds	r3, #1
 8004058:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29a      	uxth	r2, r3
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	b29b      	uxth	r3, r3
 8004068:	029b      	lsls	r3, r3, #10
 800406a:	b29b      	uxth	r3, r3
 800406c:	4313      	orrs	r3, r2
 800406e:	b29a      	uxth	r2, r3
 8004070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004072:	801a      	strh	r2, [r3, #0]
 8004074:	e024      	b.n	80040c0 <USB_EPStartXfer+0x8a8>
 8004076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800407a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	785b      	ldrb	r3, [r3, #1]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d11c      	bne.n	80040c0 <USB_EPStartXfer+0x8a8>
 8004086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800408a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004094:	b29b      	uxth	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800409a:	4413      	add	r3, r2
 800409c:	643b      	str	r3, [r7, #64]	@ 0x40
 800409e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	011a      	lsls	r2, r3, #4
 80040ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ae:	4413      	add	r3, r2
 80040b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80040c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	895b      	ldrh	r3, [r3, #10]
 80040cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6959      	ldr	r1, [r3, #20]
 80040dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80040e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80040ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80040ee:	6800      	ldr	r0, [r0, #0]
 80040f0:	f001 f881 	bl	80051f6 <USB_WritePMA>
 80040f4:	e227      	b.n	8004546 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80040f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800410a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800413e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800414e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800415a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800415e:	b29b      	uxth	r3, r3
 8004160:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800416e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004172:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800417c:	b29b      	uxth	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004182:	4413      	add	r3, r2
 8004184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800418a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	011a      	lsls	r2, r3, #4
 8004194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004196:	4413      	add	r3, r2
 8004198:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800419c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800419e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80041a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	891b      	ldrh	r3, [r3, #8]
 80041b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6959      	ldr	r1, [r3, #20]
 80041c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80041ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80041d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80041d6:	6800      	ldr	r0, [r0, #0]
 80041d8:	f001 f80d 	bl	80051f6 <USB_WritePMA>
 80041dc:	e1b3      	b.n	8004546 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80041de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ee:	1ad2      	subs	r2, r2, r3
 80041f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80041fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800420a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80c6 	beq.w	80043b0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	785b      	ldrb	r3, [r3, #1]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d177      	bne.n	8004330 <USB_EPStartXfer+0xb18>
 8004240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004244:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800424c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800425a:	b29b      	uxth	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004260:	4413      	add	r3, r2
 8004262:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	011a      	lsls	r2, r3, #4
 8004272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004274:	4413      	add	r3, r2
 8004276:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800427a:	667b      	str	r3, [r7, #100]	@ 0x64
 800427c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004286:	b29a      	uxth	r2, r3
 8004288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004290:	2b3e      	cmp	r3, #62	@ 0x3e
 8004292:	d921      	bls.n	80042d8 <USB_EPStartXfer+0xac0>
 8004294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800429e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <USB_EPStartXfer+0xa9c>
 80042aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80042ae:	3b01      	subs	r3, #1
 80042b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80042b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80042be:	b29b      	uxth	r3, r3
 80042c0:	029b      	lsls	r3, r3, #10
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	e050      	b.n	800437a <USB_EPStartXfer+0xb62>
 80042d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <USB_EPStartXfer+0xade>
 80042e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042f2:	801a      	strh	r2, [r3, #0]
 80042f4:	e041      	b.n	800437a <USB_EPStartXfer+0xb62>
 80042f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <USB_EPStartXfer+0xafe>
 800430c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004310:	3301      	adds	r3, #1
 8004312:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004316:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	b29a      	uxth	r2, r3
 800431c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004320:	b29b      	uxth	r3, r3
 8004322:	029b      	lsls	r3, r3, #10
 8004324:	b29b      	uxth	r3, r3
 8004326:	4313      	orrs	r3, r2
 8004328:	b29a      	uxth	r2, r3
 800432a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800432c:	801a      	strh	r2, [r3, #0]
 800432e:	e024      	b.n	800437a <USB_EPStartXfer+0xb62>
 8004330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d11c      	bne.n	800437a <USB_EPStartXfer+0xb62>
 8004340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004344:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004354:	4413      	add	r3, r2
 8004356:	673b      	str	r3, [r7, #112]	@ 0x70
 8004358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800435c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	011a      	lsls	r2, r3, #4
 8004366:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004368:	4413      	add	r3, r2
 800436a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800436e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004374:	b29a      	uxth	r2, r3
 8004376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004378:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800437a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800437e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	895b      	ldrh	r3, [r3, #10]
 8004386:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800438a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800438e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6959      	ldr	r1, [r3, #20]
 8004396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800439a:	b29b      	uxth	r3, r3
 800439c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80043a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80043a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80043a8:	6800      	ldr	r0, [r0, #0]
 80043aa:	f000 ff24 	bl	80051f6 <USB_WritePMA>
 80043ae:	e0ca      	b.n	8004546 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d177      	bne.n	80044b0 <USB_EPStartXfer+0xc98>
 80043c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043da:	b29b      	uxth	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043e0:	4413      	add	r3, r2
 80043e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	011a      	lsls	r2, r3, #4
 80043f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043f4:	4413      	add	r3, r2
 80043f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004406:	b29a      	uxth	r2, r3
 8004408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004410:	2b3e      	cmp	r3, #62	@ 0x3e
 8004412:	d921      	bls.n	8004458 <USB_EPStartXfer+0xc40>
 8004414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800441e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	2b00      	cmp	r3, #0
 8004428:	d104      	bne.n	8004434 <USB_EPStartXfer+0xc1c>
 800442a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800442e:	3b01      	subs	r3, #1
 8004430:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29a      	uxth	r2, r3
 800443a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800443e:	b29b      	uxth	r3, r3
 8004440:	029b      	lsls	r3, r3, #10
 8004442:	b29b      	uxth	r3, r3
 8004444:	4313      	orrs	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800444c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004450:	b29a      	uxth	r2, r3
 8004452:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	e05c      	b.n	8004512 <USB_EPStartXfer+0xcfa>
 8004458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <USB_EPStartXfer+0xc5e>
 8004460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800446e:	b29a      	uxth	r2, r3
 8004470:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	e04d      	b.n	8004512 <USB_EPStartXfer+0xcfa>
 8004476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <USB_EPStartXfer+0xc7e>
 800448c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004490:	3301      	adds	r3, #1
 8004492:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004496:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b29a      	uxth	r2, r3
 800449c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	029b      	lsls	r3, r3, #10
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	4313      	orrs	r3, r2
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044ac:	801a      	strh	r2, [r3, #0]
 80044ae:	e030      	b.n	8004512 <USB_EPStartXfer+0xcfa>
 80044b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d128      	bne.n	8004512 <USB_EPStartXfer+0xcfa>
 80044c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044dc:	b29b      	uxth	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044e4:	4413      	add	r3, r2
 80044e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	011a      	lsls	r2, r3, #4
 80044f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044fc:	4413      	add	r3, r2
 80044fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004502:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450a:	b29a      	uxth	r2, r3
 800450c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004510:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	891b      	ldrh	r3, [r3, #8]
 800451e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6959      	ldr	r1, [r3, #20]
 800452e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004532:	b29b      	uxth	r3, r3
 8004534:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004538:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800453c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004540:	6800      	ldr	r0, [r0, #0]
 8004542:	f000 fe58 	bl	80051f6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800454a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800456c:	817b      	strh	r3, [r7, #10]
 800456e:	897b      	ldrh	r3, [r7, #10]
 8004570:	f083 0310 	eor.w	r3, r3, #16
 8004574:	817b      	strh	r3, [r7, #10]
 8004576:	897b      	ldrh	r3, [r7, #10]
 8004578:	f083 0320 	eor.w	r3, r3, #32
 800457c:	817b      	strh	r3, [r7, #10]
 800457e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800458c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	441a      	add	r2, r3
 8004598:	897b      	ldrh	r3, [r7, #10]
 800459a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800459e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	8013      	strh	r3, [r2, #0]
 80045ae:	f000 bcde 	b.w	8004f6e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80045b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	7b1b      	ldrb	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f040 80bb 	bne.w	800473a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80045c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d917      	bls.n	8004610 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80045e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80045f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004600:	1ad2      	subs	r2, r2, r3
 8004602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	619a      	str	r2, [r3, #24]
 800460e:	e00e      	b.n	800462e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8004620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800462e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800463c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004640:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800464a:	b29b      	uxth	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004652:	4413      	add	r3, r2
 8004654:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800465c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	011a      	lsls	r2, r3, #4
 8004666:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800466a:	4413      	add	r3, r2
 800466c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004670:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004680:	b29a      	uxth	r2, r3
 8004682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468c:	2b3e      	cmp	r3, #62	@ 0x3e
 800468e:	d924      	bls.n	80046da <USB_EPStartXfer+0xec2>
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800469a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <USB_EPStartXfer+0xe98>
 80046a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80046aa:	3b01      	subs	r3, #1
 80046ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80046bc:	b29b      	uxth	r3, r3
 80046be:	029b      	lsls	r3, r3, #10
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	4313      	orrs	r3, r2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	f000 bc10 	b.w	8004efa <USB_EPStartXfer+0x16e2>
 80046da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10c      	bne.n	80046fc <USB_EPStartXfer+0xee4>
 80046e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	e3fe      	b.n	8004efa <USB_EPStartXfer+0x16e2>
 80046fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <USB_EPStartXfer+0xf04>
 8004712:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004716:	3301      	adds	r3, #1
 8004718:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800471c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29a      	uxth	r2, r3
 8004724:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004728:	b29b      	uxth	r3, r3
 800472a:	029b      	lsls	r3, r3, #10
 800472c:	b29b      	uxth	r3, r3
 800472e:	4313      	orrs	r3, r2
 8004730:	b29a      	uxth	r2, r3
 8004732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	e3df      	b.n	8004efa <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800473a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800473e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	78db      	ldrb	r3, [r3, #3]
 8004746:	2b02      	cmp	r3, #2
 8004748:	f040 8218 	bne.w	8004b7c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800474c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 809d 	bne.w	8004898 <USB_EPStartXfer+0x1080>
 800475e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004762:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800476c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004782:	4413      	add	r3, r2
 8004784:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800478c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800479a:	4413      	add	r3, r2
 800479c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80047c6:	d92b      	bls.n	8004820 <USB_EPStartXfer+0x1008>
 80047c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <USB_EPStartXfer+0xfe0>
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f2:	3b01      	subs	r3, #1
 80047f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29a      	uxth	r2, r3
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004804:	b29b      	uxth	r3, r3
 8004806:	029b      	lsls	r3, r3, #10
 8004808:	b29b      	uxth	r3, r3
 800480a:	4313      	orrs	r3, r2
 800480c:	b29b      	uxth	r3, r3
 800480e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004816:	b29a      	uxth	r2, r3
 8004818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	e070      	b.n	8004902 <USB_EPStartXfer+0x10ea>
 8004820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10c      	bne.n	800484a <USB_EPStartXfer+0x1032>
 8004830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004840:	b29a      	uxth	r2, r3
 8004842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004846:	801a      	strh	r2, [r3, #0]
 8004848:	e05b      	b.n	8004902 <USB_EPStartXfer+0x10ea>
 800484a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800484e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800485c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <USB_EPStartXfer+0x1062>
 8004870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004874:	3301      	adds	r3, #1
 8004876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800487a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29a      	uxth	r2, r3
 8004882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004886:	b29b      	uxth	r3, r3
 8004888:	029b      	lsls	r3, r3, #10
 800488a:	b29b      	uxth	r3, r3
 800488c:	4313      	orrs	r3, r2
 800488e:	b29a      	uxth	r2, r3
 8004890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	e034      	b.n	8004902 <USB_EPStartXfer+0x10ea>
 8004898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800489c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	785b      	ldrb	r3, [r3, #1]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d12c      	bne.n	8004902 <USB_EPStartXfer+0x10ea>
 80048a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048cc:	4413      	add	r3, r2
 80048ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	011a      	lsls	r2, r3, #4
 80048e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048e4:	4413      	add	r3, r2
 80048e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004900:	801a      	strh	r2, [r3, #0]
 8004902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f040 809d 	bne.w	8004a5c <USB_EPStartXfer+0x1244>
 8004922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004926:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004946:	4413      	add	r3, r2
 8004948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800494c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	011a      	lsls	r2, r3, #4
 800495a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800495e:	4413      	add	r3, r2
 8004960:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004968:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004974:	b29a      	uxth	r2, r3
 8004976:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800497a:	801a      	strh	r2, [r3, #0]
 800497c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b3e      	cmp	r3, #62	@ 0x3e
 800498a:	d92b      	bls.n	80049e4 <USB_EPStartXfer+0x11cc>
 800498c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800499e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <USB_EPStartXfer+0x11a4>
 80049b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b6:	3b01      	subs	r3, #1
 80049b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	029b      	lsls	r3, r3, #10
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	4313      	orrs	r3, r2
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049da:	b29a      	uxth	r2, r3
 80049dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	e069      	b.n	8004ab8 <USB_EPStartXfer+0x12a0>
 80049e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10c      	bne.n	8004a0e <USB_EPStartXfer+0x11f6>
 80049f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a0a:	801a      	strh	r2, [r3, #0]
 8004a0c:	e054      	b.n	8004ab8 <USB_EPStartXfer+0x12a0>
 8004a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d004      	beq.n	8004a3e <USB_EPStartXfer+0x1226>
 8004a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	029b      	lsls	r3, r3, #10
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4313      	orrs	r3, r2
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a58:	801a      	strh	r2, [r3, #0]
 8004a5a:	e02d      	b.n	8004ab8 <USB_EPStartXfer+0x12a0>
 8004a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d125      	bne.n	8004ab8 <USB_EPStartXfer+0x12a0>
 8004a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a82:	4413      	add	r3, r2
 8004a84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	011a      	lsls	r2, r3, #4
 8004a96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ab6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8218 	beq.w	8004efa <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004aea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <USB_EPStartXfer+0x12ea>
 8004af6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10d      	bne.n	8004b1e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004b02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f040 81f5 	bne.w	8004efa <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004b10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f040 81ee 	bne.w	8004efa <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b44:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	441a      	add	r2, r3
 8004b62:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8013      	strh	r3, [r2, #0]
 8004b7a:	e1be      	b.n	8004efa <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	78db      	ldrb	r3, [r3, #3]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	f040 81b4 	bne.w	8004ef6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d917      	bls.n	8004bda <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8004bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bca:	1ad2      	subs	r2, r2, r3
 8004bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	619a      	str	r2, [r3, #24]
 8004bd8:	e00e      	b.n	8004bf8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8004bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 8085 	bne.w	8004d14 <USB_EPStartXfer+0x14fc>
 8004c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c2e:	4413      	add	r3, r2
 8004c30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	011a      	lsls	r2, r3, #4
 8004c42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c46:	4413      	add	r3, r2
 8004c48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c62:	801a      	strh	r2, [r3, #0]
 8004c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c68:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c6a:	d923      	bls.n	8004cb4 <USB_EPStartXfer+0x149c>
 8004c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <USB_EPStartXfer+0x1474>
 8004c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c86:	3b01      	subs	r3, #1
 8004c88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	029b      	lsls	r3, r3, #10
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cb0:	801a      	strh	r2, [r3, #0]
 8004cb2:	e060      	b.n	8004d76 <USB_EPStartXfer+0x155e>
 8004cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10c      	bne.n	8004cd6 <USB_EPStartXfer+0x14be>
 8004cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	e04f      	b.n	8004d76 <USB_EPStartXfer+0x155e>
 8004cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <USB_EPStartXfer+0x14de>
 8004cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	029b      	lsls	r3, r3, #10
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d10:	801a      	strh	r2, [r3, #0]
 8004d12:	e030      	b.n	8004d76 <USB_EPStartXfer+0x155e>
 8004d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d128      	bne.n	8004d76 <USB_EPStartXfer+0x155e>
 8004d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d48:	4413      	add	r3, r2
 8004d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	011a      	lsls	r2, r3, #4
 8004d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 8085 	bne.w	8004ea0 <USB_EPStartXfer+0x1688>
 8004d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004dba:	4413      	add	r3, r2
 8004dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	011a      	lsls	r2, r3, #4
 8004dce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ddc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004df6:	d923      	bls.n	8004e40 <USB_EPStartXfer+0x1628>
 8004df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <USB_EPStartXfer+0x1600>
 8004e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e12:	3b01      	subs	r3, #1
 8004e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	029b      	lsls	r3, r3, #10
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	e05c      	b.n	8004efa <USB_EPStartXfer+0x16e2>
 8004e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10c      	bne.n	8004e62 <USB_EPStartXfer+0x164a>
 8004e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	e04b      	b.n	8004efa <USB_EPStartXfer+0x16e2>
 8004e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <USB_EPStartXfer+0x166a>
 8004e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	029b      	lsls	r3, r3, #10
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	4313      	orrs	r3, r2
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e02c      	b.n	8004efa <USB_EPStartXfer+0x16e2>
 8004ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d124      	bne.n	8004efa <USB_EPStartXfer+0x16e2>
 8004eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	011a      	lsls	r2, r3, #4
 8004eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ede:	4413      	add	r3, r2
 8004ee0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	e001      	b.n	8004efa <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e03a      	b.n	8004f70 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004f24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004f28:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004f2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004f30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004f34:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f38:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004f5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d020      	beq.n	8004fce <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fa2:	81bb      	strh	r3, [r7, #12]
 8004fa4:	89bb      	ldrh	r3, [r7, #12]
 8004fa6:	f083 0310 	eor.w	r3, r3, #16
 8004faa:	81bb      	strh	r3, [r7, #12]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	89bb      	ldrh	r3, [r7, #12]
 8004fb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]
 8004fcc:	e01f      	b.n	800500e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe4:	81fb      	strh	r3, [r7, #14]
 8004fe6:	89fb      	ldrh	r3, [r7, #14]
 8004fe8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004fec:	81fb      	strh	r3, [r7, #14]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	441a      	add	r2, r3
 8004ff8:	89fb      	ldrh	r3, [r7, #14]
 8004ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500a:	b29b      	uxth	r3, r3
 800500c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800501a:	b480      	push	{r7}
 800501c:	b087      	sub	sp, #28
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	7b1b      	ldrb	r3, [r3, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 809d 	bne.w	8005168 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d04c      	beq.n	80050d0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	823b      	strh	r3, [r7, #16]
 8005044:	8a3b      	ldrh	r3, [r7, #16]
 8005046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d01b      	beq.n	8005086 <USB_EPClearStall+0x6c>
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005064:	81fb      	strh	r3, [r7, #14]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	441a      	add	r2, r3
 8005070:	89fb      	ldrh	r3, [r7, #14]
 8005072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800507a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800507e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005082:	b29b      	uxth	r3, r3
 8005084:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	78db      	ldrb	r3, [r3, #3]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d06c      	beq.n	8005168 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29b      	uxth	r3, r3
 800509c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050a4:	81bb      	strh	r3, [r7, #12]
 80050a6:	89bb      	ldrh	r3, [r7, #12]
 80050a8:	f083 0320 	eor.w	r3, r3, #32
 80050ac:	81bb      	strh	r3, [r7, #12]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	441a      	add	r2, r3
 80050b8:	89bb      	ldrh	r3, [r7, #12]
 80050ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	8013      	strh	r3, [r2, #0]
 80050ce:	e04b      	b.n	8005168 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	82fb      	strh	r3, [r7, #22]
 80050de:	8afb      	ldrh	r3, [r7, #22]
 80050e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01b      	beq.n	8005120 <USB_EPClearStall+0x106>
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050fe:	82bb      	strh	r3, [r7, #20]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	441a      	add	r2, r3
 800510a:	8abb      	ldrh	r3, [r7, #20]
 800510c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005114:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800511c:	b29b      	uxth	r3, r3
 800511e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	827b      	strh	r3, [r7, #18]
 8005138:	8a7b      	ldrh	r3, [r7, #18]
 800513a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800513e:	827b      	strh	r3, [r7, #18]
 8005140:	8a7b      	ldrh	r3, [r7, #18]
 8005142:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005146:	827b      	strh	r3, [r7, #18]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	8a7b      	ldrh	r3, [r7, #18]
 8005154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800515c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005164:	b29b      	uxth	r3, r3
 8005166:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d103      	bne.n	800518e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2280      	movs	r2, #128	@ 0x80
 800518a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80051d4:	68fb      	ldr	r3, [r7, #12]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b08b      	sub	sp, #44	@ 0x2c
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	4611      	mov	r1, r2
 8005202:	461a      	mov	r2, r3
 8005204:	460b      	mov	r3, r1
 8005206:	80fb      	strh	r3, [r7, #6]
 8005208:	4613      	mov	r3, r2
 800520a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800520c:	88bb      	ldrh	r3, [r7, #4]
 800520e:	3301      	adds	r3, #1
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	005a      	lsls	r2, r3, #1
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005228:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
 800522e:	e01e      	b.n	800526e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	3301      	adds	r3, #1
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	b21a      	sxth	r2, r3
 8005240:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005244:	4313      	orrs	r3, r2
 8005246:	b21b      	sxth	r3, r3
 8005248:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	8a7a      	ldrh	r2, [r7, #18]
 800524e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	3302      	adds	r3, #2
 8005254:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	3302      	adds	r3, #2
 800525a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	3301      	adds	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	3301      	adds	r3, #1
 8005266:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	3b01      	subs	r3, #1
 800526c:	627b      	str	r3, [r7, #36]	@ 0x24
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1dd      	bne.n	8005230 <USB_WritePMA+0x3a>
  }
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	372c      	adds	r7, #44	@ 0x2c
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005280:	b480      	push	{r7}
 8005282:	b08b      	sub	sp, #44	@ 0x2c
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4611      	mov	r1, r2
 800528c:	461a      	mov	r2, r3
 800528e:	460b      	mov	r3, r1
 8005290:	80fb      	strh	r3, [r7, #6]
 8005292:	4613      	mov	r3, r2
 8005294:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005296:	88bb      	ldrh	r3, [r7, #4]
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	b29b      	uxth	r3, r3
 800529c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	005a      	lsls	r2, r3, #1
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052b2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052b8:	e01b      	b.n	80052f2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	3302      	adds	r3, #2
 80052c6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	3301      	adds	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	3301      	adds	r3, #1
 80052e4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	3302      	adds	r3, #2
 80052ea:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	3b01      	subs	r3, #1
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e0      	bne.n	80052ba <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80052f8:	88bb      	ldrh	r3, [r7, #4]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	701a      	strb	r2, [r3, #0]
  }
}
 8005314:	bf00      	nop
 8005316:	372c      	adds	r7, #44	@ 0x2c
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr

0800531e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7c1b      	ldrb	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d115      	bne.n	8005362 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005336:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800533a:	2202      	movs	r2, #2
 800533c:	2181      	movs	r1, #129	@ 0x81
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 fe87 	bl	8007052 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800534a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800534e:	2202      	movs	r2, #2
 8005350:	2101      	movs	r1, #1
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f001 fe7d 	bl	8007052 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8005360:	e012      	b.n	8005388 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005362:	2340      	movs	r3, #64	@ 0x40
 8005364:	2202      	movs	r2, #2
 8005366:	2181      	movs	r1, #129	@ 0x81
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 fe72 	bl	8007052 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005374:	2340      	movs	r3, #64	@ 0x40
 8005376:	2202      	movs	r2, #2
 8005378:	2101      	movs	r1, #1
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 fe69 	bl	8007052 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005388:	2308      	movs	r3, #8
 800538a:	2203      	movs	r2, #3
 800538c:	2182      	movs	r1, #130	@ 0x82
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f001 fe5f 	bl	8007052 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800539a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800539e:	f001 ff7f 	bl	80072a0 <USBD_static_malloc>
 80053a2:	4602      	mov	r2, r0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d102      	bne.n	80053ba <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
 80053b8:	e026      	b.n	8005408 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053c0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7c1b      	ldrb	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053ee:	2101      	movs	r1, #1
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 ff1e 	bl	8007232 <USBD_LL_PrepareReceive>
 80053f6:	e007      	b.n	8005408 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053fe:	2340      	movs	r3, #64	@ 0x40
 8005400:	2101      	movs	r1, #1
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 ff15 	bl	8007232 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005408:	7bfb      	ldrb	r3, [r7, #15]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	460b      	mov	r3, r1
 800541c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005422:	2181      	movs	r1, #129	@ 0x81
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f001 fe3a 	bl	800709e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005430:	2101      	movs	r1, #1
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 fe33 	bl	800709e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005440:	2182      	movs	r1, #130	@ 0x82
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f001 fe2b 	bl	800709e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00e      	beq.n	8005476 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005468:	4618      	mov	r0, r3
 800546a:	f001 ff25 	bl	80072b8 <USBD_static_free>
    pdev->pClassData = NULL;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005490:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d039      	beq.n	800551e <USBD_CDC_Setup+0x9e>
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d17f      	bne.n	80055ae <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	88db      	ldrh	r3, [r3, #6]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d029      	beq.n	800550a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	b25b      	sxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	da11      	bge.n	80054e4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80054cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	88d2      	ldrh	r2, [r2, #6]
 80054d2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054d4:	6939      	ldr	r1, [r7, #16]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	88db      	ldrh	r3, [r3, #6]
 80054da:	461a      	mov	r2, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 fa05 	bl	80068ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80054e2:	e06b      	b.n	80055bc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	785a      	ldrb	r2, [r3, #1]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	88db      	ldrh	r3, [r3, #6]
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054fa:	6939      	ldr	r1, [r7, #16]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	88db      	ldrh	r3, [r3, #6]
 8005500:	461a      	mov	r2, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f001 fa20 	bl	8006948 <USBD_CtlPrepareRx>
      break;
 8005508:	e058      	b.n	80055bc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	7850      	ldrb	r0, [r2, #1]
 8005516:	2200      	movs	r2, #0
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	4798      	blx	r3
      break;
 800551c:	e04e      	b.n	80055bc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	2b0b      	cmp	r3, #11
 8005524:	d02e      	beq.n	8005584 <USBD_CDC_Setup+0x104>
 8005526:	2b0b      	cmp	r3, #11
 8005528:	dc38      	bgt.n	800559c <USBD_CDC_Setup+0x11c>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <USBD_CDC_Setup+0xb4>
 800552e:	2b0a      	cmp	r3, #10
 8005530:	d014      	beq.n	800555c <USBD_CDC_Setup+0xdc>
 8005532:	e033      	b.n	800559c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800553a:	2b03      	cmp	r3, #3
 800553c:	d107      	bne.n	800554e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800553e:	f107 030c 	add.w	r3, r7, #12
 8005542:	2202      	movs	r2, #2
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 f9d0 	bl	80068ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800554c:	e02e      	b.n	80055ac <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f001 f961 	bl	8006818 <USBD_CtlError>
            ret = USBD_FAIL;
 8005556:	2302      	movs	r3, #2
 8005558:	75fb      	strb	r3, [r7, #23]
          break;
 800555a:	e027      	b.n	80055ac <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005562:	2b03      	cmp	r3, #3
 8005564:	d107      	bne.n	8005576 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005566:	f107 030f 	add.w	r3, r7, #15
 800556a:	2201      	movs	r2, #1
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f001 f9bc 	bl	80068ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005574:	e01a      	b.n	80055ac <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f001 f94d 	bl	8006818 <USBD_CtlError>
            ret = USBD_FAIL;
 800557e:	2302      	movs	r3, #2
 8005580:	75fb      	strb	r3, [r7, #23]
          break;
 8005582:	e013      	b.n	80055ac <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800558a:	2b03      	cmp	r3, #3
 800558c:	d00d      	beq.n	80055aa <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 f941 	bl	8006818 <USBD_CtlError>
            ret = USBD_FAIL;
 8005596:	2302      	movs	r3, #2
 8005598:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800559a:	e006      	b.n	80055aa <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 f93a 	bl	8006818 <USBD_CtlError>
          ret = USBD_FAIL;
 80055a4:	2302      	movs	r3, #2
 80055a6:	75fb      	strb	r3, [r7, #23]
          break;
 80055a8:	e000      	b.n	80055ac <USBD_CDC_Setup+0x12c>
          break;
 80055aa:	bf00      	nop
      }
      break;
 80055ac:	e006      	b.n	80055bc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 f931 	bl	8006818 <USBD_CtlError>
      ret = USBD_FAIL;
 80055b6:	2302      	movs	r3, #2
 80055b8:	75fb      	strb	r3, [r7, #23]
      break;
 80055ba:	bf00      	nop
  }

  return ret;
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	460b      	mov	r3, r1
 80055d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055d8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80055e0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d03a      	beq.n	8005662 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	331c      	adds	r3, #28
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d029      	beq.n	8005656 <USBD_CDC_DataIn+0x90>
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	331c      	adds	r3, #28
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	78f9      	ldrb	r1, [r7, #3]
 8005616:	68b8      	ldr	r0, [r7, #8]
 8005618:	460b      	mov	r3, r1
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4403      	add	r3, r0
 8005622:	3320      	adds	r3, #32
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	fbb2 f1f3 	udiv	r1, r2, r3
 800562a:	fb01 f303 	mul.w	r3, r1, r3
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d110      	bne.n	8005656 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	331c      	adds	r3, #28
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005648:	78f9      	ldrb	r1, [r7, #3]
 800564a:	2300      	movs	r3, #0
 800564c:	2200      	movs	r2, #0
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 fdcc 	bl	80071ec <USBD_LL_Transmit>
 8005654:	e003      	b.n	800565e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	e000      	b.n	8005664 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005662:	2302      	movs	r3, #2
  }
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800567e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 fdf7 	bl	8007278 <USBD_LL_GetRxDataSize>
 800568a:	4602      	mov	r2, r0
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00d      	beq.n	80056b8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80056b0:	4611      	mov	r1, r2
 80056b2:	4798      	blx	r3

    return USBD_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e000      	b.n	80056ba <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80056b8:	2302      	movs	r3, #2
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056d0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d014      	beq.n	8005706 <USBD_CDC_EP0_RxReady+0x44>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80056e2:	2bff      	cmp	r3, #255	@ 0xff
 80056e4:	d00f      	beq.n	8005706 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80056f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80056fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	22ff      	movs	r2, #255	@ 0xff
 8005702:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2243      	movs	r2, #67	@ 0x43
 800571c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800571e:	4b03      	ldr	r3, [pc, #12]	@ (800572c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000094 	.word	0x20000094

08005730 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2243      	movs	r2, #67	@ 0x43
 800573c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800573e:	4b03      	ldr	r3, [pc, #12]	@ (800574c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000050 	.word	0x20000050

08005750 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2243      	movs	r2, #67	@ 0x43
 800575c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800575e:	4b03      	ldr	r3, [pc, #12]	@ (800576c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	200000d8 	.word	0x200000d8

08005770 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	220a      	movs	r2, #10
 800577c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800577e:	4b03      	ldr	r3, [pc, #12]	@ (800578c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	2000000c 	.word	0x2000000c

08005790 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800579a:	2302      	movs	r3, #2
 800579c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80057da:	88fa      	ldrh	r2, [r7, #6]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr

080057ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005822:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d01c      	beq.n	8005868 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005834:	2b00      	cmp	r3, #0
 8005836:	d115      	bne.n	8005864 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005856:	b29b      	uxth	r3, r3
 8005858:	2181      	movs	r1, #129	@ 0x81
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fcc6 	bl	80071ec <USBD_LL_Transmit>

      return USBD_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e002      	b.n	800586a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005868:	2302      	movs	r3, #2
  }
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005880:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d017      	beq.n	80058bc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	7c1b      	ldrb	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800589a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800589e:	2101      	movs	r1, #1
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 fcc6 	bl	8007232 <USBD_LL_PrepareReceive>
 80058a6:	e007      	b.n	80058b8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80058ae:	2340      	movs	r3, #64	@ 0x40
 80058b0:	2101      	movs	r1, #1
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 fcbd 	bl	8007232 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e000      	b.n	80058be <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80058bc:	2302      	movs	r3, #2
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80058da:	2302      	movs	r3, #2
 80058dc:	e01a      	b.n	8005914 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	79fa      	ldrb	r2, [r7, #7]
 800590a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f001 fb2b 	bl	8006f68 <USBD_LL_Init>

  return USBD_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d006      	beq.n	800593e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	73fb      	strb	r3, [r7, #15]
 800593c:	e001      	b.n	8005942 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800593e:	2302      	movs	r3, #2
 8005940:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005942:	7bfb      	ldrb	r3, [r7, #15]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f001 fb60 	bl	800701c <USBD_LL_Start>

  return USBD_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr

0800597a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005986:	2302      	movs	r3, #2
 8005988:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00c      	beq.n	80059ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	4611      	mov	r1, r2
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	78fa      	ldrb	r2, [r7, #3]
 80059ce:	4611      	mov	r1, r2
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	4798      	blx	r3

  return USBD_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fed8 	bl	80067a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a04:	461a      	mov	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d016      	beq.n	8005a48 <USBD_LL_SetupStage+0x6a>
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d81c      	bhi.n	8005a58 <USBD_LL_SetupStage+0x7a>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <USBD_LL_SetupStage+0x4a>
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d008      	beq.n	8005a38 <USBD_LL_SetupStage+0x5a>
 8005a26:	e017      	b.n	8005a58 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f9cb 	bl	8005dcc <USBD_StdDevReq>
      break;
 8005a36:	e01a      	b.n	8005a6e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fa2d 	bl	8005ea0 <USBD_StdItfReq>
      break;
 8005a46:	e012      	b.n	8005a6e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa6d 	bl	8005f30 <USBD_StdEPReq>
      break;
 8005a56:	e00a      	b.n	8005a6e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005a5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 fb38 	bl	80070dc <USBD_LL_StallEP>
      break;
 8005a6c:	bf00      	nop
  }

  return USBD_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	460b      	mov	r3, r1
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a86:	7afb      	ldrb	r3, [r7, #11]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d14b      	bne.n	8005b24 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005a92:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d134      	bne.n	8005b08 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d919      	bls.n	8005ade <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d203      	bcs.n	8005acc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	e002      	b.n	8005ad2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 ff54 	bl	8006984 <USBD_CtlContinueRx>
 8005adc:	e038      	b.n	8005b50 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d105      	bne.n	8005b00 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 ff51 	bl	80069a8 <USBD_CtlSendStatus>
 8005b06:	e023      	b.n	8005b50 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b0e:	2b05      	cmp	r3, #5
 8005b10:	d11e      	bne.n	8005b50 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f001 fadd 	bl	80070dc <USBD_LL_StallEP>
 8005b22:	e015      	b.n	8005b50 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00d      	beq.n	8005b4c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d108      	bne.n	8005b4c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	7afa      	ldrb	r2, [r7, #11]
 8005b44:	4611      	mov	r1, r2
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	4798      	blx	r3
 8005b4a:	e001      	b.n	8005b50 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e000      	b.n	8005b52 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b086      	sub	sp, #24
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	460b      	mov	r3, r1
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b68:	7afb      	ldrb	r3, [r7, #11]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d17f      	bne.n	8005c6e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3314      	adds	r3, #20
 8005b72:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d15c      	bne.n	8005c38 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d915      	bls.n	8005bb6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	1ad2      	subs	r2, r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 febe 	bl	8006924 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2200      	movs	r2, #0
 8005bac:	2100      	movs	r1, #0
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f001 fb3f 	bl	8007232 <USBD_LL_PrepareReceive>
 8005bb4:	e04e      	b.n	8005c54 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	6912      	ldr	r2, [r2, #16]
 8005bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bc2:	fb01 f202 	mul.w	r2, r1, r2
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d11c      	bne.n	8005c06 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d316      	bcc.n	8005c06 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d20f      	bcs.n	8005c06 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005be6:	2200      	movs	r2, #0
 8005be8:	2100      	movs	r1, #0
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fe9a 	bl	8006924 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f001 fb17 	bl	8007232 <USBD_LL_PrepareReceive>
 8005c04:	e026      	b.n	8005c54 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d105      	bne.n	8005c28 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005c28:	2180      	movs	r1, #128	@ 0x80
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f001 fa56 	bl	80070dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fecc 	bl	80069ce <USBD_CtlReceiveStatus>
 8005c36:	e00d      	b.n	8005c54 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d004      	beq.n	8005c4c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d103      	bne.n	8005c54 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005c4c:	2180      	movs	r1, #128	@ 0x80
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f001 fa44 	bl	80070dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d11d      	bne.n	8005c9a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff fe81 	bl	8005966 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005c6c:	e015      	b.n	8005c9a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d108      	bne.n	8005c96 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	7afa      	ldrb	r2, [r7, #11]
 8005c8e:	4611      	mov	r1, r2
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	4798      	blx	r3
 8005c94:	e001      	b.n	8005c9a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c96:	2302      	movs	r3, #2
 8005c98:	e000      	b.n	8005c9c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cac:	2340      	movs	r3, #64	@ 0x40
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 f9cd 	bl	8007052 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2240      	movs	r2, #64	@ 0x40
 8005cc4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cc8:	2340      	movs	r3, #64	@ 0x40
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2180      	movs	r1, #128	@ 0x80
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f001 f9bf 	bl	8007052 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2240      	movs	r2, #64	@ 0x40
 8005cde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d009      	beq.n	8005d1c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6852      	ldr	r2, [r2, #4]
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	4611      	mov	r1, r2
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
  }

  return USBD_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d105      	bne.n	8005d8a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bc80      	pop	{r7}
 8005d94:	4770      	bx	lr

08005d96 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b082      	sub	sp, #8
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d10b      	bne.n	8005dc0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005de2:	2b40      	cmp	r3, #64	@ 0x40
 8005de4:	d005      	beq.n	8005df2 <USBD_StdDevReq+0x26>
 8005de6:	2b40      	cmp	r3, #64	@ 0x40
 8005de8:	d84f      	bhi.n	8005e8a <USBD_StdDevReq+0xbe>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d009      	beq.n	8005e02 <USBD_StdDevReq+0x36>
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d14b      	bne.n	8005e8a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
      break;
 8005e00:	e048      	b.n	8005e94 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	2b09      	cmp	r3, #9
 8005e08:	d839      	bhi.n	8005e7e <USBD_StdDevReq+0xb2>
 8005e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <USBD_StdDevReq+0x44>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e61 	.word	0x08005e61
 8005e14:	08005e75 	.word	0x08005e75
 8005e18:	08005e7f 	.word	0x08005e7f
 8005e1c:	08005e6b 	.word	0x08005e6b
 8005e20:	08005e7f 	.word	0x08005e7f
 8005e24:	08005e43 	.word	0x08005e43
 8005e28:	08005e39 	.word	0x08005e39
 8005e2c:	08005e7f 	.word	0x08005e7f
 8005e30:	08005e57 	.word	0x08005e57
 8005e34:	08005e4d 	.word	0x08005e4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9dc 	bl	80061f8 <USBD_GetDescriptor>
          break;
 8005e40:	e022      	b.n	8005e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fb3f 	bl	80064c8 <USBD_SetAddress>
          break;
 8005e4a:	e01d      	b.n	8005e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fb7e 	bl	8006550 <USBD_SetConfig>
          break;
 8005e54:	e018      	b.n	8005e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fc07 	bl	800666c <USBD_GetConfig>
          break;
 8005e5e:	e013      	b.n	8005e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fc37 	bl	80066d6 <USBD_GetStatus>
          break;
 8005e68:	e00e      	b.n	8005e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fc65 	bl	800673c <USBD_SetFeature>
          break;
 8005e72:	e009      	b.n	8005e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fc74 	bl	8006764 <USBD_ClrFeature>
          break;
 8005e7c:	e004      	b.n	8005e88 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fcc9 	bl	8006818 <USBD_CtlError>
          break;
 8005e86:	bf00      	nop
      }
      break;
 8005e88:	e004      	b.n	8005e94 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fcc3 	bl	8006818 <USBD_CtlError>
      break;
 8005e92:	bf00      	nop
  }

  return ret;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop

08005ea0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005eb6:	2b40      	cmp	r3, #64	@ 0x40
 8005eb8:	d005      	beq.n	8005ec6 <USBD_StdItfReq+0x26>
 8005eba:	2b40      	cmp	r3, #64	@ 0x40
 8005ebc:	d82e      	bhi.n	8005f1c <USBD_StdItfReq+0x7c>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <USBD_StdItfReq+0x26>
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d12a      	bne.n	8005f1c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d81d      	bhi.n	8005f0e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	889b      	ldrh	r3, [r3, #4]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d813      	bhi.n	8005f04 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	88db      	ldrh	r3, [r3, #6]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d110      	bne.n	8005f18 <USBD_StdItfReq+0x78>
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10d      	bne.n	8005f18 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fd53 	bl	80069a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f02:	e009      	b.n	8005f18 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fc86 	bl	8006818 <USBD_CtlError>
          break;
 8005f0c:	e004      	b.n	8005f18 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fc81 	bl	8006818 <USBD_CtlError>
          break;
 8005f16:	e000      	b.n	8005f1a <USBD_StdItfReq+0x7a>
          break;
 8005f18:	bf00      	nop
      }
      break;
 8005f1a:	e004      	b.n	8005f26 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fc7a 	bl	8006818 <USBD_CtlError>
      break;
 8005f24:	bf00      	nop
  }

  return USBD_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	889b      	ldrh	r3, [r3, #4]
 8005f42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f4c:	2b40      	cmp	r3, #64	@ 0x40
 8005f4e:	d007      	beq.n	8005f60 <USBD_StdEPReq+0x30>
 8005f50:	2b40      	cmp	r3, #64	@ 0x40
 8005f52:	f200 8146 	bhi.w	80061e2 <USBD_StdEPReq+0x2b2>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <USBD_StdEPReq+0x40>
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	f040 8141 	bne.w	80061e2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
      break;
 8005f6e:	e13d      	b.n	80061ec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d10a      	bne.n	8005f92 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	e12d      	b.n	80061ee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d007      	beq.n	8005faa <USBD_StdEPReq+0x7a>
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	f300 811b 	bgt.w	80061d6 <USBD_StdEPReq+0x2a6>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d072      	beq.n	800608a <USBD_StdEPReq+0x15a>
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d03a      	beq.n	800601e <USBD_StdEPReq+0xee>
 8005fa8:	e115      	b.n	80061d6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d002      	beq.n	8005fba <USBD_StdEPReq+0x8a>
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d015      	beq.n	8005fe4 <USBD_StdEPReq+0xb4>
 8005fb8:	e02b      	b.n	8006012 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fba:	7bbb      	ldrb	r3, [r7, #14]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <USBD_StdEPReq+0xaa>
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	2b80      	cmp	r3, #128	@ 0x80
 8005fc4:	d009      	beq.n	8005fda <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 f886 	bl	80070dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005fd0:	2180      	movs	r1, #128	@ 0x80
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 f882 	bl	80070dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fd8:	e020      	b.n	800601c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fc1b 	bl	8006818 <USBD_CtlError>
              break;
 8005fe2:	e01b      	b.n	800601c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	885b      	ldrh	r3, [r3, #2]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10e      	bne.n	800600a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <USBD_StdEPReq+0xda>
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	2b80      	cmp	r3, #128	@ 0x80
 8005ff6:	d008      	beq.n	800600a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	88db      	ldrh	r3, [r3, #6]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f869 	bl	80070dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fccc 	bl	80069a8 <USBD_CtlSendStatus>

              break;
 8006010:	e004      	b.n	800601c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fbff 	bl	8006818 <USBD_CtlError>
              break;
 800601a:	bf00      	nop
          }
          break;
 800601c:	e0e0      	b.n	80061e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006024:	2b02      	cmp	r3, #2
 8006026:	d002      	beq.n	800602e <USBD_StdEPReq+0xfe>
 8006028:	2b03      	cmp	r3, #3
 800602a:	d015      	beq.n	8006058 <USBD_StdEPReq+0x128>
 800602c:	e026      	b.n	800607c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800602e:	7bbb      	ldrb	r3, [r7, #14]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00c      	beq.n	800604e <USBD_StdEPReq+0x11e>
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	2b80      	cmp	r3, #128	@ 0x80
 8006038:	d009      	beq.n	800604e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 f84c 	bl	80070dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006044:	2180      	movs	r1, #128	@ 0x80
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 f848 	bl	80070dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800604c:	e01c      	b.n	8006088 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fbe1 	bl	8006818 <USBD_CtlError>
              break;
 8006056:	e017      	b.n	8006088 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	885b      	ldrh	r3, [r3, #2]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d112      	bne.n	8006086 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800606a:	7bbb      	ldrb	r3, [r7, #14]
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f001 f853 	bl	800711a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fc97 	bl	80069a8 <USBD_CtlSendStatus>
              }
              break;
 800607a:	e004      	b.n	8006086 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fbca 	bl	8006818 <USBD_CtlError>
              break;
 8006084:	e000      	b.n	8006088 <USBD_StdEPReq+0x158>
              break;
 8006086:	bf00      	nop
          }
          break;
 8006088:	e0aa      	b.n	80061e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006090:	2b02      	cmp	r3, #2
 8006092:	d002      	beq.n	800609a <USBD_StdEPReq+0x16a>
 8006094:	2b03      	cmp	r3, #3
 8006096:	d032      	beq.n	80060fe <USBD_StdEPReq+0x1ce>
 8006098:	e097      	b.n	80061ca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800609a:	7bbb      	ldrb	r3, [r7, #14]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <USBD_StdEPReq+0x180>
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	2b80      	cmp	r3, #128	@ 0x80
 80060a4:	d004      	beq.n	80060b0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fbb5 	bl	8006818 <USBD_CtlError>
                break;
 80060ae:	e091      	b.n	80061d4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	da0b      	bge.n	80060d0 <USBD_StdEPReq+0x1a0>
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	3310      	adds	r3, #16
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	3304      	adds	r3, #4
 80060ce:	e00b      	b.n	80060e8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	4413      	add	r3, r2
 80060e6:	3304      	adds	r3, #4
 80060e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2202      	movs	r2, #2
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fbf8 	bl	80068ec <USBD_CtlSendData>
              break;
 80060fc:	e06a      	b.n	80061d4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80060fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006102:	2b00      	cmp	r3, #0
 8006104:	da11      	bge.n	800612a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006106:	7bbb      	ldrb	r3, [r7, #14]
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	3318      	adds	r3, #24
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d117      	bne.n	8006150 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fb78 	bl	8006818 <USBD_CtlError>
                  break;
 8006128:	e054      	b.n	80061d4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	f003 020f 	and.w	r2, r3, #15
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d104      	bne.n	8006150 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fb65 	bl	8006818 <USBD_CtlError>
                  break;
 800614e:	e041      	b.n	80061d4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006154:	2b00      	cmp	r3, #0
 8006156:	da0b      	bge.n	8006170 <USBD_StdEPReq+0x240>
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	3310      	adds	r3, #16
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	4413      	add	r3, r2
 800616c:	3304      	adds	r3, #4
 800616e:	e00b      	b.n	8006188 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	3304      	adds	r3, #4
 8006188:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <USBD_StdEPReq+0x266>
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	2b80      	cmp	r3, #128	@ 0x80
 8006194:	d103      	bne.n	800619e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e00e      	b.n	80061bc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 ffd8 	bl	8007158 <USBD_LL_IsStallEP>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2201      	movs	r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e002      	b.n	80061bc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2202      	movs	r2, #2
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fb92 	bl	80068ec <USBD_CtlSendData>
              break;
 80061c8:	e004      	b.n	80061d4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fb23 	bl	8006818 <USBD_CtlError>
              break;
 80061d2:	bf00      	nop
          }
          break;
 80061d4:	e004      	b.n	80061e0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fb1d 	bl	8006818 <USBD_CtlError>
          break;
 80061de:	bf00      	nop
      }
      break;
 80061e0:	e004      	b.n	80061ec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fb17 	bl	8006818 <USBD_CtlError>
      break;
 80061ea:	bf00      	nop
  }

  return ret;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	885b      	ldrh	r3, [r3, #2]
 8006212:	0a1b      	lsrs	r3, r3, #8
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	2b06      	cmp	r3, #6
 800621a:	f200 8128 	bhi.w	800646e <USBD_GetDescriptor+0x276>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <USBD_GetDescriptor+0x2c>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006241 	.word	0x08006241
 8006228:	08006259 	.word	0x08006259
 800622c:	08006299 	.word	0x08006299
 8006230:	0800646f 	.word	0x0800646f
 8006234:	0800646f 	.word	0x0800646f
 8006238:	0800640f 	.word	0x0800640f
 800623c:	0800643b 	.word	0x0800643b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	7c12      	ldrb	r2, [r2, #16]
 800624c:	f107 0108 	add.w	r1, r7, #8
 8006250:	4610      	mov	r0, r2
 8006252:	4798      	blx	r3
 8006254:	60f8      	str	r0, [r7, #12]
      break;
 8006256:	e112      	b.n	800647e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7c1b      	ldrb	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10d      	bne.n	800627c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	f107 0208 	add.w	r2, r7, #8
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
 8006270:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3301      	adds	r3, #1
 8006276:	2202      	movs	r2, #2
 8006278:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800627a:	e100      	b.n	800647e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006284:	f107 0208 	add.w	r2, r7, #8
 8006288:	4610      	mov	r0, r2
 800628a:	4798      	blx	r3
 800628c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	2202      	movs	r2, #2
 8006294:	701a      	strb	r2, [r3, #0]
      break;
 8006296:	e0f2      	b.n	800647e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	885b      	ldrh	r3, [r3, #2]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b05      	cmp	r3, #5
 80062a0:	f200 80ac 	bhi.w	80063fc <USBD_GetDescriptor+0x204>
 80062a4:	a201      	add	r2, pc, #4	@ (adr r2, 80062ac <USBD_GetDescriptor+0xb4>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062c5 	.word	0x080062c5
 80062b0:	080062f9 	.word	0x080062f9
 80062b4:	0800632d 	.word	0x0800632d
 80062b8:	08006361 	.word	0x08006361
 80062bc:	08006395 	.word	0x08006395
 80062c0:	080063c9 	.word	0x080063c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	7c12      	ldrb	r2, [r2, #16]
 80062dc:	f107 0108 	add.w	r1, r7, #8
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062e6:	e091      	b.n	800640c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa94 	bl	8006818 <USBD_CtlError>
            err++;
 80062f0:	7afb      	ldrb	r3, [r7, #11]
 80062f2:	3301      	adds	r3, #1
 80062f4:	72fb      	strb	r3, [r7, #11]
          break;
 80062f6:	e089      	b.n	800640c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	7c12      	ldrb	r2, [r2, #16]
 8006310:	f107 0108 	add.w	r1, r7, #8
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
 8006318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800631a:	e077      	b.n	800640c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa7a 	bl	8006818 <USBD_CtlError>
            err++;
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	3301      	adds	r3, #1
 8006328:	72fb      	strb	r3, [r7, #11]
          break;
 800632a:	e06f      	b.n	800640c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00b      	beq.n	8006350 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	7c12      	ldrb	r2, [r2, #16]
 8006344:	f107 0108 	add.w	r1, r7, #8
 8006348:	4610      	mov	r0, r2
 800634a:	4798      	blx	r3
 800634c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800634e:	e05d      	b.n	800640c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa60 	bl	8006818 <USBD_CtlError>
            err++;
 8006358:	7afb      	ldrb	r3, [r7, #11]
 800635a:	3301      	adds	r3, #1
 800635c:	72fb      	strb	r3, [r7, #11]
          break;
 800635e:	e055      	b.n	800640c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	7c12      	ldrb	r2, [r2, #16]
 8006378:	f107 0108 	add.w	r1, r7, #8
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
 8006380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006382:	e043      	b.n	800640c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fa46 	bl	8006818 <USBD_CtlError>
            err++;
 800638c:	7afb      	ldrb	r3, [r7, #11]
 800638e:	3301      	adds	r3, #1
 8006390:	72fb      	strb	r3, [r7, #11]
          break;
 8006392:	e03b      	b.n	800640c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00b      	beq.n	80063b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	7c12      	ldrb	r2, [r2, #16]
 80063ac:	f107 0108 	add.w	r1, r7, #8
 80063b0:	4610      	mov	r0, r2
 80063b2:	4798      	blx	r3
 80063b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063b6:	e029      	b.n	800640c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa2c 	bl	8006818 <USBD_CtlError>
            err++;
 80063c0:	7afb      	ldrb	r3, [r7, #11]
 80063c2:	3301      	adds	r3, #1
 80063c4:	72fb      	strb	r3, [r7, #11]
          break;
 80063c6:	e021      	b.n	800640c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	7c12      	ldrb	r2, [r2, #16]
 80063e0:	f107 0108 	add.w	r1, r7, #8
 80063e4:	4610      	mov	r0, r2
 80063e6:	4798      	blx	r3
 80063e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ea:	e00f      	b.n	800640c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fa12 	bl	8006818 <USBD_CtlError>
            err++;
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	3301      	adds	r3, #1
 80063f8:	72fb      	strb	r3, [r7, #11]
          break;
 80063fa:	e007      	b.n	800640c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa0a 	bl	8006818 <USBD_CtlError>
          err++;
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	3301      	adds	r3, #1
 8006408:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800640a:	e038      	b.n	800647e <USBD_GetDescriptor+0x286>
 800640c:	e037      	b.n	800647e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	7c1b      	ldrb	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800641c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800641e:	f107 0208 	add.w	r2, r7, #8
 8006422:	4610      	mov	r0, r2
 8006424:	4798      	blx	r3
 8006426:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006428:	e029      	b.n	800647e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f9f3 	bl	8006818 <USBD_CtlError>
        err++;
 8006432:	7afb      	ldrb	r3, [r7, #11]
 8006434:	3301      	adds	r3, #1
 8006436:	72fb      	strb	r3, [r7, #11]
      break;
 8006438:	e021      	b.n	800647e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	7c1b      	ldrb	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10d      	bne.n	800645e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644a:	f107 0208 	add.w	r2, r7, #8
 800644e:	4610      	mov	r0, r2
 8006450:	4798      	blx	r3
 8006452:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	2207      	movs	r2, #7
 800645a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800645c:	e00f      	b.n	800647e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f9d9 	bl	8006818 <USBD_CtlError>
        err++;
 8006466:	7afb      	ldrb	r3, [r7, #11]
 8006468:	3301      	adds	r3, #1
 800646a:	72fb      	strb	r3, [r7, #11]
      break;
 800646c:	e007      	b.n	800647e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f9d1 	bl	8006818 <USBD_CtlError>
      err++;
 8006476:	7afb      	ldrb	r3, [r7, #11]
 8006478:	3301      	adds	r3, #1
 800647a:	72fb      	strb	r3, [r7, #11]
      break;
 800647c:	bf00      	nop
  }

  if (err != 0U)
 800647e:	7afb      	ldrb	r3, [r7, #11]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11c      	bne.n	80064be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006484:	893b      	ldrh	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d011      	beq.n	80064ae <USBD_GetDescriptor+0x2b6>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	88db      	ldrh	r3, [r3, #6]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	88da      	ldrh	r2, [r3, #6]
 8006496:	893b      	ldrh	r3, [r7, #8]
 8006498:	4293      	cmp	r3, r2
 800649a:	bf28      	it	cs
 800649c:	4613      	movcs	r3, r2
 800649e:	b29b      	uxth	r3, r3
 80064a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80064a2:	893b      	ldrh	r3, [r7, #8]
 80064a4:	461a      	mov	r2, r3
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa1f 	bl	80068ec <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	88db      	ldrh	r3, [r3, #6]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d104      	bne.n	80064c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa76 	bl	80069a8 <USBD_CtlSendStatus>
 80064bc:	e000      	b.n	80064c0 <USBD_GetDescriptor+0x2c8>
    return;
 80064be:	bf00      	nop
    }
  }
}
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop

080064c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	889b      	ldrh	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d130      	bne.n	800653c <USBD_SetAddress+0x74>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	88db      	ldrh	r3, [r3, #6]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d12c      	bne.n	800653c <USBD_SetAddress+0x74>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	885b      	ldrh	r3, [r3, #2]
 80064e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e8:	d828      	bhi.n	800653c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	885b      	ldrh	r3, [r3, #2]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d104      	bne.n	800650a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f988 	bl	8006818 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006508:	e01d      	b.n	8006546 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	7bfa      	ldrb	r2, [r7, #15]
 800650e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fe49 	bl	80071ae <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fa43 	bl	80069a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006530:	e009      	b.n	8006546 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653a:	e004      	b.n	8006546 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f96a 	bl	8006818 <USBD_CtlError>
  }
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	885b      	ldrh	r3, [r3, #2]
 800655e:	b2da      	uxtb	r2, r3
 8006560:	4b41      	ldr	r3, [pc, #260]	@ (8006668 <USBD_SetConfig+0x118>)
 8006562:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006564:	4b40      	ldr	r3, [pc, #256]	@ (8006668 <USBD_SetConfig+0x118>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d904      	bls.n	8006576 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f952 	bl	8006818 <USBD_CtlError>
 8006574:	e075      	b.n	8006662 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800657c:	2b02      	cmp	r3, #2
 800657e:	d002      	beq.n	8006586 <USBD_SetConfig+0x36>
 8006580:	2b03      	cmp	r3, #3
 8006582:	d023      	beq.n	80065cc <USBD_SetConfig+0x7c>
 8006584:	e062      	b.n	800664c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006586:	4b38      	ldr	r3, [pc, #224]	@ (8006668 <USBD_SetConfig+0x118>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d01a      	beq.n	80065c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800658e:	4b36      	ldr	r3, [pc, #216]	@ (8006668 <USBD_SetConfig+0x118>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2203      	movs	r2, #3
 800659c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80065a0:	4b31      	ldr	r3, [pc, #196]	@ (8006668 <USBD_SetConfig+0x118>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff f9e7 	bl	800597a <USBD_SetClassConfig>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d104      	bne.n	80065bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f92f 	bl	8006818 <USBD_CtlError>
            return;
 80065ba:	e052      	b.n	8006662 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f9f3 	bl	80069a8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80065c2:	e04e      	b.n	8006662 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f9ef 	bl	80069a8 <USBD_CtlSendStatus>
        break;
 80065ca:	e04a      	b.n	8006662 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80065cc:	4b26      	ldr	r3, [pc, #152]	@ (8006668 <USBD_SetConfig+0x118>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d112      	bne.n	80065fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80065dc:	4b22      	ldr	r3, [pc, #136]	@ (8006668 <USBD_SetConfig+0x118>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80065e6:	4b20      	ldr	r3, [pc, #128]	@ (8006668 <USBD_SetConfig+0x118>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff f9e3 	bl	80059b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f9d8 	bl	80069a8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80065f8:	e033      	b.n	8006662 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80065fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006668 <USBD_SetConfig+0x118>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	429a      	cmp	r2, r3
 8006606:	d01d      	beq.n	8006644 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff f9d1 	bl	80059b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006616:	4b14      	ldr	r3, [pc, #80]	@ (8006668 <USBD_SetConfig+0x118>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006620:	4b11      	ldr	r3, [pc, #68]	@ (8006668 <USBD_SetConfig+0x118>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff f9a7 	bl	800597a <USBD_SetClassConfig>
 800662c:	4603      	mov	r3, r0
 800662e:	2b02      	cmp	r3, #2
 8006630:	d104      	bne.n	800663c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f8ef 	bl	8006818 <USBD_CtlError>
            return;
 800663a:	e012      	b.n	8006662 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f9b3 	bl	80069a8 <USBD_CtlSendStatus>
        break;
 8006642:	e00e      	b.n	8006662 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f9af 	bl	80069a8 <USBD_CtlSendStatus>
        break;
 800664a:	e00a      	b.n	8006662 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f8e2 	bl	8006818 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006654:	4b04      	ldr	r3, [pc, #16]	@ (8006668 <USBD_SetConfig+0x118>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff f9ac 	bl	80059b8 <USBD_ClrClassConfig>
        break;
 8006660:	bf00      	nop
    }
  }
}
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	200002f4 	.word	0x200002f4

0800666c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	88db      	ldrh	r3, [r3, #6]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d004      	beq.n	8006688 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f8c9 	bl	8006818 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006686:	e022      	b.n	80066ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800668e:	2b02      	cmp	r3, #2
 8006690:	dc02      	bgt.n	8006698 <USBD_GetConfig+0x2c>
 8006692:	2b00      	cmp	r3, #0
 8006694:	dc03      	bgt.n	800669e <USBD_GetConfig+0x32>
 8006696:	e015      	b.n	80066c4 <USBD_GetConfig+0x58>
 8006698:	2b03      	cmp	r3, #3
 800669a:	d00b      	beq.n	80066b4 <USBD_GetConfig+0x48>
 800669c:	e012      	b.n	80066c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3308      	adds	r3, #8
 80066a8:	2201      	movs	r2, #1
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f91d 	bl	80068ec <USBD_CtlSendData>
        break;
 80066b2:	e00c      	b.n	80066ce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3304      	adds	r3, #4
 80066b8:	2201      	movs	r2, #1
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f915 	bl	80068ec <USBD_CtlSendData>
        break;
 80066c2:	e004      	b.n	80066ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8a6 	bl	8006818 <USBD_CtlError>
        break;
 80066cc:	bf00      	nop
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e6:	3b01      	subs	r3, #1
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d81e      	bhi.n	800672a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	88db      	ldrh	r3, [r3, #6]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d004      	beq.n	80066fe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f88e 	bl	8006818 <USBD_CtlError>
        break;
 80066fc:	e01a      	b.n	8006734 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f043 0202 	orr.w	r2, r3, #2
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	330c      	adds	r3, #12
 800671e:	2202      	movs	r2, #2
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f8e2 	bl	80068ec <USBD_CtlSendData>
      break;
 8006728:	e004      	b.n	8006734 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f873 	bl	8006818 <USBD_CtlError>
      break;
 8006732:	bf00      	nop
  }
}
 8006734:	bf00      	nop
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	885b      	ldrh	r3, [r3, #2]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d106      	bne.n	800675c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f926 	bl	80069a8 <USBD_CtlSendStatus>
  }
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006774:	3b01      	subs	r3, #1
 8006776:	2b02      	cmp	r3, #2
 8006778:	d80b      	bhi.n	8006792 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	885b      	ldrh	r3, [r3, #2]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d10c      	bne.n	800679c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f90c 	bl	80069a8 <USBD_CtlSendStatus>
      }
      break;
 8006790:	e004      	b.n	800679c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f83f 	bl	8006818 <USBD_CtlError>
      break;
 800679a:	e000      	b.n	800679e <USBD_ClrFeature+0x3a>
      break;
 800679c:	bf00      	nop
  }
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	785a      	ldrb	r2, [r3, #1]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	3302      	adds	r3, #2
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	3303      	adds	r3, #3
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	3304      	adds	r3, #4
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	3305      	adds	r3, #5
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	021b      	lsls	r3, r3, #8
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	4413      	add	r3, r2
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	3306      	adds	r3, #6
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	3307      	adds	r3, #7
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	b29b      	uxth	r3, r3
 8006806:	4413      	add	r3, r2
 8006808:	b29a      	uxth	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	80da      	strh	r2, [r3, #6]

}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr

08006818 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006822:	2180      	movs	r1, #128	@ 0x80
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fc59 	bl	80070dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800682a:	2100      	movs	r1, #0
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fc55 	bl	80070dc <USBD_LL_StallEP>
}
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b086      	sub	sp, #24
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d032      	beq.n	80068b6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f834 	bl	80068be <USBD_GetLen>
 8006856:	4603      	mov	r3, r0
 8006858:	3301      	adds	r3, #1
 800685a:	b29b      	uxth	r3, r3
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	75fa      	strb	r2, [r7, #23]
 800686a:	461a      	mov	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	4413      	add	r3, r2
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	7812      	ldrb	r2, [r2, #0]
 8006874:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	75fa      	strb	r2, [r7, #23]
 800687c:	461a      	mov	r2, r3
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4413      	add	r3, r2
 8006882:	2203      	movs	r2, #3
 8006884:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006886:	e012      	b.n	80068ae <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	60fa      	str	r2, [r7, #12]
 800688e:	7dfa      	ldrb	r2, [r7, #23]
 8006890:	1c51      	adds	r1, r2, #1
 8006892:	75f9      	strb	r1, [r7, #23]
 8006894:	4611      	mov	r1, r2
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	440a      	add	r2, r1
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800689e:	7dfb      	ldrb	r3, [r7, #23]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	75fa      	strb	r2, [r7, #23]
 80068a4:	461a      	mov	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4413      	add	r3, r2
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e8      	bne.n	8006888 <USBD_GetString+0x4e>
    }
  }
}
 80068b6:	bf00      	nop
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80068ca:	e005      	b.n	80068d8 <USBD_GetLen+0x1a>
  {
    len++;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	3301      	adds	r3, #1
 80068d0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3301      	adds	r3, #1
 80068d6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f5      	bne.n	80068cc <USBD_GetLen+0xe>
  }

  return len;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bc80      	pop	{r7}
 80068ea:	4770      	bx	lr

080068ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006908:	88fa      	ldrh	r2, [r7, #6]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	2100      	movs	r1, #0
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fc69 	bl	80071ec <USBD_LL_Transmit>

  return USBD_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006932:	88fb      	ldrh	r3, [r7, #6]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	2100      	movs	r1, #0
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fc57 	bl	80071ec <USBD_LL_Transmit>

  return USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2203      	movs	r2, #3
 800695a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800695e:	88fa      	ldrh	r2, [r7, #6]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006966:	88fa      	ldrh	r2, [r7, #6]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	2100      	movs	r1, #0
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fc5c 	bl	8007232 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	2100      	movs	r1, #0
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fc4a 	bl	8007232 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2204      	movs	r2, #4
 80069b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069b8:	2300      	movs	r3, #0
 80069ba:	2200      	movs	r2, #0
 80069bc:	2100      	movs	r1, #0
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fc14 	bl	80071ec <USBD_LL_Transmit>

  return USBD_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2205      	movs	r2, #5
 80069da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069de:	2300      	movs	r3, #0
 80069e0:	2200      	movs	r2, #0
 80069e2:	2100      	movs	r1, #0
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fc24 	bl	8007232 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80069f8:	2200      	movs	r2, #0
 80069fa:	4912      	ldr	r1, [pc, #72]	@ (8006a44 <MX_USB_DEVICE_Init+0x50>)
 80069fc:	4812      	ldr	r0, [pc, #72]	@ (8006a48 <MX_USB_DEVICE_Init+0x54>)
 80069fe:	f7fe ff62 	bl	80058c6 <USBD_Init>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a08:	f7f9 fc9c 	bl	8000344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006a0c:	490f      	ldr	r1, [pc, #60]	@ (8006a4c <MX_USB_DEVICE_Init+0x58>)
 8006a0e:	480e      	ldr	r0, [pc, #56]	@ (8006a48 <MX_USB_DEVICE_Init+0x54>)
 8006a10:	f7fe ff84 	bl	800591c <USBD_RegisterClass>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a1a:	f7f9 fc93 	bl	8000344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a1e:	490c      	ldr	r1, [pc, #48]	@ (8006a50 <MX_USB_DEVICE_Init+0x5c>)
 8006a20:	4809      	ldr	r0, [pc, #36]	@ (8006a48 <MX_USB_DEVICE_Init+0x54>)
 8006a22:	f7fe feb5 	bl	8005790 <USBD_CDC_RegisterInterface>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a2c:	f7f9 fc8a 	bl	8000344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a30:	4805      	ldr	r0, [pc, #20]	@ (8006a48 <MX_USB_DEVICE_Init+0x54>)
 8006a32:	f7fe ff8c 	bl	800594e <USBD_Start>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a3c:	f7f9 fc82 	bl	8000344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a40:	bf00      	nop
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	2000012c 	.word	0x2000012c
 8006a48:	200002f8 	.word	0x200002f8
 8006a4c:	20000018 	.word	0x20000018
 8006a50:	2000011c 	.word	0x2000011c

08006a54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4905      	ldr	r1, [pc, #20]	@ (8006a70 <CDC_Init_FS+0x1c>)
 8006a5c:	4805      	ldr	r0, [pc, #20]	@ (8006a74 <CDC_Init_FS+0x20>)
 8006a5e:	f7fe fead 	bl	80057bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006a62:	4905      	ldr	r1, [pc, #20]	@ (8006a78 <CDC_Init_FS+0x24>)
 8006a64:	4803      	ldr	r0, [pc, #12]	@ (8006a74 <CDC_Init_FS+0x20>)
 8006a66:	f7fe fec2 	bl	80057ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006a6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	200009bc 	.word	0x200009bc
 8006a74:	200002f8 	.word	0x200002f8
 8006a78:	200005bc 	.word	0x200005bc

08006a7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr
	...

08006a8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	6039      	str	r1, [r7, #0]
 8006a96:	71fb      	strb	r3, [r7, #7]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	2b23      	cmp	r3, #35	@ 0x23
 8006aa0:	d84a      	bhi.n	8006b38 <CDC_Control_FS+0xac>
 8006aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa8 <CDC_Control_FS+0x1c>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006b39 	.word	0x08006b39
 8006aac:	08006b39 	.word	0x08006b39
 8006ab0:	08006b39 	.word	0x08006b39
 8006ab4:	08006b39 	.word	0x08006b39
 8006ab8:	08006b39 	.word	0x08006b39
 8006abc:	08006b39 	.word	0x08006b39
 8006ac0:	08006b39 	.word	0x08006b39
 8006ac4:	08006b39 	.word	0x08006b39
 8006ac8:	08006b39 	.word	0x08006b39
 8006acc:	08006b39 	.word	0x08006b39
 8006ad0:	08006b39 	.word	0x08006b39
 8006ad4:	08006b39 	.word	0x08006b39
 8006ad8:	08006b39 	.word	0x08006b39
 8006adc:	08006b39 	.word	0x08006b39
 8006ae0:	08006b39 	.word	0x08006b39
 8006ae4:	08006b39 	.word	0x08006b39
 8006ae8:	08006b39 	.word	0x08006b39
 8006aec:	08006b39 	.word	0x08006b39
 8006af0:	08006b39 	.word	0x08006b39
 8006af4:	08006b39 	.word	0x08006b39
 8006af8:	08006b39 	.word	0x08006b39
 8006afc:	08006b39 	.word	0x08006b39
 8006b00:	08006b39 	.word	0x08006b39
 8006b04:	08006b39 	.word	0x08006b39
 8006b08:	08006b39 	.word	0x08006b39
 8006b0c:	08006b39 	.word	0x08006b39
 8006b10:	08006b39 	.word	0x08006b39
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b39 	.word	0x08006b39
 8006b1c:	08006b39 	.word	0x08006b39
 8006b20:	08006b39 	.word	0x08006b39
 8006b24:	08006b39 	.word	0x08006b39
 8006b28:	08006b39 	.word	0x08006b39
 8006b2c:	08006b39 	.word	0x08006b39
 8006b30:	08006b39 	.word	0x08006b39
 8006b34:	08006b39 	.word	0x08006b39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006b38:	bf00      	nop
  }

  return (USBD_OK);
 8006b3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop

08006b48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4808      	ldr	r0, [pc, #32]	@ (8006b78 <CDC_Receive_FS+0x30>)
 8006b56:	f7fe fe4a 	bl	80057ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b5a:	4807      	ldr	r0, [pc, #28]	@ (8006b78 <CDC_Receive_FS+0x30>)
 8006b5c:	f7fe fe89 	bl	8005872 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7f9 faf8 	bl	800015c <CDC_ReceiveCallback>
  return (USBD_OK);
 8006b6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200002f8 	.word	0x200002f8

08006b7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc4 <CDC_Transmit_FS+0x48>)
 8006b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e00b      	b.n	8006bba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006ba2:	887b      	ldrh	r3, [r7, #2]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4806      	ldr	r0, [pc, #24]	@ (8006bc4 <CDC_Transmit_FS+0x48>)
 8006baa:	f7fe fe07 	bl	80057bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006bae:	4805      	ldr	r0, [pc, #20]	@ (8006bc4 <CDC_Transmit_FS+0x48>)
 8006bb0:	f7fe fe30 	bl	8005814 <USBD_CDC_TransmitPacket>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	200002f8 	.word	0x200002f8

08006bc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	6039      	str	r1, [r7, #0]
 8006bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2212      	movs	r2, #18
 8006bd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006bda:	4b03      	ldr	r3, [pc, #12]	@ (8006be8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	20000148 	.word	0x20000148

08006bec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	6039      	str	r1, [r7, #0]
 8006bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006bfe:	4b03      	ldr	r3, [pc, #12]	@ (8006c0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	2000015c 	.word	0x2000015c

08006c10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d105      	bne.n	8006c2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	4907      	ldr	r1, [pc, #28]	@ (8006c44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c26:	4808      	ldr	r0, [pc, #32]	@ (8006c48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c28:	f7ff fe07 	bl	800683a <USBD_GetString>
 8006c2c:	e004      	b.n	8006c38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	4904      	ldr	r1, [pc, #16]	@ (8006c44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c32:	4805      	ldr	r0, [pc, #20]	@ (8006c48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c34:	f7ff fe01 	bl	800683a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c38:	4b02      	ldr	r3, [pc, #8]	@ (8006c44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000dbc 	.word	0x20000dbc
 8006c48:	08007ccc 	.word	0x08007ccc

08006c4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	6039      	str	r1, [r7, #0]
 8006c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	4904      	ldr	r1, [pc, #16]	@ (8006c6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c5c:	4804      	ldr	r0, [pc, #16]	@ (8006c70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c5e:	f7ff fdec 	bl	800683a <USBD_GetString>
  return USBD_StrDesc;
 8006c62:	4b02      	ldr	r3, [pc, #8]	@ (8006c6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000dbc 	.word	0x20000dbc
 8006c70:	08007ce4 	.word	0x08007ce4

08006c74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	6039      	str	r1, [r7, #0]
 8006c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	221a      	movs	r2, #26
 8006c84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c86:	f000 f843 	bl	8006d10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c8a:	4b02      	ldr	r3, [pc, #8]	@ (8006c94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20000160 	.word	0x20000160

08006c98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	6039      	str	r1, [r7, #0]
 8006ca2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d105      	bne.n	8006cb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	4907      	ldr	r1, [pc, #28]	@ (8006ccc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cae:	4808      	ldr	r0, [pc, #32]	@ (8006cd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006cb0:	f7ff fdc3 	bl	800683a <USBD_GetString>
 8006cb4:	e004      	b.n	8006cc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	4904      	ldr	r1, [pc, #16]	@ (8006ccc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cba:	4805      	ldr	r0, [pc, #20]	@ (8006cd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006cbc:	f7ff fdbd 	bl	800683a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cc0:	4b02      	ldr	r3, [pc, #8]	@ (8006ccc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000dbc 	.word	0x20000dbc
 8006cd0:	08007cf0 	.word	0x08007cf0

08006cd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	6039      	str	r1, [r7, #0]
 8006cde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d105      	bne.n	8006cf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	4907      	ldr	r1, [pc, #28]	@ (8006d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cea:	4808      	ldr	r0, [pc, #32]	@ (8006d0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cec:	f7ff fda5 	bl	800683a <USBD_GetString>
 8006cf0:	e004      	b.n	8006cfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	4904      	ldr	r1, [pc, #16]	@ (8006d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cf6:	4805      	ldr	r0, [pc, #20]	@ (8006d0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cf8:	f7ff fd9f 	bl	800683a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cfc:	4b02      	ldr	r3, [pc, #8]	@ (8006d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000dbc 	.word	0x20000dbc
 8006d0c:	08007cfc 	.word	0x08007cfc

08006d10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d16:	4b0f      	ldr	r3, [pc, #60]	@ (8006d54 <Get_SerialNum+0x44>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d58 <Get_SerialNum+0x48>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d22:	4b0e      	ldr	r3, [pc, #56]	@ (8006d5c <Get_SerialNum+0x4c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d36:	2208      	movs	r2, #8
 8006d38:	4909      	ldr	r1, [pc, #36]	@ (8006d60 <Get_SerialNum+0x50>)
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 f814 	bl	8006d68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d40:	2204      	movs	r2, #4
 8006d42:	4908      	ldr	r1, [pc, #32]	@ (8006d64 <Get_SerialNum+0x54>)
 8006d44:	68b8      	ldr	r0, [r7, #8]
 8006d46:	f000 f80f 	bl	8006d68 <IntToUnicode>
  }
}
 8006d4a:	bf00      	nop
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	1ffff7e8 	.word	0x1ffff7e8
 8006d58:	1ffff7ec 	.word	0x1ffff7ec
 8006d5c:	1ffff7f0 	.word	0x1ffff7f0
 8006d60:	20000162 	.word	0x20000162
 8006d64:	20000172 	.word	0x20000172

08006d68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]
 8006d7e:	e027      	b.n	8006dd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	0f1b      	lsrs	r3, r3, #28
 8006d84:	2b09      	cmp	r3, #9
 8006d86:	d80b      	bhi.n	8006da0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	0f1b      	lsrs	r3, r3, #28
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	4619      	mov	r1, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	440b      	add	r3, r1
 8006d98:	3230      	adds	r2, #48	@ 0x30
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	e00a      	b.n	8006db6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	0f1b      	lsrs	r3, r3, #28
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	4619      	mov	r1, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	440b      	add	r3, r1
 8006db0:	3237      	adds	r2, #55	@ 0x37
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	011b      	lsls	r3, r3, #4
 8006dba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
 8006dd0:	7dfa      	ldrb	r2, [r7, #23]
 8006dd2:	79fb      	ldrb	r3, [r7, #7]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d3d3      	bcc.n	8006d80 <IntToUnicode+0x18>
  }
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a0d      	ldr	r2, [pc, #52]	@ (8006e28 <HAL_PCD_MspInit+0x44>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d113      	bne.n	8006e1e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006df6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e2c <HAL_PCD_MspInit+0x48>)
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8006e2c <HAL_PCD_MspInit+0x48>)
 8006dfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e00:	61d3      	str	r3, [r2, #28]
 8006e02:	4b0a      	ldr	r3, [pc, #40]	@ (8006e2c <HAL_PCD_MspInit+0x48>)
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2100      	movs	r1, #0
 8006e12:	2014      	movs	r0, #20
 8006e14:	f7f9 fcc3 	bl	800079e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006e18:	2014      	movs	r0, #20
 8006e1a:	f7f9 fcdc 	bl	80007d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40005c00 	.word	0x40005c00
 8006e2c:	40021000 	.word	0x40021000

08006e30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fe fdc9 	bl	80059de <USBD_LL_SetupStage>
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8006e66:	78fa      	ldrb	r2, [r7, #3]
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	440b      	add	r3, r1
 8006e74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	f7fe fdfb 	bl	8005a78 <USBD_LL_DataOutStage>
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8006e9c:	78fa      	ldrb	r2, [r7, #3]
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	440b      	add	r3, r1
 8006eaa:	3324      	adds	r3, #36	@ 0x24
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	78fb      	ldrb	r3, [r7, #3]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f7fe fe52 	bl	8005b5a <USBD_LL_DataInStage>
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe ff62 	bl	8005d96 <USBD_LL_SOF>
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	799b      	ldrb	r3, [r3, #6]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d001      	beq.n	8006ef2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006eee:	f7f9 fa29 	bl	8000344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ef8:	7bfa      	ldrb	r2, [r7, #15]
 8006efa:	4611      	mov	r1, r2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe ff12 	bl	8005d26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fecb 	bl	8005ca4 <USBD_LL_Reset>
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe ff0c 	bl	8005d44 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7a9b      	ldrb	r3, [r3, #10]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f34:	4b04      	ldr	r3, [pc, #16]	@ (8006f48 <HAL_PCD_SuspendCallback+0x30>)
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	4a03      	ldr	r2, [pc, #12]	@ (8006f48 <HAL_PCD_SuspendCallback+0x30>)
 8006f3a:	f043 0306 	orr.w	r3, r3, #6
 8006f3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	e000ed00 	.word	0xe000ed00

08006f4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe ff06 	bl	8005d6c <USBD_LL_Resume>
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006f70:	4a28      	ldr	r2, [pc, #160]	@ (8007014 <USBD_LL_Init+0xac>)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a26      	ldr	r2, [pc, #152]	@ (8007014 <USBD_LL_Init+0xac>)
 8006f7c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006f80:	4b24      	ldr	r3, [pc, #144]	@ (8007014 <USBD_LL_Init+0xac>)
 8006f82:	4a25      	ldr	r2, [pc, #148]	@ (8007018 <USBD_LL_Init+0xb0>)
 8006f84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006f86:	4b23      	ldr	r3, [pc, #140]	@ (8007014 <USBD_LL_Init+0xac>)
 8006f88:	2208      	movs	r2, #8
 8006f8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006f8c:	4b21      	ldr	r3, [pc, #132]	@ (8007014 <USBD_LL_Init+0xac>)
 8006f8e:	2202      	movs	r2, #2
 8006f90:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006f92:	4b20      	ldr	r3, [pc, #128]	@ (8007014 <USBD_LL_Init+0xac>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006f98:	4b1e      	ldr	r3, [pc, #120]	@ (8007014 <USBD_LL_Init+0xac>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007014 <USBD_LL_Init+0xac>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006fa4:	481b      	ldr	r0, [pc, #108]	@ (8007014 <USBD_LL_Init+0xac>)
 8006fa6:	f7f9 fc30 	bl	800080a <HAL_PCD_Init>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006fb0:	f7f9 f9c8 	bl	8000344 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006fba:	2318      	movs	r3, #24
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	f7fb f941 	bl	8002246 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006fca:	2358      	movs	r3, #88	@ 0x58
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2180      	movs	r1, #128	@ 0x80
 8006fd0:	f7fb f939 	bl	8002246 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006fda:	23c0      	movs	r3, #192	@ 0xc0
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2181      	movs	r1, #129	@ 0x81
 8006fe0:	f7fb f931 	bl	8002246 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006fea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	f7fb f928 	bl	8002246 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006ffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007000:	2200      	movs	r2, #0
 8007002:	2182      	movs	r1, #130	@ 0x82
 8007004:	f7fb f91f 	bl	8002246 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000fbc 	.word	0x20000fbc
 8007018:	40005c00 	.word	0x40005c00

0800701c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007032:	4618      	mov	r0, r3
 8007034:	f7f9 fcdf 	bl	80009f6 <HAL_PCD_Start>
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	4618      	mov	r0, r3
 8007040:	f000 f94e 	bl	80072e0 <USBD_Get_USB_Status>
 8007044:	4603      	mov	r3, r0
 8007046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007048:	7bbb      	ldrb	r3, [r7, #14]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	4608      	mov	r0, r1
 800705c:	4611      	mov	r1, r2
 800705e:	461a      	mov	r2, r3
 8007060:	4603      	mov	r3, r0
 8007062:	70fb      	strb	r3, [r7, #3]
 8007064:	460b      	mov	r3, r1
 8007066:	70bb      	strb	r3, [r7, #2]
 8007068:	4613      	mov	r3, r2
 800706a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800707a:	78bb      	ldrb	r3, [r7, #2]
 800707c:	883a      	ldrh	r2, [r7, #0]
 800707e:	78f9      	ldrb	r1, [r7, #3]
 8007080:	f7f9 fe33 	bl	8000cea <HAL_PCD_EP_Open>
 8007084:	4603      	mov	r3, r0
 8007086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	4618      	mov	r0, r3
 800708c:	f000 f928 	bl	80072e0 <USBD_Get_USB_Status>
 8007090:	4603      	mov	r3, r0
 8007092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007094:	7bbb      	ldrb	r3, [r7, #14]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	4611      	mov	r1, r2
 80070bc:	4618      	mov	r0, r3
 80070be:	f7f9 fe71 	bl	8000da4 <HAL_PCD_EP_Close>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 f909 	bl	80072e0 <USBD_Get_USB_Status>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80070f6:	78fa      	ldrb	r2, [r7, #3]
 80070f8:	4611      	mov	r1, r2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7f9 ff19 	bl	8000f32 <HAL_PCD_EP_SetStall>
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	4618      	mov	r0, r3
 8007108:	f000 f8ea 	bl	80072e0 <USBD_Get_USB_Status>
 800710c:	4603      	mov	r3, r0
 800710e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007110:	7bbb      	ldrb	r3, [r7, #14]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	460b      	mov	r3, r1
 8007124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007134:	78fa      	ldrb	r2, [r7, #3]
 8007136:	4611      	mov	r1, r2
 8007138:	4618      	mov	r0, r3
 800713a:	f7f9 ff5a 	bl	8000ff2 <HAL_PCD_EP_ClrStall>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	4618      	mov	r0, r3
 8007146:	f000 f8cb 	bl	80072e0 <USBD_Get_USB_Status>
 800714a:	4603      	mov	r3, r0
 800714c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800714e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800716a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800716c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007170:	2b00      	cmp	r3, #0
 8007172:	da0b      	bge.n	800718c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	440b      	add	r3, r1
 8007186:	3312      	adds	r3, #18
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	e00b      	b.n	80071a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007192:	68f9      	ldr	r1, [r7, #12]
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	440b      	add	r3, r1
 800719e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80071a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr

080071ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80071c8:	78fa      	ldrb	r2, [r7, #3]
 80071ca:	4611      	mov	r1, r2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7f9 fd68 	bl	8000ca2 <HAL_PCD_SetAddress>
 80071d2:	4603      	mov	r3, r0
 80071d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 f881 	bl	80072e0 <USBD_Get_USB_Status>
 80071de:	4603      	mov	r3, r0
 80071e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	607a      	str	r2, [r7, #4]
 80071f6:	461a      	mov	r2, r3
 80071f8:	460b      	mov	r3, r1
 80071fa:	72fb      	strb	r3, [r7, #11]
 80071fc:	4613      	mov	r3, r2
 80071fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800720e:	893b      	ldrh	r3, [r7, #8]
 8007210:	7af9      	ldrb	r1, [r7, #11]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	f7f9 fe56 	bl	8000ec4 <HAL_PCD_EP_Transmit>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f85e 	bl	80072e0 <USBD_Get_USB_Status>
 8007224:	4603      	mov	r3, r0
 8007226:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007228:	7dbb      	ldrb	r3, [r7, #22]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	461a      	mov	r2, r3
 800723e:	460b      	mov	r3, r1
 8007240:	72fb      	strb	r3, [r7, #11]
 8007242:	4613      	mov	r3, r2
 8007244:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007254:	893b      	ldrh	r3, [r7, #8]
 8007256:	7af9      	ldrb	r1, [r7, #11]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	f7f9 fdeb 	bl	8000e34 <HAL_PCD_EP_Receive>
 800725e:	4603      	mov	r3, r0
 8007260:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f83b 	bl	80072e0 <USBD_Get_USB_Status>
 800726a:	4603      	mov	r3, r0
 800726c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800726e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	4611      	mov	r1, r2
 800728e:	4618      	mov	r0, r3
 8007290:	f7f9 fe01 	bl	8000e96 <HAL_PCD_EP_GetRxCount>
 8007294:	4603      	mov	r3, r0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80072a8:	4b02      	ldr	r3, [pc, #8]	@ (80072b4 <USBD_static_malloc+0x14>)
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr
 80072b4:	20001294 	.word	0x20001294

080072b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]

}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr

080072ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr

080072e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d817      	bhi.n	8007324 <USBD_Get_USB_Status+0x44>
 80072f4:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <USBD_Get_USB_Status+0x1c>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	0800730d 	.word	0x0800730d
 8007300:	08007313 	.word	0x08007313
 8007304:	08007319 	.word	0x08007319
 8007308:	0800731f 	.word	0x0800731f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	73fb      	strb	r3, [r7, #15]
    break;
 8007310:	e00b      	b.n	800732a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007312:	2302      	movs	r3, #2
 8007314:	73fb      	strb	r3, [r7, #15]
    break;
 8007316:	e008      	b.n	800732a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007318:	2301      	movs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
    break;
 800731c:	e005      	b.n	800732a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800731e:	2302      	movs	r3, #2
 8007320:	73fb      	strb	r3, [r7, #15]
    break;
 8007322:	e002      	b.n	800732a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007324:	2302      	movs	r3, #2
 8007326:	73fb      	strb	r3, [r7, #15]
    break;
 8007328:	bf00      	nop
  }
  return usb_status;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	bc80      	pop	{r7}
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop

08007338 <siprintf>:
 8007338:	b40e      	push	{r1, r2, r3}
 800733a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800733e:	b500      	push	{lr}
 8007340:	b09c      	sub	sp, #112	@ 0x70
 8007342:	ab1d      	add	r3, sp, #116	@ 0x74
 8007344:	9002      	str	r0, [sp, #8]
 8007346:	9006      	str	r0, [sp, #24]
 8007348:	9107      	str	r1, [sp, #28]
 800734a:	9104      	str	r1, [sp, #16]
 800734c:	4808      	ldr	r0, [pc, #32]	@ (8007370 <siprintf+0x38>)
 800734e:	4909      	ldr	r1, [pc, #36]	@ (8007374 <siprintf+0x3c>)
 8007350:	f853 2b04 	ldr.w	r2, [r3], #4
 8007354:	9105      	str	r1, [sp, #20]
 8007356:	6800      	ldr	r0, [r0, #0]
 8007358:	a902      	add	r1, sp, #8
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	f000 f992 	bl	8007684 <_svfiprintf_r>
 8007360:	2200      	movs	r2, #0
 8007362:	9b02      	ldr	r3, [sp, #8]
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	b01c      	add	sp, #112	@ 0x70
 8007368:	f85d eb04 	ldr.w	lr, [sp], #4
 800736c:	b003      	add	sp, #12
 800736e:	4770      	bx	lr
 8007370:	2000017c 	.word	0x2000017c
 8007374:	ffff0208 	.word	0xffff0208

08007378 <memset>:
 8007378:	4603      	mov	r3, r0
 800737a:	4402      	add	r2, r0
 800737c:	4293      	cmp	r3, r2
 800737e:	d100      	bne.n	8007382 <memset+0xa>
 8007380:	4770      	bx	lr
 8007382:	f803 1b01 	strb.w	r1, [r3], #1
 8007386:	e7f9      	b.n	800737c <memset+0x4>

08007388 <__errno>:
 8007388:	4b01      	ldr	r3, [pc, #4]	@ (8007390 <__errno+0x8>)
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	2000017c 	.word	0x2000017c

08007394 <__libc_init_array>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	2600      	movs	r6, #0
 8007398:	4d0c      	ldr	r5, [pc, #48]	@ (80073cc <__libc_init_array+0x38>)
 800739a:	4c0d      	ldr	r4, [pc, #52]	@ (80073d0 <__libc_init_array+0x3c>)
 800739c:	1b64      	subs	r4, r4, r5
 800739e:	10a4      	asrs	r4, r4, #2
 80073a0:	42a6      	cmp	r6, r4
 80073a2:	d109      	bne.n	80073b8 <__libc_init_array+0x24>
 80073a4:	f000 fc78 	bl	8007c98 <_init>
 80073a8:	2600      	movs	r6, #0
 80073aa:	4d0a      	ldr	r5, [pc, #40]	@ (80073d4 <__libc_init_array+0x40>)
 80073ac:	4c0a      	ldr	r4, [pc, #40]	@ (80073d8 <__libc_init_array+0x44>)
 80073ae:	1b64      	subs	r4, r4, r5
 80073b0:	10a4      	asrs	r4, r4, #2
 80073b2:	42a6      	cmp	r6, r4
 80073b4:	d105      	bne.n	80073c2 <__libc_init_array+0x2e>
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
 80073b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073bc:	4798      	blx	r3
 80073be:	3601      	adds	r6, #1
 80073c0:	e7ee      	b.n	80073a0 <__libc_init_array+0xc>
 80073c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c6:	4798      	blx	r3
 80073c8:	3601      	adds	r6, #1
 80073ca:	e7f2      	b.n	80073b2 <__libc_init_array+0x1e>
 80073cc:	08007d6c 	.word	0x08007d6c
 80073d0:	08007d6c 	.word	0x08007d6c
 80073d4:	08007d6c 	.word	0x08007d6c
 80073d8:	08007d70 	.word	0x08007d70

080073dc <__retarget_lock_acquire_recursive>:
 80073dc:	4770      	bx	lr

080073de <__retarget_lock_release_recursive>:
 80073de:	4770      	bx	lr

080073e0 <_free_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4605      	mov	r5, r0
 80073e4:	2900      	cmp	r1, #0
 80073e6:	d040      	beq.n	800746a <_free_r+0x8a>
 80073e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ec:	1f0c      	subs	r4, r1, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	bfb8      	it	lt
 80073f2:	18e4      	addlt	r4, r4, r3
 80073f4:	f000 f8de 	bl	80075b4 <__malloc_lock>
 80073f8:	4a1c      	ldr	r2, [pc, #112]	@ (800746c <_free_r+0x8c>)
 80073fa:	6813      	ldr	r3, [r2, #0]
 80073fc:	b933      	cbnz	r3, 800740c <_free_r+0x2c>
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	6014      	str	r4, [r2, #0]
 8007402:	4628      	mov	r0, r5
 8007404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007408:	f000 b8da 	b.w	80075c0 <__malloc_unlock>
 800740c:	42a3      	cmp	r3, r4
 800740e:	d908      	bls.n	8007422 <_free_r+0x42>
 8007410:	6820      	ldr	r0, [r4, #0]
 8007412:	1821      	adds	r1, r4, r0
 8007414:	428b      	cmp	r3, r1
 8007416:	bf01      	itttt	eq
 8007418:	6819      	ldreq	r1, [r3, #0]
 800741a:	685b      	ldreq	r3, [r3, #4]
 800741c:	1809      	addeq	r1, r1, r0
 800741e:	6021      	streq	r1, [r4, #0]
 8007420:	e7ed      	b.n	80073fe <_free_r+0x1e>
 8007422:	461a      	mov	r2, r3
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	b10b      	cbz	r3, 800742c <_free_r+0x4c>
 8007428:	42a3      	cmp	r3, r4
 800742a:	d9fa      	bls.n	8007422 <_free_r+0x42>
 800742c:	6811      	ldr	r1, [r2, #0]
 800742e:	1850      	adds	r0, r2, r1
 8007430:	42a0      	cmp	r0, r4
 8007432:	d10b      	bne.n	800744c <_free_r+0x6c>
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	4401      	add	r1, r0
 8007438:	1850      	adds	r0, r2, r1
 800743a:	4283      	cmp	r3, r0
 800743c:	6011      	str	r1, [r2, #0]
 800743e:	d1e0      	bne.n	8007402 <_free_r+0x22>
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4408      	add	r0, r1
 8007446:	6010      	str	r0, [r2, #0]
 8007448:	6053      	str	r3, [r2, #4]
 800744a:	e7da      	b.n	8007402 <_free_r+0x22>
 800744c:	d902      	bls.n	8007454 <_free_r+0x74>
 800744e:	230c      	movs	r3, #12
 8007450:	602b      	str	r3, [r5, #0]
 8007452:	e7d6      	b.n	8007402 <_free_r+0x22>
 8007454:	6820      	ldr	r0, [r4, #0]
 8007456:	1821      	adds	r1, r4, r0
 8007458:	428b      	cmp	r3, r1
 800745a:	bf01      	itttt	eq
 800745c:	6819      	ldreq	r1, [r3, #0]
 800745e:	685b      	ldreq	r3, [r3, #4]
 8007460:	1809      	addeq	r1, r1, r0
 8007462:	6021      	streq	r1, [r4, #0]
 8007464:	6063      	str	r3, [r4, #4]
 8007466:	6054      	str	r4, [r2, #4]
 8007468:	e7cb      	b.n	8007402 <_free_r+0x22>
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	200015f8 	.word	0x200015f8

08007470 <sbrk_aligned>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	4e0f      	ldr	r6, [pc, #60]	@ (80074b0 <sbrk_aligned+0x40>)
 8007474:	460c      	mov	r4, r1
 8007476:	6831      	ldr	r1, [r6, #0]
 8007478:	4605      	mov	r5, r0
 800747a:	b911      	cbnz	r1, 8007482 <sbrk_aligned+0x12>
 800747c:	f000 fbaa 	bl	8007bd4 <_sbrk_r>
 8007480:	6030      	str	r0, [r6, #0]
 8007482:	4621      	mov	r1, r4
 8007484:	4628      	mov	r0, r5
 8007486:	f000 fba5 	bl	8007bd4 <_sbrk_r>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	d103      	bne.n	8007496 <sbrk_aligned+0x26>
 800748e:	f04f 34ff 	mov.w	r4, #4294967295
 8007492:	4620      	mov	r0, r4
 8007494:	bd70      	pop	{r4, r5, r6, pc}
 8007496:	1cc4      	adds	r4, r0, #3
 8007498:	f024 0403 	bic.w	r4, r4, #3
 800749c:	42a0      	cmp	r0, r4
 800749e:	d0f8      	beq.n	8007492 <sbrk_aligned+0x22>
 80074a0:	1a21      	subs	r1, r4, r0
 80074a2:	4628      	mov	r0, r5
 80074a4:	f000 fb96 	bl	8007bd4 <_sbrk_r>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d1f2      	bne.n	8007492 <sbrk_aligned+0x22>
 80074ac:	e7ef      	b.n	800748e <sbrk_aligned+0x1e>
 80074ae:	bf00      	nop
 80074b0:	200015f4 	.word	0x200015f4

080074b4 <_malloc_r>:
 80074b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b8:	1ccd      	adds	r5, r1, #3
 80074ba:	f025 0503 	bic.w	r5, r5, #3
 80074be:	3508      	adds	r5, #8
 80074c0:	2d0c      	cmp	r5, #12
 80074c2:	bf38      	it	cc
 80074c4:	250c      	movcc	r5, #12
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	4606      	mov	r6, r0
 80074ca:	db01      	blt.n	80074d0 <_malloc_r+0x1c>
 80074cc:	42a9      	cmp	r1, r5
 80074ce:	d904      	bls.n	80074da <_malloc_r+0x26>
 80074d0:	230c      	movs	r3, #12
 80074d2:	6033      	str	r3, [r6, #0]
 80074d4:	2000      	movs	r0, #0
 80074d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075b0 <_malloc_r+0xfc>
 80074de:	f000 f869 	bl	80075b4 <__malloc_lock>
 80074e2:	f8d8 3000 	ldr.w	r3, [r8]
 80074e6:	461c      	mov	r4, r3
 80074e8:	bb44      	cbnz	r4, 800753c <_malloc_r+0x88>
 80074ea:	4629      	mov	r1, r5
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff ffbf 	bl	8007470 <sbrk_aligned>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	4604      	mov	r4, r0
 80074f6:	d158      	bne.n	80075aa <_malloc_r+0xf6>
 80074f8:	f8d8 4000 	ldr.w	r4, [r8]
 80074fc:	4627      	mov	r7, r4
 80074fe:	2f00      	cmp	r7, #0
 8007500:	d143      	bne.n	800758a <_malloc_r+0xd6>
 8007502:	2c00      	cmp	r4, #0
 8007504:	d04b      	beq.n	800759e <_malloc_r+0xea>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	4639      	mov	r1, r7
 800750a:	4630      	mov	r0, r6
 800750c:	eb04 0903 	add.w	r9, r4, r3
 8007510:	f000 fb60 	bl	8007bd4 <_sbrk_r>
 8007514:	4581      	cmp	r9, r0
 8007516:	d142      	bne.n	800759e <_malloc_r+0xea>
 8007518:	6821      	ldr	r1, [r4, #0]
 800751a:	4630      	mov	r0, r6
 800751c:	1a6d      	subs	r5, r5, r1
 800751e:	4629      	mov	r1, r5
 8007520:	f7ff ffa6 	bl	8007470 <sbrk_aligned>
 8007524:	3001      	adds	r0, #1
 8007526:	d03a      	beq.n	800759e <_malloc_r+0xea>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	442b      	add	r3, r5
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	f8d8 3000 	ldr.w	r3, [r8]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	bb62      	cbnz	r2, 8007590 <_malloc_r+0xdc>
 8007536:	f8c8 7000 	str.w	r7, [r8]
 800753a:	e00f      	b.n	800755c <_malloc_r+0xa8>
 800753c:	6822      	ldr	r2, [r4, #0]
 800753e:	1b52      	subs	r2, r2, r5
 8007540:	d420      	bmi.n	8007584 <_malloc_r+0xd0>
 8007542:	2a0b      	cmp	r2, #11
 8007544:	d917      	bls.n	8007576 <_malloc_r+0xc2>
 8007546:	1961      	adds	r1, r4, r5
 8007548:	42a3      	cmp	r3, r4
 800754a:	6025      	str	r5, [r4, #0]
 800754c:	bf18      	it	ne
 800754e:	6059      	strne	r1, [r3, #4]
 8007550:	6863      	ldr	r3, [r4, #4]
 8007552:	bf08      	it	eq
 8007554:	f8c8 1000 	streq.w	r1, [r8]
 8007558:	5162      	str	r2, [r4, r5]
 800755a:	604b      	str	r3, [r1, #4]
 800755c:	4630      	mov	r0, r6
 800755e:	f000 f82f 	bl	80075c0 <__malloc_unlock>
 8007562:	f104 000b 	add.w	r0, r4, #11
 8007566:	1d23      	adds	r3, r4, #4
 8007568:	f020 0007 	bic.w	r0, r0, #7
 800756c:	1ac2      	subs	r2, r0, r3
 800756e:	bf1c      	itt	ne
 8007570:	1a1b      	subne	r3, r3, r0
 8007572:	50a3      	strne	r3, [r4, r2]
 8007574:	e7af      	b.n	80074d6 <_malloc_r+0x22>
 8007576:	6862      	ldr	r2, [r4, #4]
 8007578:	42a3      	cmp	r3, r4
 800757a:	bf0c      	ite	eq
 800757c:	f8c8 2000 	streq.w	r2, [r8]
 8007580:	605a      	strne	r2, [r3, #4]
 8007582:	e7eb      	b.n	800755c <_malloc_r+0xa8>
 8007584:	4623      	mov	r3, r4
 8007586:	6864      	ldr	r4, [r4, #4]
 8007588:	e7ae      	b.n	80074e8 <_malloc_r+0x34>
 800758a:	463c      	mov	r4, r7
 800758c:	687f      	ldr	r7, [r7, #4]
 800758e:	e7b6      	b.n	80074fe <_malloc_r+0x4a>
 8007590:	461a      	mov	r2, r3
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	42a3      	cmp	r3, r4
 8007596:	d1fb      	bne.n	8007590 <_malloc_r+0xdc>
 8007598:	2300      	movs	r3, #0
 800759a:	6053      	str	r3, [r2, #4]
 800759c:	e7de      	b.n	800755c <_malloc_r+0xa8>
 800759e:	230c      	movs	r3, #12
 80075a0:	4630      	mov	r0, r6
 80075a2:	6033      	str	r3, [r6, #0]
 80075a4:	f000 f80c 	bl	80075c0 <__malloc_unlock>
 80075a8:	e794      	b.n	80074d4 <_malloc_r+0x20>
 80075aa:	6005      	str	r5, [r0, #0]
 80075ac:	e7d6      	b.n	800755c <_malloc_r+0xa8>
 80075ae:	bf00      	nop
 80075b0:	200015f8 	.word	0x200015f8

080075b4 <__malloc_lock>:
 80075b4:	4801      	ldr	r0, [pc, #4]	@ (80075bc <__malloc_lock+0x8>)
 80075b6:	f7ff bf11 	b.w	80073dc <__retarget_lock_acquire_recursive>
 80075ba:	bf00      	nop
 80075bc:	200015f0 	.word	0x200015f0

080075c0 <__malloc_unlock>:
 80075c0:	4801      	ldr	r0, [pc, #4]	@ (80075c8 <__malloc_unlock+0x8>)
 80075c2:	f7ff bf0c 	b.w	80073de <__retarget_lock_release_recursive>
 80075c6:	bf00      	nop
 80075c8:	200015f0 	.word	0x200015f0

080075cc <__ssputs_r>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	461f      	mov	r7, r3
 80075d2:	688e      	ldr	r6, [r1, #8]
 80075d4:	4682      	mov	sl, r0
 80075d6:	42be      	cmp	r6, r7
 80075d8:	460c      	mov	r4, r1
 80075da:	4690      	mov	r8, r2
 80075dc:	680b      	ldr	r3, [r1, #0]
 80075de:	d82d      	bhi.n	800763c <__ssputs_r+0x70>
 80075e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075e8:	d026      	beq.n	8007638 <__ssputs_r+0x6c>
 80075ea:	6965      	ldr	r5, [r4, #20]
 80075ec:	6909      	ldr	r1, [r1, #16]
 80075ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075f2:	eba3 0901 	sub.w	r9, r3, r1
 80075f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075fa:	1c7b      	adds	r3, r7, #1
 80075fc:	444b      	add	r3, r9
 80075fe:	106d      	asrs	r5, r5, #1
 8007600:	429d      	cmp	r5, r3
 8007602:	bf38      	it	cc
 8007604:	461d      	movcc	r5, r3
 8007606:	0553      	lsls	r3, r2, #21
 8007608:	d527      	bpl.n	800765a <__ssputs_r+0x8e>
 800760a:	4629      	mov	r1, r5
 800760c:	f7ff ff52 	bl	80074b4 <_malloc_r>
 8007610:	4606      	mov	r6, r0
 8007612:	b360      	cbz	r0, 800766e <__ssputs_r+0xa2>
 8007614:	464a      	mov	r2, r9
 8007616:	6921      	ldr	r1, [r4, #16]
 8007618:	f000 fafa 	bl	8007c10 <memcpy>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007626:	81a3      	strh	r3, [r4, #12]
 8007628:	6126      	str	r6, [r4, #16]
 800762a:	444e      	add	r6, r9
 800762c:	6026      	str	r6, [r4, #0]
 800762e:	463e      	mov	r6, r7
 8007630:	6165      	str	r5, [r4, #20]
 8007632:	eba5 0509 	sub.w	r5, r5, r9
 8007636:	60a5      	str	r5, [r4, #8]
 8007638:	42be      	cmp	r6, r7
 800763a:	d900      	bls.n	800763e <__ssputs_r+0x72>
 800763c:	463e      	mov	r6, r7
 800763e:	4632      	mov	r2, r6
 8007640:	4641      	mov	r1, r8
 8007642:	6820      	ldr	r0, [r4, #0]
 8007644:	f000 faac 	bl	8007ba0 <memmove>
 8007648:	2000      	movs	r0, #0
 800764a:	68a3      	ldr	r3, [r4, #8]
 800764c:	1b9b      	subs	r3, r3, r6
 800764e:	60a3      	str	r3, [r4, #8]
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	4433      	add	r3, r6
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765a:	462a      	mov	r2, r5
 800765c:	f000 fae6 	bl	8007c2c <_realloc_r>
 8007660:	4606      	mov	r6, r0
 8007662:	2800      	cmp	r0, #0
 8007664:	d1e0      	bne.n	8007628 <__ssputs_r+0x5c>
 8007666:	4650      	mov	r0, sl
 8007668:	6921      	ldr	r1, [r4, #16]
 800766a:	f7ff feb9 	bl	80073e0 <_free_r>
 800766e:	230c      	movs	r3, #12
 8007670:	f8ca 3000 	str.w	r3, [sl]
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f04f 30ff 	mov.w	r0, #4294967295
 800767a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	e7e9      	b.n	8007656 <__ssputs_r+0x8a>
	...

08007684 <_svfiprintf_r>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	4698      	mov	r8, r3
 800768a:	898b      	ldrh	r3, [r1, #12]
 800768c:	4607      	mov	r7, r0
 800768e:	061b      	lsls	r3, r3, #24
 8007690:	460d      	mov	r5, r1
 8007692:	4614      	mov	r4, r2
 8007694:	b09d      	sub	sp, #116	@ 0x74
 8007696:	d510      	bpl.n	80076ba <_svfiprintf_r+0x36>
 8007698:	690b      	ldr	r3, [r1, #16]
 800769a:	b973      	cbnz	r3, 80076ba <_svfiprintf_r+0x36>
 800769c:	2140      	movs	r1, #64	@ 0x40
 800769e:	f7ff ff09 	bl	80074b4 <_malloc_r>
 80076a2:	6028      	str	r0, [r5, #0]
 80076a4:	6128      	str	r0, [r5, #16]
 80076a6:	b930      	cbnz	r0, 80076b6 <_svfiprintf_r+0x32>
 80076a8:	230c      	movs	r3, #12
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	b01d      	add	sp, #116	@ 0x74
 80076b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b6:	2340      	movs	r3, #64	@ 0x40
 80076b8:	616b      	str	r3, [r5, #20]
 80076ba:	2300      	movs	r3, #0
 80076bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80076be:	2320      	movs	r3, #32
 80076c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076c4:	2330      	movs	r3, #48	@ 0x30
 80076c6:	f04f 0901 	mov.w	r9, #1
 80076ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007868 <_svfiprintf_r+0x1e4>
 80076d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076d6:	4623      	mov	r3, r4
 80076d8:	469a      	mov	sl, r3
 80076da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076de:	b10a      	cbz	r2, 80076e4 <_svfiprintf_r+0x60>
 80076e0:	2a25      	cmp	r2, #37	@ 0x25
 80076e2:	d1f9      	bne.n	80076d8 <_svfiprintf_r+0x54>
 80076e4:	ebba 0b04 	subs.w	fp, sl, r4
 80076e8:	d00b      	beq.n	8007702 <_svfiprintf_r+0x7e>
 80076ea:	465b      	mov	r3, fp
 80076ec:	4622      	mov	r2, r4
 80076ee:	4629      	mov	r1, r5
 80076f0:	4638      	mov	r0, r7
 80076f2:	f7ff ff6b 	bl	80075cc <__ssputs_r>
 80076f6:	3001      	adds	r0, #1
 80076f8:	f000 80a7 	beq.w	800784a <_svfiprintf_r+0x1c6>
 80076fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076fe:	445a      	add	r2, fp
 8007700:	9209      	str	r2, [sp, #36]	@ 0x24
 8007702:	f89a 3000 	ldrb.w	r3, [sl]
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 809f 	beq.w	800784a <_svfiprintf_r+0x1c6>
 800770c:	2300      	movs	r3, #0
 800770e:	f04f 32ff 	mov.w	r2, #4294967295
 8007712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007716:	f10a 0a01 	add.w	sl, sl, #1
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	9307      	str	r3, [sp, #28]
 800771e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007722:	931a      	str	r3, [sp, #104]	@ 0x68
 8007724:	4654      	mov	r4, sl
 8007726:	2205      	movs	r2, #5
 8007728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772c:	484e      	ldr	r0, [pc, #312]	@ (8007868 <_svfiprintf_r+0x1e4>)
 800772e:	f000 fa61 	bl	8007bf4 <memchr>
 8007732:	9a04      	ldr	r2, [sp, #16]
 8007734:	b9d8      	cbnz	r0, 800776e <_svfiprintf_r+0xea>
 8007736:	06d0      	lsls	r0, r2, #27
 8007738:	bf44      	itt	mi
 800773a:	2320      	movmi	r3, #32
 800773c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007740:	0711      	lsls	r1, r2, #28
 8007742:	bf44      	itt	mi
 8007744:	232b      	movmi	r3, #43	@ 0x2b
 8007746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800774a:	f89a 3000 	ldrb.w	r3, [sl]
 800774e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007750:	d015      	beq.n	800777e <_svfiprintf_r+0xfa>
 8007752:	4654      	mov	r4, sl
 8007754:	2000      	movs	r0, #0
 8007756:	f04f 0c0a 	mov.w	ip, #10
 800775a:	9a07      	ldr	r2, [sp, #28]
 800775c:	4621      	mov	r1, r4
 800775e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007762:	3b30      	subs	r3, #48	@ 0x30
 8007764:	2b09      	cmp	r3, #9
 8007766:	d94b      	bls.n	8007800 <_svfiprintf_r+0x17c>
 8007768:	b1b0      	cbz	r0, 8007798 <_svfiprintf_r+0x114>
 800776a:	9207      	str	r2, [sp, #28]
 800776c:	e014      	b.n	8007798 <_svfiprintf_r+0x114>
 800776e:	eba0 0308 	sub.w	r3, r0, r8
 8007772:	fa09 f303 	lsl.w	r3, r9, r3
 8007776:	4313      	orrs	r3, r2
 8007778:	46a2      	mov	sl, r4
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	e7d2      	b.n	8007724 <_svfiprintf_r+0xa0>
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	1d19      	adds	r1, r3, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	9103      	str	r1, [sp, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	bfbb      	ittet	lt
 800778a:	425b      	neglt	r3, r3
 800778c:	f042 0202 	orrlt.w	r2, r2, #2
 8007790:	9307      	strge	r3, [sp, #28]
 8007792:	9307      	strlt	r3, [sp, #28]
 8007794:	bfb8      	it	lt
 8007796:	9204      	strlt	r2, [sp, #16]
 8007798:	7823      	ldrb	r3, [r4, #0]
 800779a:	2b2e      	cmp	r3, #46	@ 0x2e
 800779c:	d10a      	bne.n	80077b4 <_svfiprintf_r+0x130>
 800779e:	7863      	ldrb	r3, [r4, #1]
 80077a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077a2:	d132      	bne.n	800780a <_svfiprintf_r+0x186>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	3402      	adds	r4, #2
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	9203      	str	r2, [sp, #12]
 80077ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800786c <_svfiprintf_r+0x1e8>
 80077b8:	2203      	movs	r2, #3
 80077ba:	4650      	mov	r0, sl
 80077bc:	7821      	ldrb	r1, [r4, #0]
 80077be:	f000 fa19 	bl	8007bf4 <memchr>
 80077c2:	b138      	cbz	r0, 80077d4 <_svfiprintf_r+0x150>
 80077c4:	2240      	movs	r2, #64	@ 0x40
 80077c6:	9b04      	ldr	r3, [sp, #16]
 80077c8:	eba0 000a 	sub.w	r0, r0, sl
 80077cc:	4082      	lsls	r2, r0
 80077ce:	4313      	orrs	r3, r2
 80077d0:	3401      	adds	r4, #1
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d8:	2206      	movs	r2, #6
 80077da:	4825      	ldr	r0, [pc, #148]	@ (8007870 <_svfiprintf_r+0x1ec>)
 80077dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077e0:	f000 fa08 	bl	8007bf4 <memchr>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d036      	beq.n	8007856 <_svfiprintf_r+0x1d2>
 80077e8:	4b22      	ldr	r3, [pc, #136]	@ (8007874 <_svfiprintf_r+0x1f0>)
 80077ea:	bb1b      	cbnz	r3, 8007834 <_svfiprintf_r+0x1b0>
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	3307      	adds	r3, #7
 80077f0:	f023 0307 	bic.w	r3, r3, #7
 80077f4:	3308      	adds	r3, #8
 80077f6:	9303      	str	r3, [sp, #12]
 80077f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077fa:	4433      	add	r3, r6
 80077fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80077fe:	e76a      	b.n	80076d6 <_svfiprintf_r+0x52>
 8007800:	460c      	mov	r4, r1
 8007802:	2001      	movs	r0, #1
 8007804:	fb0c 3202 	mla	r2, ip, r2, r3
 8007808:	e7a8      	b.n	800775c <_svfiprintf_r+0xd8>
 800780a:	2300      	movs	r3, #0
 800780c:	f04f 0c0a 	mov.w	ip, #10
 8007810:	4619      	mov	r1, r3
 8007812:	3401      	adds	r4, #1
 8007814:	9305      	str	r3, [sp, #20]
 8007816:	4620      	mov	r0, r4
 8007818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800781c:	3a30      	subs	r2, #48	@ 0x30
 800781e:	2a09      	cmp	r2, #9
 8007820:	d903      	bls.n	800782a <_svfiprintf_r+0x1a6>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0c6      	beq.n	80077b4 <_svfiprintf_r+0x130>
 8007826:	9105      	str	r1, [sp, #20]
 8007828:	e7c4      	b.n	80077b4 <_svfiprintf_r+0x130>
 800782a:	4604      	mov	r4, r0
 800782c:	2301      	movs	r3, #1
 800782e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007832:	e7f0      	b.n	8007816 <_svfiprintf_r+0x192>
 8007834:	ab03      	add	r3, sp, #12
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	462a      	mov	r2, r5
 800783a:	4638      	mov	r0, r7
 800783c:	4b0e      	ldr	r3, [pc, #56]	@ (8007878 <_svfiprintf_r+0x1f4>)
 800783e:	a904      	add	r1, sp, #16
 8007840:	f3af 8000 	nop.w
 8007844:	1c42      	adds	r2, r0, #1
 8007846:	4606      	mov	r6, r0
 8007848:	d1d6      	bne.n	80077f8 <_svfiprintf_r+0x174>
 800784a:	89ab      	ldrh	r3, [r5, #12]
 800784c:	065b      	lsls	r3, r3, #25
 800784e:	f53f af2d 	bmi.w	80076ac <_svfiprintf_r+0x28>
 8007852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007854:	e72c      	b.n	80076b0 <_svfiprintf_r+0x2c>
 8007856:	ab03      	add	r3, sp, #12
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	462a      	mov	r2, r5
 800785c:	4638      	mov	r0, r7
 800785e:	4b06      	ldr	r3, [pc, #24]	@ (8007878 <_svfiprintf_r+0x1f4>)
 8007860:	a904      	add	r1, sp, #16
 8007862:	f000 f87d 	bl	8007960 <_printf_i>
 8007866:	e7ed      	b.n	8007844 <_svfiprintf_r+0x1c0>
 8007868:	08007d2e 	.word	0x08007d2e
 800786c:	08007d34 	.word	0x08007d34
 8007870:	08007d38 	.word	0x08007d38
 8007874:	00000000 	.word	0x00000000
 8007878:	080075cd 	.word	0x080075cd

0800787c <_printf_common>:
 800787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007880:	4616      	mov	r6, r2
 8007882:	4698      	mov	r8, r3
 8007884:	688a      	ldr	r2, [r1, #8]
 8007886:	690b      	ldr	r3, [r1, #16]
 8007888:	4607      	mov	r7, r0
 800788a:	4293      	cmp	r3, r2
 800788c:	bfb8      	it	lt
 800788e:	4613      	movlt	r3, r2
 8007890:	6033      	str	r3, [r6, #0]
 8007892:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007896:	460c      	mov	r4, r1
 8007898:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800789c:	b10a      	cbz	r2, 80078a2 <_printf_common+0x26>
 800789e:	3301      	adds	r3, #1
 80078a0:	6033      	str	r3, [r6, #0]
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	0699      	lsls	r1, r3, #26
 80078a6:	bf42      	ittt	mi
 80078a8:	6833      	ldrmi	r3, [r6, #0]
 80078aa:	3302      	addmi	r3, #2
 80078ac:	6033      	strmi	r3, [r6, #0]
 80078ae:	6825      	ldr	r5, [r4, #0]
 80078b0:	f015 0506 	ands.w	r5, r5, #6
 80078b4:	d106      	bne.n	80078c4 <_printf_common+0x48>
 80078b6:	f104 0a19 	add.w	sl, r4, #25
 80078ba:	68e3      	ldr	r3, [r4, #12]
 80078bc:	6832      	ldr	r2, [r6, #0]
 80078be:	1a9b      	subs	r3, r3, r2
 80078c0:	42ab      	cmp	r3, r5
 80078c2:	dc2b      	bgt.n	800791c <_printf_common+0xa0>
 80078c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078c8:	6822      	ldr	r2, [r4, #0]
 80078ca:	3b00      	subs	r3, #0
 80078cc:	bf18      	it	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	0692      	lsls	r2, r2, #26
 80078d2:	d430      	bmi.n	8007936 <_printf_common+0xba>
 80078d4:	4641      	mov	r1, r8
 80078d6:	4638      	mov	r0, r7
 80078d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078dc:	47c8      	blx	r9
 80078de:	3001      	adds	r0, #1
 80078e0:	d023      	beq.n	800792a <_printf_common+0xae>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	6922      	ldr	r2, [r4, #16]
 80078e6:	f003 0306 	and.w	r3, r3, #6
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	bf14      	ite	ne
 80078ee:	2500      	movne	r5, #0
 80078f0:	6833      	ldreq	r3, [r6, #0]
 80078f2:	f04f 0600 	mov.w	r6, #0
 80078f6:	bf08      	it	eq
 80078f8:	68e5      	ldreq	r5, [r4, #12]
 80078fa:	f104 041a 	add.w	r4, r4, #26
 80078fe:	bf08      	it	eq
 8007900:	1aed      	subeq	r5, r5, r3
 8007902:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007906:	bf08      	it	eq
 8007908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800790c:	4293      	cmp	r3, r2
 800790e:	bfc4      	itt	gt
 8007910:	1a9b      	subgt	r3, r3, r2
 8007912:	18ed      	addgt	r5, r5, r3
 8007914:	42b5      	cmp	r5, r6
 8007916:	d11a      	bne.n	800794e <_printf_common+0xd2>
 8007918:	2000      	movs	r0, #0
 800791a:	e008      	b.n	800792e <_printf_common+0xb2>
 800791c:	2301      	movs	r3, #1
 800791e:	4652      	mov	r2, sl
 8007920:	4641      	mov	r1, r8
 8007922:	4638      	mov	r0, r7
 8007924:	47c8      	blx	r9
 8007926:	3001      	adds	r0, #1
 8007928:	d103      	bne.n	8007932 <_printf_common+0xb6>
 800792a:	f04f 30ff 	mov.w	r0, #4294967295
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	3501      	adds	r5, #1
 8007934:	e7c1      	b.n	80078ba <_printf_common+0x3e>
 8007936:	2030      	movs	r0, #48	@ 0x30
 8007938:	18e1      	adds	r1, r4, r3
 800793a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007944:	4422      	add	r2, r4
 8007946:	3302      	adds	r3, #2
 8007948:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800794c:	e7c2      	b.n	80078d4 <_printf_common+0x58>
 800794e:	2301      	movs	r3, #1
 8007950:	4622      	mov	r2, r4
 8007952:	4641      	mov	r1, r8
 8007954:	4638      	mov	r0, r7
 8007956:	47c8      	blx	r9
 8007958:	3001      	adds	r0, #1
 800795a:	d0e6      	beq.n	800792a <_printf_common+0xae>
 800795c:	3601      	adds	r6, #1
 800795e:	e7d9      	b.n	8007914 <_printf_common+0x98>

08007960 <_printf_i>:
 8007960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007964:	7e0f      	ldrb	r7, [r1, #24]
 8007966:	4691      	mov	r9, r2
 8007968:	2f78      	cmp	r7, #120	@ 0x78
 800796a:	4680      	mov	r8, r0
 800796c:	460c      	mov	r4, r1
 800796e:	469a      	mov	sl, r3
 8007970:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007976:	d807      	bhi.n	8007988 <_printf_i+0x28>
 8007978:	2f62      	cmp	r7, #98	@ 0x62
 800797a:	d80a      	bhi.n	8007992 <_printf_i+0x32>
 800797c:	2f00      	cmp	r7, #0
 800797e:	f000 80d3 	beq.w	8007b28 <_printf_i+0x1c8>
 8007982:	2f58      	cmp	r7, #88	@ 0x58
 8007984:	f000 80ba 	beq.w	8007afc <_printf_i+0x19c>
 8007988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800798c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007990:	e03a      	b.n	8007a08 <_printf_i+0xa8>
 8007992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007996:	2b15      	cmp	r3, #21
 8007998:	d8f6      	bhi.n	8007988 <_printf_i+0x28>
 800799a:	a101      	add	r1, pc, #4	@ (adr r1, 80079a0 <_printf_i+0x40>)
 800799c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079a0:	080079f9 	.word	0x080079f9
 80079a4:	08007a0d 	.word	0x08007a0d
 80079a8:	08007989 	.word	0x08007989
 80079ac:	08007989 	.word	0x08007989
 80079b0:	08007989 	.word	0x08007989
 80079b4:	08007989 	.word	0x08007989
 80079b8:	08007a0d 	.word	0x08007a0d
 80079bc:	08007989 	.word	0x08007989
 80079c0:	08007989 	.word	0x08007989
 80079c4:	08007989 	.word	0x08007989
 80079c8:	08007989 	.word	0x08007989
 80079cc:	08007b0f 	.word	0x08007b0f
 80079d0:	08007a37 	.word	0x08007a37
 80079d4:	08007ac9 	.word	0x08007ac9
 80079d8:	08007989 	.word	0x08007989
 80079dc:	08007989 	.word	0x08007989
 80079e0:	08007b31 	.word	0x08007b31
 80079e4:	08007989 	.word	0x08007989
 80079e8:	08007a37 	.word	0x08007a37
 80079ec:	08007989 	.word	0x08007989
 80079f0:	08007989 	.word	0x08007989
 80079f4:	08007ad1 	.word	0x08007ad1
 80079f8:	6833      	ldr	r3, [r6, #0]
 80079fa:	1d1a      	adds	r2, r3, #4
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6032      	str	r2, [r6, #0]
 8007a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e09e      	b.n	8007b4a <_printf_i+0x1ea>
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	6820      	ldr	r0, [r4, #0]
 8007a10:	1d19      	adds	r1, r3, #4
 8007a12:	6031      	str	r1, [r6, #0]
 8007a14:	0606      	lsls	r6, r0, #24
 8007a16:	d501      	bpl.n	8007a1c <_printf_i+0xbc>
 8007a18:	681d      	ldr	r5, [r3, #0]
 8007a1a:	e003      	b.n	8007a24 <_printf_i+0xc4>
 8007a1c:	0645      	lsls	r5, r0, #25
 8007a1e:	d5fb      	bpl.n	8007a18 <_printf_i+0xb8>
 8007a20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a24:	2d00      	cmp	r5, #0
 8007a26:	da03      	bge.n	8007a30 <_printf_i+0xd0>
 8007a28:	232d      	movs	r3, #45	@ 0x2d
 8007a2a:	426d      	negs	r5, r5
 8007a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a30:	230a      	movs	r3, #10
 8007a32:	4859      	ldr	r0, [pc, #356]	@ (8007b98 <_printf_i+0x238>)
 8007a34:	e011      	b.n	8007a5a <_printf_i+0xfa>
 8007a36:	6821      	ldr	r1, [r4, #0]
 8007a38:	6833      	ldr	r3, [r6, #0]
 8007a3a:	0608      	lsls	r0, r1, #24
 8007a3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a40:	d402      	bmi.n	8007a48 <_printf_i+0xe8>
 8007a42:	0649      	lsls	r1, r1, #25
 8007a44:	bf48      	it	mi
 8007a46:	b2ad      	uxthmi	r5, r5
 8007a48:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a4a:	6033      	str	r3, [r6, #0]
 8007a4c:	bf14      	ite	ne
 8007a4e:	230a      	movne	r3, #10
 8007a50:	2308      	moveq	r3, #8
 8007a52:	4851      	ldr	r0, [pc, #324]	@ (8007b98 <_printf_i+0x238>)
 8007a54:	2100      	movs	r1, #0
 8007a56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a5a:	6866      	ldr	r6, [r4, #4]
 8007a5c:	2e00      	cmp	r6, #0
 8007a5e:	bfa8      	it	ge
 8007a60:	6821      	ldrge	r1, [r4, #0]
 8007a62:	60a6      	str	r6, [r4, #8]
 8007a64:	bfa4      	itt	ge
 8007a66:	f021 0104 	bicge.w	r1, r1, #4
 8007a6a:	6021      	strge	r1, [r4, #0]
 8007a6c:	b90d      	cbnz	r5, 8007a72 <_printf_i+0x112>
 8007a6e:	2e00      	cmp	r6, #0
 8007a70:	d04b      	beq.n	8007b0a <_printf_i+0x1aa>
 8007a72:	4616      	mov	r6, r2
 8007a74:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a78:	fb03 5711 	mls	r7, r3, r1, r5
 8007a7c:	5dc7      	ldrb	r7, [r0, r7]
 8007a7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a82:	462f      	mov	r7, r5
 8007a84:	42bb      	cmp	r3, r7
 8007a86:	460d      	mov	r5, r1
 8007a88:	d9f4      	bls.n	8007a74 <_printf_i+0x114>
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d10b      	bne.n	8007aa6 <_printf_i+0x146>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	07df      	lsls	r7, r3, #31
 8007a92:	d508      	bpl.n	8007aa6 <_printf_i+0x146>
 8007a94:	6923      	ldr	r3, [r4, #16]
 8007a96:	6861      	ldr	r1, [r4, #4]
 8007a98:	4299      	cmp	r1, r3
 8007a9a:	bfde      	ittt	le
 8007a9c:	2330      	movle	r3, #48	@ 0x30
 8007a9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aa2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007aa6:	1b92      	subs	r2, r2, r6
 8007aa8:	6122      	str	r2, [r4, #16]
 8007aaa:	464b      	mov	r3, r9
 8007aac:	4621      	mov	r1, r4
 8007aae:	4640      	mov	r0, r8
 8007ab0:	f8cd a000 	str.w	sl, [sp]
 8007ab4:	aa03      	add	r2, sp, #12
 8007ab6:	f7ff fee1 	bl	800787c <_printf_common>
 8007aba:	3001      	adds	r0, #1
 8007abc:	d14a      	bne.n	8007b54 <_printf_i+0x1f4>
 8007abe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac2:	b004      	add	sp, #16
 8007ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	f043 0320 	orr.w	r3, r3, #32
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	2778      	movs	r7, #120	@ 0x78
 8007ad2:	4832      	ldr	r0, [pc, #200]	@ (8007b9c <_printf_i+0x23c>)
 8007ad4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	6831      	ldr	r1, [r6, #0]
 8007adc:	061f      	lsls	r7, r3, #24
 8007ade:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ae2:	d402      	bmi.n	8007aea <_printf_i+0x18a>
 8007ae4:	065f      	lsls	r7, r3, #25
 8007ae6:	bf48      	it	mi
 8007ae8:	b2ad      	uxthmi	r5, r5
 8007aea:	6031      	str	r1, [r6, #0]
 8007aec:	07d9      	lsls	r1, r3, #31
 8007aee:	bf44      	itt	mi
 8007af0:	f043 0320 	orrmi.w	r3, r3, #32
 8007af4:	6023      	strmi	r3, [r4, #0]
 8007af6:	b11d      	cbz	r5, 8007b00 <_printf_i+0x1a0>
 8007af8:	2310      	movs	r3, #16
 8007afa:	e7ab      	b.n	8007a54 <_printf_i+0xf4>
 8007afc:	4826      	ldr	r0, [pc, #152]	@ (8007b98 <_printf_i+0x238>)
 8007afe:	e7e9      	b.n	8007ad4 <_printf_i+0x174>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	f023 0320 	bic.w	r3, r3, #32
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	e7f6      	b.n	8007af8 <_printf_i+0x198>
 8007b0a:	4616      	mov	r6, r2
 8007b0c:	e7bd      	b.n	8007a8a <_printf_i+0x12a>
 8007b0e:	6833      	ldr	r3, [r6, #0]
 8007b10:	6825      	ldr	r5, [r4, #0]
 8007b12:	1d18      	adds	r0, r3, #4
 8007b14:	6961      	ldr	r1, [r4, #20]
 8007b16:	6030      	str	r0, [r6, #0]
 8007b18:	062e      	lsls	r6, r5, #24
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	d501      	bpl.n	8007b22 <_printf_i+0x1c2>
 8007b1e:	6019      	str	r1, [r3, #0]
 8007b20:	e002      	b.n	8007b28 <_printf_i+0x1c8>
 8007b22:	0668      	lsls	r0, r5, #25
 8007b24:	d5fb      	bpl.n	8007b1e <_printf_i+0x1be>
 8007b26:	8019      	strh	r1, [r3, #0]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4616      	mov	r6, r2
 8007b2c:	6123      	str	r3, [r4, #16]
 8007b2e:	e7bc      	b.n	8007aaa <_printf_i+0x14a>
 8007b30:	6833      	ldr	r3, [r6, #0]
 8007b32:	2100      	movs	r1, #0
 8007b34:	1d1a      	adds	r2, r3, #4
 8007b36:	6032      	str	r2, [r6, #0]
 8007b38:	681e      	ldr	r6, [r3, #0]
 8007b3a:	6862      	ldr	r2, [r4, #4]
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f000 f859 	bl	8007bf4 <memchr>
 8007b42:	b108      	cbz	r0, 8007b48 <_printf_i+0x1e8>
 8007b44:	1b80      	subs	r0, r0, r6
 8007b46:	6060      	str	r0, [r4, #4]
 8007b48:	6863      	ldr	r3, [r4, #4]
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b52:	e7aa      	b.n	8007aaa <_printf_i+0x14a>
 8007b54:	4632      	mov	r2, r6
 8007b56:	4649      	mov	r1, r9
 8007b58:	4640      	mov	r0, r8
 8007b5a:	6923      	ldr	r3, [r4, #16]
 8007b5c:	47d0      	blx	sl
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d0ad      	beq.n	8007abe <_printf_i+0x15e>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	079b      	lsls	r3, r3, #30
 8007b66:	d413      	bmi.n	8007b90 <_printf_i+0x230>
 8007b68:	68e0      	ldr	r0, [r4, #12]
 8007b6a:	9b03      	ldr	r3, [sp, #12]
 8007b6c:	4298      	cmp	r0, r3
 8007b6e:	bfb8      	it	lt
 8007b70:	4618      	movlt	r0, r3
 8007b72:	e7a6      	b.n	8007ac2 <_printf_i+0x162>
 8007b74:	2301      	movs	r3, #1
 8007b76:	4632      	mov	r2, r6
 8007b78:	4649      	mov	r1, r9
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	47d0      	blx	sl
 8007b7e:	3001      	adds	r0, #1
 8007b80:	d09d      	beq.n	8007abe <_printf_i+0x15e>
 8007b82:	3501      	adds	r5, #1
 8007b84:	68e3      	ldr	r3, [r4, #12]
 8007b86:	9903      	ldr	r1, [sp, #12]
 8007b88:	1a5b      	subs	r3, r3, r1
 8007b8a:	42ab      	cmp	r3, r5
 8007b8c:	dcf2      	bgt.n	8007b74 <_printf_i+0x214>
 8007b8e:	e7eb      	b.n	8007b68 <_printf_i+0x208>
 8007b90:	2500      	movs	r5, #0
 8007b92:	f104 0619 	add.w	r6, r4, #25
 8007b96:	e7f5      	b.n	8007b84 <_printf_i+0x224>
 8007b98:	08007d3f 	.word	0x08007d3f
 8007b9c:	08007d50 	.word	0x08007d50

08007ba0 <memmove>:
 8007ba0:	4288      	cmp	r0, r1
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	eb01 0402 	add.w	r4, r1, r2
 8007ba8:	d902      	bls.n	8007bb0 <memmove+0x10>
 8007baa:	4284      	cmp	r4, r0
 8007bac:	4623      	mov	r3, r4
 8007bae:	d807      	bhi.n	8007bc0 <memmove+0x20>
 8007bb0:	1e43      	subs	r3, r0, #1
 8007bb2:	42a1      	cmp	r1, r4
 8007bb4:	d008      	beq.n	8007bc8 <memmove+0x28>
 8007bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bbe:	e7f8      	b.n	8007bb2 <memmove+0x12>
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	4402      	add	r2, r0
 8007bc4:	428a      	cmp	r2, r1
 8007bc6:	d100      	bne.n	8007bca <memmove+0x2a>
 8007bc8:	bd10      	pop	{r4, pc}
 8007bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bd2:	e7f7      	b.n	8007bc4 <memmove+0x24>

08007bd4 <_sbrk_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	4d05      	ldr	r5, [pc, #20]	@ (8007bf0 <_sbrk_r+0x1c>)
 8007bda:	4604      	mov	r4, r0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	602b      	str	r3, [r5, #0]
 8007be0:	f7f8 fc1e 	bl	8000420 <_sbrk>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_sbrk_r+0x1a>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_sbrk_r+0x1a>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	200015ec 	.word	0x200015ec

08007bf4 <memchr>:
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	b510      	push	{r4, lr}
 8007bf8:	b2c9      	uxtb	r1, r1
 8007bfa:	4402      	add	r2, r0
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	d101      	bne.n	8007c06 <memchr+0x12>
 8007c02:	2000      	movs	r0, #0
 8007c04:	e003      	b.n	8007c0e <memchr+0x1a>
 8007c06:	7804      	ldrb	r4, [r0, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	428c      	cmp	r4, r1
 8007c0c:	d1f6      	bne.n	8007bfc <memchr+0x8>
 8007c0e:	bd10      	pop	{r4, pc}

08007c10 <memcpy>:
 8007c10:	440a      	add	r2, r1
 8007c12:	4291      	cmp	r1, r2
 8007c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c18:	d100      	bne.n	8007c1c <memcpy+0xc>
 8007c1a:	4770      	bx	lr
 8007c1c:	b510      	push	{r4, lr}
 8007c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c22:	4291      	cmp	r1, r2
 8007c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c28:	d1f9      	bne.n	8007c1e <memcpy+0xe>
 8007c2a:	bd10      	pop	{r4, pc}

08007c2c <_realloc_r>:
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	4680      	mov	r8, r0
 8007c32:	4615      	mov	r5, r2
 8007c34:	460c      	mov	r4, r1
 8007c36:	b921      	cbnz	r1, 8007c42 <_realloc_r+0x16>
 8007c38:	4611      	mov	r1, r2
 8007c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3e:	f7ff bc39 	b.w	80074b4 <_malloc_r>
 8007c42:	b92a      	cbnz	r2, 8007c50 <_realloc_r+0x24>
 8007c44:	f7ff fbcc 	bl	80073e0 <_free_r>
 8007c48:	2400      	movs	r4, #0
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c50:	f000 f81a 	bl	8007c88 <_malloc_usable_size_r>
 8007c54:	4285      	cmp	r5, r0
 8007c56:	4606      	mov	r6, r0
 8007c58:	d802      	bhi.n	8007c60 <_realloc_r+0x34>
 8007c5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c5e:	d8f4      	bhi.n	8007c4a <_realloc_r+0x1e>
 8007c60:	4629      	mov	r1, r5
 8007c62:	4640      	mov	r0, r8
 8007c64:	f7ff fc26 	bl	80074b4 <_malloc_r>
 8007c68:	4607      	mov	r7, r0
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d0ec      	beq.n	8007c48 <_realloc_r+0x1c>
 8007c6e:	42b5      	cmp	r5, r6
 8007c70:	462a      	mov	r2, r5
 8007c72:	4621      	mov	r1, r4
 8007c74:	bf28      	it	cs
 8007c76:	4632      	movcs	r2, r6
 8007c78:	f7ff ffca 	bl	8007c10 <memcpy>
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4640      	mov	r0, r8
 8007c80:	f7ff fbae 	bl	80073e0 <_free_r>
 8007c84:	463c      	mov	r4, r7
 8007c86:	e7e0      	b.n	8007c4a <_realloc_r+0x1e>

08007c88 <_malloc_usable_size_r>:
 8007c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8c:	1f18      	subs	r0, r3, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bfbc      	itt	lt
 8007c92:	580b      	ldrlt	r3, [r1, r0]
 8007c94:	18c0      	addlt	r0, r0, r3
 8007c96:	4770      	bx	lr

08007c98 <_init>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr

08007ca4 <_fini>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr
