
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004954  08004954  00005954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c8  080049c8  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  080049c8  080049c8  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049c8  080049c8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c8  080049c8  000059c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049cc  080049cc  000059cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080049d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  08004a38  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08004a38  00006284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fdb  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179f  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0000e810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000621  00000000  00000000  0000f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001782c  00000000  00000000  0000f641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3ed  00000000  00000000  00026e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f78  00000000  00000000  0003125a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b51d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002788  00000000  00000000  000b5218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b79a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800493c 	.word	0x0800493c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800493c 	.word	0x0800493c

0800014c <HAL_I2C_ListenCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000154:	6878      	ldr	r0, [r7, #4]
 8000156:	f001 f96f 	bl	8001438 <HAL_I2C_EnableListen_IT>
}
 800015a:	bf00      	nop
 800015c:	3708      	adds	r7, #8
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
	...

08000164 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
 800016c:	460b      	mov	r3, r1
 800016e:	70fb      	strb	r3, [r7, #3]
 8000170:	4613      	mov	r3, r2
 8000172:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8000174:	78fb      	ldrb	r3, [r7, #3]
 8000176:	2b01      	cmp	r3, #1
 8000178:	d106      	bne.n	8000188 <HAL_I2C_AddrCallback+0x24>
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, &I2CRecVal, 1, I2C_FIRST_AND_LAST_FRAME);
 800017a:	2308      	movs	r3, #8
 800017c:	2201      	movs	r2, #1
 800017e:	4907      	ldr	r1, [pc, #28]	@ (800019c <HAL_I2C_AddrCallback+0x38>)
 8000180:	6878      	ldr	r0, [r7, #4]
 8000182:	f001 f8e7 	bl	8001354 <HAL_I2C_Slave_Seq_Receive_IT>
	}
	else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
		Error_Handler();
	}
}
 8000186:	e004      	b.n	8000192 <HAL_I2C_AddrCallback+0x2e>
	else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 8000188:	78fb      	ldrb	r3, [r7, #3]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d101      	bne.n	8000192 <HAL_I2C_AddrCallback+0x2e>
		Error_Handler();
 800018e:	f000 f909 	bl	80003a4 <Error_Handler>
}
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	2000012d 	.word	0x2000012d

080001a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a6:	f000 fae1 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001aa:	f000 f835 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ae:	f000 f8cb 	bl	8000348 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001b2:	f000 f86d 	bl	8000290 <MX_I2C1_Init>
  MX_I2C2_Init();
 80001b6:	f000 f899 	bl	80002ec <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
#ifdef I2C_EXAMPLE_SLAVE
  HAL_I2C_EnableListen_IT(&hi2c2);
 80001ba:	4813      	ldr	r0, [pc, #76]	@ (8000208 <main+0x68>)
 80001bc:	f001 f93c 	bl	8001438 <HAL_I2C_EnableListen_IT>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  I2CSendVal = 0;
 80001c0:	4b12      	ldr	r3, [pc, #72]	@ (800020c <main+0x6c>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
#ifdef I2C_EXAMPLE_MASTER
	  // Nao esquecer de shiftar o endere√ßo 1 bit para a esquerdar (x << 1)
	  if (HAL_I2C_Master_Transmit(&hi2c1, (0x31 << 1), &I2CSendVal, sizeof(I2CSendVal), HAL_MAX_DELAY) == HAL_OK) {
 80001c6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ca:	9300      	str	r3, [sp, #0]
 80001cc:	2301      	movs	r3, #1
 80001ce:	4a0f      	ldr	r2, [pc, #60]	@ (800020c <main+0x6c>)
 80001d0:	2162      	movs	r1, #98	@ 0x62
 80001d2:	480f      	ldr	r0, [pc, #60]	@ (8000210 <main+0x70>)
 80001d4:	f000 ffc0 	bl	8001158 <HAL_I2C_Master_Transmit>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d10c      	bne.n	80001f8 <main+0x58>
		  printf("Master: Enviado %d\n", I2CSendVal); // Opcional para debug
 80001de:	4b0b      	ldr	r3, [pc, #44]	@ (800020c <main+0x6c>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4619      	mov	r1, r3
 80001e4:	480b      	ldr	r0, [pc, #44]	@ (8000214 <main+0x74>)
 80001e6:	f003 fd31 	bl	8003c4c <iprintf>
		  I2CSendVal++;
 80001ea:	4b08      	ldr	r3, [pc, #32]	@ (800020c <main+0x6c>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	3301      	adds	r3, #1
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4b06      	ldr	r3, [pc, #24]	@ (800020c <main+0x6c>)
 80001f4:	701a      	strb	r2, [r3, #0]
 80001f6:	e001      	b.n	80001fc <main+0x5c>
	  } else {
		  Error_Handler();
 80001f8:	f000 f8d4 	bl	80003a4 <Error_Handler>
	  }
	  HAL_Delay(500);
 80001fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000200:	f000 fb16 	bl	8000830 <HAL_Delay>
	  if (HAL_I2C_Master_Transmit(&hi2c1, (0x31 << 1), &I2CSendVal, sizeof(I2CSendVal), HAL_MAX_DELAY) == HAL_OK) {
 8000204:	e7df      	b.n	80001c6 <main+0x26>
 8000206:	bf00      	nop
 8000208:	200000d8 	.word	0x200000d8
 800020c:	2000012c 	.word	0x2000012c
 8000210:	20000084 	.word	0x20000084
 8000214:	08004954 	.word	0x08004954

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	@ 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fd65 	bl	8003cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000246:	2300      	movs	r3, #0
 8000248:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	4618      	mov	r0, r3
 8000250:	f003 f83e 	bl	80032d0 <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800025a:	f000 f8a3 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f003 faac 	bl	80037d4 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000282:	f000 f88f 	bl	80003a4 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	@ 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000294:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <MX_I2C1_Init+0x50>)
 8000296:	4a13      	ldr	r2, [pc, #76]	@ (80002e4 <MX_I2C1_Init+0x54>)
 8000298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800029a:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <MX_I2C1_Init+0x50>)
 800029c:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <MX_I2C1_Init+0x58>)
 800029e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <MX_I2C1_Init+0x50>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <MX_I2C1_Init+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	@ (80002e0 <MX_I2C1_Init+0x50>)
 80002ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <MX_I2C1_Init+0x50>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <MX_I2C1_Init+0x50>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <MX_I2C1_Init+0x50>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002c6:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <MX_I2C1_Init+0x50>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002cc:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <MX_I2C1_Init+0x50>)
 80002ce:	f000 fdeb 	bl	8000ea8 <HAL_I2C_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002d8:	f000 f864 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000084 	.word	0x20000084
 80002e4:	40005400 	.word	0x40005400
 80002e8:	00061a80 	.word	0x00061a80

080002ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <MX_I2C2_Init+0x50>)
 80002f2:	4a13      	ldr	r2, [pc, #76]	@ (8000340 <MX_I2C2_Init+0x54>)
 80002f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_I2C2_Init+0x50>)
 80002f8:	4a12      	ldr	r2, [pc, #72]	@ (8000344 <MX_I2C2_Init+0x58>)
 80002fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_I2C2_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 98;
 8000302:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <MX_I2C2_Init+0x50>)
 8000304:	2262      	movs	r2, #98	@ 0x62
 8000306:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <MX_I2C2_Init+0x50>)
 800030a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800030e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000310:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <MX_I2C2_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000316:	4b09      	ldr	r3, [pc, #36]	@ (800033c <MX_I2C2_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031c:	4b07      	ldr	r3, [pc, #28]	@ (800033c <MX_I2C2_Init+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000322:	4b06      	ldr	r3, [pc, #24]	@ (800033c <MX_I2C2_Init+0x50>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000328:	4804      	ldr	r0, [pc, #16]	@ (800033c <MX_I2C2_Init+0x50>)
 800032a:	f000 fdbd 	bl	8000ea8 <HAL_I2C_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000334:	f000 f836 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	200000d8 	.word	0x200000d8
 8000340:	40005800 	.word	0x40005800
 8000344:	00061a80 	.word	0x00061a80

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034e:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a13      	ldr	r2, [pc, #76]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000354:	f043 0320 	orr.w	r3, r3, #32
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <MX_GPIO_Init+0x58>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0320 	and.w	r3, r3, #32
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <MX_GPIO_Init+0x58>)
 800036c:	f043 0308 	orr.w	r3, r3, #8
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0308 	and.w	r3, r3, #8
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a07      	ldr	r2, [pc, #28]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b05      	ldr	r3, [pc, #20]	@ (80003a0 <MX_GPIO_Init+0x58>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <Error_Handler+0x8>

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b15      	ldr	r3, [pc, #84]	@ (800040c <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a14      	ldr	r2, [pc, #80]	@ (800040c <HAL_MspInit+0x5c>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	@ (800040c <HAL_MspInit+0x5c>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <HAL_MspInit+0x60>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	4a04      	ldr	r2, [pc, #16]	@ (8000410 <HAL_MspInit+0x60>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	40010000 	.word	0x40010000

08000414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	@ 0x28
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 0318 	add.w	r3, r7, #24
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a3b      	ldr	r2, [pc, #236]	@ (800051c <HAL_I2C_MspInit+0x108>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d134      	bne.n	800049e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000434:	4b3a      	ldr	r3, [pc, #232]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a39      	ldr	r2, [pc, #228]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b37      	ldr	r3, [pc, #220]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	617b      	str	r3, [r7, #20]
 800044a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800044c:	23c0      	movs	r3, #192	@ 0xc0
 800044e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000450:	2312      	movs	r3, #18
 8000452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000454:	2303      	movs	r3, #3
 8000456:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	f107 0318 	add.w	r3, r7, #24
 800045c:	4619      	mov	r1, r3
 800045e:	4831      	ldr	r0, [pc, #196]	@ (8000524 <HAL_I2C_MspInit+0x110>)
 8000460:	f000 fb9e 	bl	8000ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000464:	4b2e      	ldr	r3, [pc, #184]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 8000466:	69db      	ldr	r3, [r3, #28]
 8000468:	4a2d      	ldr	r2, [pc, #180]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 800046a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800046e:	61d3      	str	r3, [r2, #28]
 8000470:	4b2b      	ldr	r3, [pc, #172]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000478:	613b      	str	r3, [r7, #16]
 800047a:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	2100      	movs	r1, #0
 8000480:	201f      	movs	r0, #31
 8000482:	f000 fad0 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000486:	201f      	movs	r0, #31
 8000488:	f000 fae9 	bl	8000a5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2100      	movs	r1, #0
 8000490:	2020      	movs	r0, #32
 8000492:	f000 fac8 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000496:	2020      	movs	r0, #32
 8000498:	f000 fae1 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800049c:	e039      	b.n	8000512 <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a21      	ldr	r2, [pc, #132]	@ (8000528 <HAL_I2C_MspInit+0x114>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d134      	bne.n	8000512 <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0308 	and.w	r3, r3, #8
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004c0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80004c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004c6:	2312      	movs	r3, #18
 80004c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ca:	2303      	movs	r3, #3
 80004cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	4619      	mov	r1, r3
 80004d4:	4813      	ldr	r0, [pc, #76]	@ (8000524 <HAL_I2C_MspInit+0x110>)
 80004d6:	f000 fb63 	bl	8000ba0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004da:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a10      	ldr	r2, [pc, #64]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 80004e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <HAL_I2C_MspInit+0x10c>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	2021      	movs	r0, #33	@ 0x21
 80004f8:	f000 fa95 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80004fc:	2021      	movs	r0, #33	@ 0x21
 80004fe:	f000 faae 	bl	8000a5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	2022      	movs	r0, #34	@ 0x22
 8000508:	f000 fa8d 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800050c:	2022      	movs	r0, #34	@ 0x22
 800050e:	f000 faa6 	bl	8000a5e <HAL_NVIC_EnableIRQ>
}
 8000512:	bf00      	nop
 8000514:	3728      	adds	r7, #40	@ 0x28
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40005400 	.word	0x40005400
 8000520:	40021000 	.word	0x40021000
 8000524:	40010c00 	.word	0x40010c00
 8000528:	40005800 	.word	0x40005800

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <NMI_Handler+0x4>

08000534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <MemManage_Handler+0x4>

08000544 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <UsageFault_Handler+0x4>

08000554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 f93c 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000588:	4802      	ldr	r0, [pc, #8]	@ (8000594 <I2C1_EV_IRQHandler+0x10>)
 800058a:	f000 ff8a 	bl	80014a2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000084 	.word	0x20000084

08000598 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800059c:	4802      	ldr	r0, [pc, #8]	@ (80005a8 <I2C1_ER_IRQHandler+0x10>)
 800059e:	f001 f8d3 	bl	8001748 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000084 	.word	0x20000084

080005ac <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <I2C2_EV_IRQHandler+0x10>)
 80005b2:	f000 ff76 	bl	80014a2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000d8 	.word	0x200000d8

080005c0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <I2C2_ER_IRQHandler+0x10>)
 80005c6:	f001 f8bf 	bl	8001748 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000d8 	.word	0x200000d8

080005d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	e00a      	b.n	80005fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005e6:	f3af 8000 	nop.w
 80005ea:	4601      	mov	r1, r0
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	60ba      	str	r2, [r7, #8]
 80005f2:	b2ca      	uxtb	r2, r1
 80005f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf0      	blt.n	80005e6 <_read+0x12>
  }

  return len;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	e009      	b.n	8000634 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	60ba      	str	r2, [r7, #8]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	3301      	adds	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	697a      	ldr	r2, [r7, #20]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	429a      	cmp	r2, r3
 800063a:	dbf1      	blt.n	8000620 <_write+0x12>
  }
  return len;
 800063c:	687b      	ldr	r3, [r7, #4]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <_close>:

int _close(int file)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800066c:	605a      	str	r2, [r3, #4]
  return 0;
 800066e:	2300      	movs	r3, #0
}
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <_isatty>:

int _isatty(int file)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800068e:	b480      	push	{r7}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
	...

080006a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b0:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <_sbrk+0x5c>)
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <_sbrk+0x60>)
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <_sbrk+0x64>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d102      	bne.n	80006ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <_sbrk+0x64>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <_sbrk+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d207      	bcs.n	80006e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d8:	f003 fb5c 	bl	8003d94 <__errno>
 80006dc:	4603      	mov	r3, r0
 80006de:	220c      	movs	r2, #12
 80006e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	e009      	b.n	80006fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	4a05      	ldr	r2, [pc, #20]	@ (800070c <_sbrk+0x64>)
 80006f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20005000 	.word	0x20005000
 8000708:	00000400 	.word	0x00000400
 800070c:	20000130 	.word	0x20000130
 8000710:	20000288 	.word	0x20000288

08000714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000720:	f7ff fff8 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480b      	ldr	r0, [pc, #44]	@ (8000754 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000726:	490c      	ldr	r1, [pc, #48]	@ (8000758 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000728:	4a0c      	ldr	r2, [pc, #48]	@ (800075c <LoopFillZerobss+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a09      	ldr	r2, [pc, #36]	@ (8000760 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800073c:	4c09      	ldr	r4, [pc, #36]	@ (8000764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800074a:	f003 fb29 	bl	8003da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074e:	f7ff fd27 	bl	80001a0 <main>
  bx lr
 8000752:	4770      	bx	lr
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800075c:	080049d0 	.word	0x080049d0
  ldr r2, =_sbss
 8000760:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000764:	20000284 	.word	0x20000284

08000768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_2_IRQHandler>
	...

0800076c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <HAL_Init+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a07      	ldr	r2, [pc, #28]	@ (8000794 <HAL_Init+0x28>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 f947 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000782:	200f      	movs	r0, #15
 8000784:	f000 f808 	bl	8000798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000788:	f7ff fe12 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40022000 	.word	0x40022000

08000798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <HAL_InitTick+0x54>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <HAL_InitTick+0x58>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f95f 	bl	8000a7a <HAL_SYSTICK_Config>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e00e      	b.n	80007e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d80a      	bhi.n	80007e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007cc:	2200      	movs	r2, #0
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	f000 f927 	bl	8000a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d8:	4a06      	ldr	r2, [pc, #24]	@ (80007f4 <HAL_InitTick+0x5c>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007de:	2300      	movs	r3, #0
 80007e0:	e000      	b.n	80007e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_IncTick+0x1c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <HAL_IncTick+0x20>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a03      	ldr	r2, [pc, #12]	@ (8000818 <HAL_IncTick+0x20>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	20000008 	.word	0x20000008
 8000818:	20000134 	.word	0x20000134

0800081c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b02      	ldr	r3, [pc, #8]	@ (800082c <HAL_GetTick+0x10>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000134 	.word	0x20000134

08000830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000838:	f7ff fff0 	bl	800081c <HAL_GetTick>
 800083c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000848:	d005      	beq.n	8000856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <HAL_Delay+0x44>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	461a      	mov	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4413      	add	r3, r2
 8000854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000856:	bf00      	nop
 8000858:	f7ff ffe0 	bl	800081c <HAL_GetTick>
 800085c:	4602      	mov	r2, r0
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	429a      	cmp	r2, r3
 8000866:	d8f7      	bhi.n	8000858 <HAL_Delay+0x28>
  {
  }
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4906      	ldr	r1, [pc, #24]	@ (8000910 <__NVIC_EnableIRQ+0x34>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100

08000914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db0a      	blt.n	800093e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	490c      	ldr	r1, [pc, #48]	@ (8000960 <__NVIC_SetPriority+0x4c>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	440b      	add	r3, r1
 8000938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800093c:	e00a      	b.n	8000954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4908      	ldr	r1, [pc, #32]	@ (8000964 <__NVIC_SetPriority+0x50>)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	3b04      	subs	r3, #4
 800094c:	0112      	lsls	r2, r2, #4
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	440b      	add	r3, r1
 8000952:	761a      	strb	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	@ 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f1c3 0307 	rsb	r3, r3, #7
 8000982:	2b04      	cmp	r3, #4
 8000984:	bf28      	it	cs
 8000986:	2304      	movcs	r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3304      	adds	r3, #4
 800098e:	2b06      	cmp	r3, #6
 8000990:	d902      	bls.n	8000998 <NVIC_EncodePriority+0x30>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3b03      	subs	r3, #3
 8000996:	e000      	b.n	800099a <NVIC_EncodePriority+0x32>
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	f04f 32ff 	mov.w	r2, #4294967295
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43d9      	mvns	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	4313      	orrs	r3, r2
         );
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3724      	adds	r7, #36	@ 0x24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009dc:	d301      	bcc.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e00f      	b.n	8000a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <SysTick_Config+0x40>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	210f      	movs	r1, #15
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f7ff ff90 	bl	8000914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <SysTick_Config+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <SysTick_Config+0x40>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff2d 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff42 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff90 	bl	8000968 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5f 	bl	8000914 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff35 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffa2 	bl	80009cc <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d005      	beq.n	8000ab8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2204      	movs	r2, #4
 8000ab0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	73fb      	strb	r3, [r7, #15]
 8000ab6:	e051      	b.n	8000b5c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f022 020e 	bic.w	r2, r2, #14
 8000ac6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f022 0201 	bic.w	r2, r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a22      	ldr	r2, [pc, #136]	@ (8000b68 <HAL_DMA_Abort_IT+0xd4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d029      	beq.n	8000b36 <HAL_DMA_Abort_IT+0xa2>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a21      	ldr	r2, [pc, #132]	@ (8000b6c <HAL_DMA_Abort_IT+0xd8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d022      	beq.n	8000b32 <HAL_DMA_Abort_IT+0x9e>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b70 <HAL_DMA_Abort_IT+0xdc>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d01a      	beq.n	8000b2c <HAL_DMA_Abort_IT+0x98>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a1e      	ldr	r2, [pc, #120]	@ (8000b74 <HAL_DMA_Abort_IT+0xe0>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d012      	beq.n	8000b26 <HAL_DMA_Abort_IT+0x92>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1c      	ldr	r2, [pc, #112]	@ (8000b78 <HAL_DMA_Abort_IT+0xe4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d00a      	beq.n	8000b20 <HAL_DMA_Abort_IT+0x8c>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b7c <HAL_DMA_Abort_IT+0xe8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d102      	bne.n	8000b1a <HAL_DMA_Abort_IT+0x86>
 8000b14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b18:	e00e      	b.n	8000b38 <HAL_DMA_Abort_IT+0xa4>
 8000b1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b1e:	e00b      	b.n	8000b38 <HAL_DMA_Abort_IT+0xa4>
 8000b20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b24:	e008      	b.n	8000b38 <HAL_DMA_Abort_IT+0xa4>
 8000b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2a:	e005      	b.n	8000b38 <HAL_DMA_Abort_IT+0xa4>
 8000b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b30:	e002      	b.n	8000b38 <HAL_DMA_Abort_IT+0xa4>
 8000b32:	2310      	movs	r3, #16
 8000b34:	e000      	b.n	8000b38 <HAL_DMA_Abort_IT+0xa4>
 8000b36:	2301      	movs	r3, #1
 8000b38:	4a11      	ldr	r2, [pc, #68]	@ (8000b80 <HAL_DMA_Abort_IT+0xec>)
 8000b3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	4798      	blx	r3
    } 
  }
  return status;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40020008 	.word	0x40020008
 8000b6c:	4002001c 	.word	0x4002001c
 8000b70:	40020030 	.word	0x40020030
 8000b74:	40020044 	.word	0x40020044
 8000b78:	40020058 	.word	0x40020058
 8000b7c:	4002006c 	.word	0x4002006c
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b92:	b2db      	uxtb	r3, r3
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
	...

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b08b      	sub	sp, #44	@ 0x2c
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb2:	e169      	b.n	8000e88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	f040 8158 	bne.w	8000e82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	4a9a      	ldr	r2, [pc, #616]	@ (8000e40 <HAL_GPIO_Init+0x2a0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d05e      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
 8000bdc:	4a98      	ldr	r2, [pc, #608]	@ (8000e40 <HAL_GPIO_Init+0x2a0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d875      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000be2:	4a98      	ldr	r2, [pc, #608]	@ (8000e44 <HAL_GPIO_Init+0x2a4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d058      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
 8000be8:	4a96      	ldr	r2, [pc, #600]	@ (8000e44 <HAL_GPIO_Init+0x2a4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d86f      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000bee:	4a96      	ldr	r2, [pc, #600]	@ (8000e48 <HAL_GPIO_Init+0x2a8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d052      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
 8000bf4:	4a94      	ldr	r2, [pc, #592]	@ (8000e48 <HAL_GPIO_Init+0x2a8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d869      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000bfa:	4a94      	ldr	r2, [pc, #592]	@ (8000e4c <HAL_GPIO_Init+0x2ac>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d04c      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
 8000c00:	4a92      	ldr	r2, [pc, #584]	@ (8000e4c <HAL_GPIO_Init+0x2ac>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d863      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000c06:	4a92      	ldr	r2, [pc, #584]	@ (8000e50 <HAL_GPIO_Init+0x2b0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d046      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
 8000c0c:	4a90      	ldr	r2, [pc, #576]	@ (8000e50 <HAL_GPIO_Init+0x2b0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d85d      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000c12:	2b12      	cmp	r3, #18
 8000c14:	d82a      	bhi.n	8000c6c <HAL_GPIO_Init+0xcc>
 8000c16:	2b12      	cmp	r3, #18
 8000c18:	d859      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c20 <HAL_GPIO_Init+0x80>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000c9b 	.word	0x08000c9b
 8000c24:	08000c75 	.word	0x08000c75
 8000c28:	08000c87 	.word	0x08000c87
 8000c2c:	08000cc9 	.word	0x08000cc9
 8000c30:	08000ccf 	.word	0x08000ccf
 8000c34:	08000ccf 	.word	0x08000ccf
 8000c38:	08000ccf 	.word	0x08000ccf
 8000c3c:	08000ccf 	.word	0x08000ccf
 8000c40:	08000ccf 	.word	0x08000ccf
 8000c44:	08000ccf 	.word	0x08000ccf
 8000c48:	08000ccf 	.word	0x08000ccf
 8000c4c:	08000ccf 	.word	0x08000ccf
 8000c50:	08000ccf 	.word	0x08000ccf
 8000c54:	08000ccf 	.word	0x08000ccf
 8000c58:	08000ccf 	.word	0x08000ccf
 8000c5c:	08000ccf 	.word	0x08000ccf
 8000c60:	08000ccf 	.word	0x08000ccf
 8000c64:	08000c7d 	.word	0x08000c7d
 8000c68:	08000c91 	.word	0x08000c91
 8000c6c:	4a79      	ldr	r2, [pc, #484]	@ (8000e54 <HAL_GPIO_Init+0x2b4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d013      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c72:	e02c      	b.n	8000cce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	623b      	str	r3, [r7, #32]
          break;
 8000c7a:	e029      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	3304      	adds	r3, #4
 8000c82:	623b      	str	r3, [r7, #32]
          break;
 8000c84:	e024      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	623b      	str	r3, [r7, #32]
          break;
 8000c8e:	e01f      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	330c      	adds	r3, #12
 8000c96:	623b      	str	r3, [r7, #32]
          break;
 8000c98:	e01a      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	623b      	str	r3, [r7, #32]
          break;
 8000ca6:	e013      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d105      	bne.n	8000cbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69fa      	ldr	r2, [r7, #28]
 8000cb8:	611a      	str	r2, [r3, #16]
          break;
 8000cba:	e009      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	615a      	str	r2, [r3, #20]
          break;
 8000cc6:	e003      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
          break;
 8000ccc:	e000      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          break;
 8000cce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2bff      	cmp	r3, #255	@ 0xff
 8000cd4:	d801      	bhi.n	8000cda <HAL_GPIO_Init+0x13a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	e001      	b.n	8000cde <HAL_GPIO_Init+0x13e>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	2bff      	cmp	r3, #255	@ 0xff
 8000ce4:	d802      	bhi.n	8000cec <HAL_GPIO_Init+0x14c>
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	e002      	b.n	8000cf2 <HAL_GPIO_Init+0x152>
 8000cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cee:	3b08      	subs	r3, #8
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	401a      	ands	r2, r3
 8000d04:	6a39      	ldr	r1, [r7, #32]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 80b1 	beq.w	8000e82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d20:	4b4d      	ldr	r3, [pc, #308]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a4c      	ldr	r2, [pc, #304]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d38:	4a48      	ldr	r2, [pc, #288]	@ (8000e5c <HAL_GPIO_Init+0x2bc>)
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a40      	ldr	r2, [pc, #256]	@ (8000e60 <HAL_GPIO_Init+0x2c0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d013      	beq.n	8000d8c <HAL_GPIO_Init+0x1ec>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3f      	ldr	r2, [pc, #252]	@ (8000e64 <HAL_GPIO_Init+0x2c4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d00d      	beq.n	8000d88 <HAL_GPIO_Init+0x1e8>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e68 <HAL_GPIO_Init+0x2c8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d007      	beq.n	8000d84 <HAL_GPIO_Init+0x1e4>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a3d      	ldr	r2, [pc, #244]	@ (8000e6c <HAL_GPIO_Init+0x2cc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d101      	bne.n	8000d80 <HAL_GPIO_Init+0x1e0>
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e006      	b.n	8000d8e <HAL_GPIO_Init+0x1ee>
 8000d80:	2304      	movs	r3, #4
 8000d82:	e004      	b.n	8000d8e <HAL_GPIO_Init+0x1ee>
 8000d84:	2302      	movs	r3, #2
 8000d86:	e002      	b.n	8000d8e <HAL_GPIO_Init+0x1ee>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e000      	b.n	8000d8e <HAL_GPIO_Init+0x1ee>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d90:	f002 0203 	and.w	r2, r2, #3
 8000d94:	0092      	lsls	r2, r2, #2
 8000d96:	4093      	lsls	r3, r2
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d9e:	492f      	ldr	r1, [pc, #188]	@ (8000e5c <HAL_GPIO_Init+0x2bc>)
 8000da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	3302      	adds	r3, #2
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000db8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	492c      	ldr	r1, [pc, #176]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	608b      	str	r3, [r1, #8]
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4928      	ldr	r1, [pc, #160]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d006      	beq.n	8000dee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000de0:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	4922      	ldr	r1, [pc, #136]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	60cb      	str	r3, [r1, #12]
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dee:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	491e      	ldr	r1, [pc, #120]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	4918      	ldr	r1, [pc, #96]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	604b      	str	r3, [r1, #4]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e16:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4914      	ldr	r1, [pc, #80]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d021      	beq.n	8000e74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	490e      	ldr	r1, [pc, #56]	@ (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	600b      	str	r3, [r1, #0]
 8000e3c:	e021      	b.n	8000e82 <HAL_GPIO_Init+0x2e2>
 8000e3e:	bf00      	nop
 8000e40:	10320000 	.word	0x10320000
 8000e44:	10310000 	.word	0x10310000
 8000e48:	10220000 	.word	0x10220000
 8000e4c:	10210000 	.word	0x10210000
 8000e50:	10120000 	.word	0x10120000
 8000e54:	10110000 	.word	0x10110000
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000
 8000e60:	40010800 	.word	0x40010800
 8000e64:	40010c00 	.word	0x40010c00
 8000e68:	40011000 	.word	0x40011000
 8000e6c:	40011400 	.word	0x40011400
 8000e70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	4909      	ldr	r1, [pc, #36]	@ (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	3301      	adds	r3, #1
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f47f ae8e 	bne.w	8000bb4 <HAL_GPIO_Init+0x14>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	372c      	adds	r7, #44	@ 0x2c
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e12b      	b.n	8001112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d106      	bne.n	8000ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff faa0 	bl	8000414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2224      	movs	r2, #36	@ 0x24
 8000ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0201 	bic.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f0c:	f002 fdaa 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 8000f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a81      	ldr	r2, [pc, #516]	@ (800111c <HAL_I2C_Init+0x274>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d807      	bhi.n	8000f2c <HAL_I2C_Init+0x84>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4a80      	ldr	r2, [pc, #512]	@ (8001120 <HAL_I2C_Init+0x278>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	bf94      	ite	ls
 8000f24:	2301      	movls	r3, #1
 8000f26:	2300      	movhi	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	e006      	b.n	8000f3a <HAL_I2C_Init+0x92>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4a7d      	ldr	r2, [pc, #500]	@ (8001124 <HAL_I2C_Init+0x27c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	bf94      	ite	ls
 8000f34:	2301      	movls	r3, #1
 8000f36:	2300      	movhi	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0e7      	b.n	8001112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4a78      	ldr	r2, [pc, #480]	@ (8001128 <HAL_I2C_Init+0x280>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	0c9b      	lsrs	r3, r3, #18
 8000f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4a6a      	ldr	r2, [pc, #424]	@ (800111c <HAL_I2C_Init+0x274>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d802      	bhi.n	8000f7c <HAL_I2C_Init+0xd4>
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	e009      	b.n	8000f90 <HAL_I2C_Init+0xe8>
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	4a69      	ldr	r2, [pc, #420]	@ (800112c <HAL_I2C_Init+0x284>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	099b      	lsrs	r3, r3, #6
 8000f8e:	3301      	adds	r3, #1
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000fa2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	495c      	ldr	r1, [pc, #368]	@ (800111c <HAL_I2C_Init+0x274>)
 8000fac:	428b      	cmp	r3, r1
 8000fae:	d819      	bhi.n	8000fe4 <HAL_I2C_Init+0x13c>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	1e59      	subs	r1, r3, #1
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fbe:	1c59      	adds	r1, r3, #1
 8000fc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00a      	beq.n	8000fe0 <HAL_I2C_Init+0x138>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1e59      	subs	r1, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fd8:	3301      	adds	r3, #1
 8000fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fde:	e051      	b.n	8001084 <HAL_I2C_Init+0x1dc>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e04f      	b.n	8001084 <HAL_I2C_Init+0x1dc>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d111      	bne.n	8001010 <HAL_I2C_Init+0x168>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	1e58      	subs	r0, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6859      	ldr	r1, [r3, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	440b      	add	r3, r1
 8000ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf0c      	ite	eq
 8001008:	2301      	moveq	r3, #1
 800100a:	2300      	movne	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	e012      	b.n	8001036 <HAL_I2C_Init+0x18e>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1e58      	subs	r0, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6859      	ldr	r1, [r3, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	0099      	lsls	r1, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	fbb0 f3f3 	udiv	r3, r0, r3
 8001026:	3301      	adds	r3, #1
 8001028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800102c:	2b00      	cmp	r3, #0
 800102e:	bf0c      	ite	eq
 8001030:	2301      	moveq	r3, #1
 8001032:	2300      	movne	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_I2C_Init+0x196>
 800103a:	2301      	movs	r3, #1
 800103c:	e022      	b.n	8001084 <HAL_I2C_Init+0x1dc>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10e      	bne.n	8001064 <HAL_I2C_Init+0x1bc>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1e58      	subs	r0, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6859      	ldr	r1, [r3, #4]
 800104e:	460b      	mov	r3, r1
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	440b      	add	r3, r1
 8001054:	fbb0 f3f3 	udiv	r3, r0, r3
 8001058:	3301      	adds	r3, #1
 800105a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800105e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001062:	e00f      	b.n	8001084 <HAL_I2C_Init+0x1dc>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	1e58      	subs	r0, r3, #1
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6859      	ldr	r1, [r3, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	0099      	lsls	r1, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	fbb0 f3f3 	udiv	r3, r0, r3
 800107a:	3301      	adds	r3, #1
 800107c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001080:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	6809      	ldr	r1, [r1, #0]
 8001088:	4313      	orrs	r3, r2
 800108a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69da      	ldr	r2, [r3, #28]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	431a      	orrs	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80010b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6911      	ldr	r1, [r2, #16]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68d2      	ldr	r2, [r2, #12]
 80010be:	4311      	orrs	r1, r2
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2220      	movs	r2, #32
 80010fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	000186a0 	.word	0x000186a0
 8001120:	001e847f 	.word	0x001e847f
 8001124:	003d08ff 	.word	0x003d08ff
 8001128:	431bde83 	.word	0x431bde83
 800112c:	10624dd3 	.word	0x10624dd3

08001130 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001142:	2b80      	cmp	r3, #128	@ 0x80
 8001144:	d103      	bne.n	800114e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	461a      	mov	r2, r3
 8001164:	460b      	mov	r3, r1
 8001166:	817b      	strh	r3, [r7, #10]
 8001168:	4613      	mov	r3, r2
 800116a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff fb56 	bl	800081c <HAL_GetTick>
 8001170:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b20      	cmp	r3, #32
 800117c:	f040 80e0 	bne.w	8001340 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2319      	movs	r3, #25
 8001186:	2201      	movs	r2, #1
 8001188:	4970      	ldr	r1, [pc, #448]	@ (800134c <HAL_I2C_Master_Transmit+0x1f4>)
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f001 fe7c 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001196:	2302      	movs	r3, #2
 8001198:	e0d3      	b.n	8001342 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <HAL_I2C_Master_Transmit+0x50>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e0cc      	b.n	8001342 <HAL_I2C_Master_Transmit+0x1ea>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d007      	beq.n	80011ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0201 	orr.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2221      	movs	r2, #33	@ 0x21
 80011e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2210      	movs	r2, #16
 80011ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	893a      	ldrh	r2, [r7, #8]
 80011fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001204:	b29a      	uxth	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4a50      	ldr	r2, [pc, #320]	@ (8001350 <HAL_I2C_Master_Transmit+0x1f8>)
 800120e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001210:	8979      	ldrh	r1, [r7, #10]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	6a3a      	ldr	r2, [r7, #32]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f001 fd0c 	bl	8002c34 <I2C_MasterRequestWrite>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e08d      	b.n	8001342 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800123c:	e066      	b.n	800130c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	6a39      	ldr	r1, [r7, #32]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f001 ff3a 	bl	80030bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00d      	beq.n	800126a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	2b04      	cmp	r3, #4
 8001254:	d107      	bne.n	8001266 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001264:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e06b      	b.n	8001342 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001284:	b29b      	uxth	r3, r3
 8001286:	3b01      	subs	r3, #1
 8001288:	b29a      	uxth	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001292:	3b01      	subs	r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d11b      	bne.n	80012e0 <HAL_I2C_Master_Transmit+0x188>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d017      	beq.n	80012e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d8:	3b01      	subs	r3, #1
 80012da:	b29a      	uxth	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	6a39      	ldr	r1, [r7, #32]
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f001 ff31 	bl	800314c <I2C_WaitOnBTFFlagUntilTimeout>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00d      	beq.n	800130c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d107      	bne.n	8001308 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001306:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e01a      	b.n	8001342 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001310:	2b00      	cmp	r3, #0
 8001312:	d194      	bne.n	800123e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2220      	movs	r2, #32
 8001328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	e000      	b.n	8001342 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001340:	2302      	movs	r3, #2
  }
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	00100002 	.word	0x00100002
 8001350:	ffff0000 	.word	0xffff0000

08001354 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	4613      	mov	r3, r2
 8001362:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001370:	2b28      	cmp	r3, #40	@ 0x28
 8001372:	d15b      	bne.n	800142c <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e054      	b.n	800142e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800138e:	2302      	movs	r3, #2
 8001390:	e04d      	b.n	800142e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d007      	beq.n	80013b8 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	222a      	movs	r2, #42	@ 0x2a
 80013cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2220      	movs	r2, #32
 80013d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2200      	movs	r2, #0
 80013dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	88fa      	ldrh	r2, [r7, #6]
 80013e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001426:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	e000      	b.n	800142e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800142c:	2302      	movs	r3, #2
  }
}
 800142e:	4618      	mov	r0, r3
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b20      	cmp	r3, #32
 800144a:	d124      	bne.n	8001496 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2228      	movs	r2, #40	@ 0x28
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b01      	cmp	r3, #1
 8001460:	d007      	beq.n	8001472 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001480:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001490:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001496:	2302      	movs	r3, #2
  }
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b088      	sub	sp, #32
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ba:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80014c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014ca:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d003      	beq.n	80014da <HAL_I2C_EV_IRQHandler+0x38>
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b40      	cmp	r3, #64	@ 0x40
 80014d6:	f040 80b1 	bne.w	800163c <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10d      	bne.n	8001510 <HAL_I2C_EV_IRQHandler+0x6e>
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80014fa:	d003      	beq.n	8001504 <HAL_I2C_EV_IRQHandler+0x62>
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001502:	d101      	bne.n	8001508 <HAL_I2C_EV_IRQHandler+0x66>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <HAL_I2C_EV_IRQHandler+0x68>
 8001508:	2300      	movs	r3, #0
 800150a:	2b01      	cmp	r3, #1
 800150c:	f000 8114 	beq.w	8001738 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_I2C_EV_IRQHandler+0x90>
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f001 feb9 	bl	800329c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fd5e 	bl	8001fec <I2C_Master_SB>
 8001530:	e083      	b.n	800163a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_I2C_EV_IRQHandler+0xac>
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fdd5 	bl	80020f6 <I2C_Master_ADD10>
 800154c:	e075      	b.n	800163a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_I2C_EV_IRQHandler+0xc8>
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fdf0 	bl	8002148 <I2C_Master_ADDR>
 8001568:	e067      	b.n	800163a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d036      	beq.n	80015e2 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800157e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001582:	f000 80db 	beq.w	800173c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00d      	beq.n	80015ac <HAL_I2C_EV_IRQHandler+0x10a>
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <HAL_I2C_EV_IRQHandler+0x10a>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f9be 	bl	8001926 <I2C_MasterTransmit_TXE>
 80015aa:	e046      	b.n	800163a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80c2 	beq.w	800173c <HAL_I2C_EV_IRQHandler+0x29a>
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80bc 	beq.w	800173c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80015c4:	7bbb      	ldrb	r3, [r7, #14]
 80015c6:	2b21      	cmp	r3, #33	@ 0x21
 80015c8:	d103      	bne.n	80015d2 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fa47 	bl	8001a5e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015d0:	e0b4      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2b40      	cmp	r3, #64	@ 0x40
 80015d6:	f040 80b1 	bne.w	800173c <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fab5 	bl	8001b4a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015e0:	e0ac      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015f0:	f000 80a4 	beq.w	800173c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00d      	beq.n	800161a <HAL_I2C_EV_IRQHandler+0x178>
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_I2C_EV_IRQHandler+0x178>
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fb31 	bl	8001c7a <I2C_MasterReceive_RXNE>
 8001618:	e00f      	b.n	800163a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 808b 	beq.w	800173c <HAL_I2C_EV_IRQHandler+0x29a>
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8085 	beq.w	800173c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fbe9 	bl	8001e0a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001638:	e080      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x29a>
 800163a:	e07f      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d004      	beq.n	800164e <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	e007      	b.n	800165e <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d011      	beq.n	800168c <HAL_I2C_EV_IRQHandler+0x1ea>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00c      	beq.n	800168c <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001682:	69b9      	ldr	r1, [r7, #24]
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 ffb6 	bl	80025f6 <I2C_Slave_ADDR>
 800168a:	e05a      	b.n	8001742 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b00      	cmp	r3, #0
 8001694:	d008      	beq.n	80016a8 <HAL_I2C_EV_IRQHandler+0x206>
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fff1 	bl	8002688 <I2C_Slave_STOPF>
 80016a6:	e04c      	b.n	8001742 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	2b21      	cmp	r3, #33	@ 0x21
 80016ac:	d002      	beq.n	80016b4 <HAL_I2C_EV_IRQHandler+0x212>
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	2b29      	cmp	r3, #41	@ 0x29
 80016b2:	d120      	bne.n	80016f6 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00d      	beq.n	80016da <HAL_I2C_EV_IRQHandler+0x238>
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_I2C_EV_IRQHandler+0x238>
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fed3 	bl	800247e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016d8:	e032      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d02d      	beq.n	8001740 <HAL_I2C_EV_IRQHandler+0x29e>
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d028      	beq.n	8001740 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 ff02 	bl	80024f8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016f4:	e024      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00d      	beq.n	800171c <HAL_I2C_EV_IRQHandler+0x27a>
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <HAL_I2C_EV_IRQHandler+0x27a>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 ff0f 	bl	8002538 <I2C_SlaveReceive_RXNE>
 800171a:	e012      	b.n	8001742 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00d      	beq.n	8001742 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 ff3f 	bl	80025b4 <I2C_SlaveReceive_BTF>
 8001736:	e004      	b.n	8001742 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001738:	bf00      	nop
 800173a:	e002      	b.n	8001742 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800173c:	bf00      	nop
 800173e:	e000      	b.n	8001742 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001740:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	@ 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800176a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d015      	beq.n	80017a2 <HAL_I2C_ER_IRQHandler+0x5a>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d010      	beq.n	80017a2 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001790:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00d      	beq.n	80017c8 <HAL_I2C_ER_IRQHandler+0x80>
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80017c6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d03e      	beq.n	8001850 <HAL_I2C_ER_IRQHandler+0x108>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d039      	beq.n	8001850 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80017dc:	7efb      	ldrb	r3, [r7, #27]
 80017de:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017ee:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80017f6:	7ebb      	ldrb	r3, [r7, #26]
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d112      	bne.n	8001822 <HAL_I2C_ER_IRQHandler+0xda>
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <HAL_I2C_ER_IRQHandler+0xda>
 8001802:	7cfb      	ldrb	r3, [r7, #19]
 8001804:	2b21      	cmp	r3, #33	@ 0x21
 8001806:	d008      	beq.n	800181a <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001808:	7cfb      	ldrb	r3, [r7, #19]
 800180a:	2b29      	cmp	r3, #41	@ 0x29
 800180c:	d005      	beq.n	800181a <HAL_I2C_ER_IRQHandler+0xd2>
 800180e:	7cfb      	ldrb	r3, [r7, #19]
 8001810:	2b28      	cmp	r3, #40	@ 0x28
 8001812:	d106      	bne.n	8001822 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b21      	cmp	r3, #33	@ 0x21
 8001818:	d103      	bne.n	8001822 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f001 f864 	bl	80028e8 <I2C_Slave_AF>
 8001820:	e016      	b.n	8001850 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800182a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001834:	7efb      	ldrb	r3, [r7, #27]
 8001836:	2b10      	cmp	r3, #16
 8001838:	d002      	beq.n	8001840 <HAL_I2C_ER_IRQHandler+0xf8>
 800183a:	7efb      	ldrb	r3, [r7, #27]
 800183c:	2b40      	cmp	r3, #64	@ 0x40
 800183e:	d107      	bne.n	8001850 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800184e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00d      	beq.n	8001876 <HAL_I2C_ER_IRQHandler+0x12e>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001874:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f001 f8a1 	bl	80029d0 <I2C_ITError>
  }
}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	@ 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001934:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800193c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001942:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d150      	bne.n	80019ee <I2C_MasterTransmit_TXE+0xc8>
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2b21      	cmp	r3, #33	@ 0x21
 8001950:	d14d      	bne.n	80019ee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d01d      	beq.n	8001994 <I2C_MasterTransmit_TXE+0x6e>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b20      	cmp	r3, #32
 800195c:	d01a      	beq.n	8001994 <I2C_MasterTransmit_TXE+0x6e>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001964:	d016      	beq.n	8001994 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001974:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2211      	movs	r2, #17
 800197a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff82 	bl	8001896 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001992:	e060      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019a2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019b2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2220      	movs	r2, #32
 80019be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b40      	cmp	r3, #64	@ 0x40
 80019cc:	d107      	bne.n	80019de <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff81 	bl	80018de <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019dc:	e03b      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff55 	bl	8001896 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019ec:	e033      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b21      	cmp	r3, #33	@ 0x21
 80019f2:	d005      	beq.n	8001a00 <I2C_MasterTransmit_TXE+0xda>
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
 80019f6:	2b40      	cmp	r3, #64	@ 0x40
 80019f8:	d12d      	bne.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2b22      	cmp	r3, #34	@ 0x22
 80019fe:	d12a      	bne.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d108      	bne.n	8001a1c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a18:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001a1a:	e01c      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b40      	cmp	r3, #64	@ 0x40
 8001a26:	d103      	bne.n	8001a30 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f88e 	bl	8001b4a <I2C_MemoryTransmit_TXE_BTF>
}
 8001a2e:	e012      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001a54:	e7ff      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b21      	cmp	r3, #33	@ 0x21
 8001a76:	d164      	bne.n	8001b42 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d012      	beq.n	8001aa8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001aa6:	e04c      	b.n	8001b42 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d01d      	beq.n	8001aea <I2C_MasterTransmit_BTF+0x8c>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d01a      	beq.n	8001aea <I2C_MasterTransmit_BTF+0x8c>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001aba:	d016      	beq.n	8001aea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001aca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2211      	movs	r2, #17
 8001ad0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2220      	movs	r2, #32
 8001ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fed7 	bl	8001896 <HAL_I2C_MasterTxCpltCallback>
}
 8001ae8:	e02b      	b.n	8001b42 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001af8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b08:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b40      	cmp	r3, #64	@ 0x40
 8001b22:	d107      	bne.n	8001b34 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fed6 	bl	80018de <HAL_I2C_MemTxCpltCallback>
}
 8001b32:	e006      	b.n	8001b42 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff feaa 	bl	8001896 <HAL_I2C_MasterTxCpltCallback>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d11d      	bne.n	8001b9e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d10b      	bne.n	8001b82 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b7a:	1c9a      	adds	r2, r3, #2
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001b80:	e077      	b.n	8001c72 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	121b      	asrs	r3, r3, #8
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001b9c:	e069      	b.n	8001c72 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d10b      	bne.n	8001bbe <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bbc:	e059      	b.n	8001c72 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d152      	bne.n	8001c6c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b22      	cmp	r3, #34	@ 0x22
 8001bca:	d10d      	bne.n	8001be8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bda:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001be6:	e044      	b.n	8001c72 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d015      	beq.n	8001c1e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	2b21      	cmp	r3, #33	@ 0x21
 8001bf6:	d112      	bne.n	8001c1e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001c1c:	e029      	b.n	8001c72 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d124      	bne.n	8001c72 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b21      	cmp	r3, #33	@ 0x21
 8001c2c:	d121      	bne.n	8001c72 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c3c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c4c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fe3a 	bl	80018de <HAL_I2C_MemTxCpltCallback>
}
 8001c6a:	e002      	b.n	8001c72 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fa5f 	bl	8001130 <I2C_Flush_DR>
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b22      	cmp	r3, #34	@ 0x22
 8001c8c:	f040 80b9 	bne.w	8001e02 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c94:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d921      	bls.n	8001ce8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	f040 8096 	bne.w	8001e02 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ce4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001ce6:	e08c      	b.n	8001e02 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d07f      	beq.n	8001df0 <I2C_MasterReceive_RXNE+0x176>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d002      	beq.n	8001cfc <I2C_MasterReceive_RXNE+0x82>
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d179      	bne.n	8001df0 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f001 fa6d 	bl	80031dc <I2C_WaitOnSTOPRequestThroughIT>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d14c      	bne.n	8001da2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d16:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b40      	cmp	r3, #64	@ 0x40
 8001d60:	d10a      	bne.n	8001d78 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fdbd 	bl	80018f0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d76:	e044      	b.n	8001e02 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d002      	beq.n	8001d8c <I2C_MasterReceive_RXNE+0x112>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d103      	bne.n	8001d94 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d92:	e002      	b.n	8001d9a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2212      	movs	r2, #18
 8001d98:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fd84 	bl	80018a8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001da0:	e02f      	b.n	8001e02 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001db0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fd8a 	bl	8001902 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001dee:	e008      	b.n	8001e02 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dfe:	605a      	str	r2, [r3, #4]
}
 8001e00:	e7ff      	b.n	8001e02 <I2C_MasterReceive_RXNE+0x188>
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e16:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d11b      	bne.n	8001e5a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e30:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001e58:	e0c4      	b.n	8001fe4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d129      	bne.n	8001eb8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e72:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d00a      	beq.n	8001e90 <I2C_MasterReceive_BTF+0x86>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d007      	beq.n	8001e90 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001eb6:	e095      	b.n	8001fe4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d17d      	bne.n	8001fbe <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d002      	beq.n	8001ece <I2C_MasterReceive_BTF+0xc4>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d108      	bne.n	8001ee0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e016      	b.n	8001f0e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d002      	beq.n	8001eec <I2C_MasterReceive_BTF+0xe2>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d108      	bne.n	8001efe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e007      	b.n	8001f0e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f0c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001f68:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b40      	cmp	r3, #64	@ 0x40
 8001f7c:	d10a      	bne.n	8001f94 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fcaf 	bl	80018f0 <HAL_I2C_MemRxCpltCallback>
}
 8001f92:	e027      	b.n	8001fe4 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d002      	beq.n	8001fa8 <I2C_MasterReceive_BTF+0x19e>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d103      	bne.n	8001fb0 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fae:	e002      	b.n	8001fb6 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2212      	movs	r2, #18
 8001fb4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fc76 	bl	80018a8 <HAL_I2C_MasterRxCpltCallback>
}
 8001fbc:	e012      	b.n	8001fe4 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b40      	cmp	r3, #64	@ 0x40
 8001ffe:	d117      	bne.n	8002030 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002018:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800201a:	e067      	b.n	80020ec <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	611a      	str	r2, [r3, #16]
}
 800202e:	e05d      	b.n	80020ec <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002038:	d133      	bne.n	80020a2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b21      	cmp	r3, #33	@ 0x21
 8002044:	d109      	bne.n	800205a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002056:	611a      	str	r2, [r3, #16]
 8002058:	e008      	b.n	800206c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002070:	2b00      	cmp	r3, #0
 8002072:	d004      	beq.n	800207e <I2C_Master_SB+0x92>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d108      	bne.n	8002090 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002082:	2b00      	cmp	r3, #0
 8002084:	d032      	beq.n	80020ec <I2C_Master_SB+0x100>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d02d      	beq.n	80020ec <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800209e:	605a      	str	r2, [r3, #4]
}
 80020a0:	e024      	b.n	80020ec <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10e      	bne.n	80020c8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	11db      	asrs	r3, r3, #7
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f003 0306 	and.w	r3, r3, #6
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f063 030f 	orn	r3, r3, #15
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	611a      	str	r2, [r3, #16]
}
 80020c6:	e011      	b.n	80020ec <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10d      	bne.n	80020ec <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	11db      	asrs	r3, r3, #7
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f003 0306 	and.w	r3, r3, #6
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	f063 030e 	orn	r3, r3, #14
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	611a      	str	r2, [r3, #16]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	b2da      	uxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <I2C_Master_ADD10+0x26>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d108      	bne.n	800212e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00c      	beq.n	800213e <I2C_Master_ADD10+0x48>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800213c:	605a      	str	r2, [r3, #4]
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002148:	b480      	push	{r7}
 800214a:	b091      	sub	sp, #68	@ 0x44
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002156:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b22      	cmp	r3, #34	@ 0x22
 8002170:	f040 8174 	bne.w	800245c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10f      	bne.n	800219c <I2C_Master_ADDR+0x54>
 800217c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002180:	2b40      	cmp	r3, #64	@ 0x40
 8002182:	d10b      	bne.n	800219c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002184:	2300      	movs	r3, #0
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	633b      	str	r3, [r7, #48]	@ 0x30
 8002198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219a:	e16b      	b.n	8002474 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d11d      	bne.n	80021e0 <I2C_Master_ADDR+0x98>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80021ac:	d118      	bne.n	80021e0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021d2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80021de:	e149      	b.n	8002474 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d113      	bne.n	8002212 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ea:	2300      	movs	r3, #0
 80021ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e120      	b.n	8002454 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	f040 808a 	bne.w	8002332 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800221e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002220:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002224:	d137      	bne.n	8002296 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002234:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002244:	d113      	bne.n	800226e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002254:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	e0f2      	b.n	8002454 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	623b      	str	r3, [r7, #32]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e0de      	b.n	8002454 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002298:	2b08      	cmp	r3, #8
 800229a:	d02e      	beq.n	80022fa <I2C_Master_ADDR+0x1b2>
 800229c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d02b      	beq.n	80022fa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80022a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a4:	2b12      	cmp	r3, #18
 80022a6:	d102      	bne.n	80022ae <I2C_Master_ADDR+0x166>
 80022a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d125      	bne.n	80022fa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d00e      	beq.n	80022d2 <I2C_Master_ADDR+0x18a>
 80022b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d00b      	beq.n	80022d2 <I2C_Master_ADDR+0x18a>
 80022ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d008      	beq.n	80022d2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e007      	b.n	80022e2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	e0ac      	b.n	8002454 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002308:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e090      	b.n	8002454 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d158      	bne.n	80023ee <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800233c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800233e:	2b04      	cmp	r3, #4
 8002340:	d021      	beq.n	8002386 <I2C_Master_ADDR+0x23e>
 8002342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002344:	2b02      	cmp	r3, #2
 8002346:	d01e      	beq.n	8002386 <I2C_Master_ADDR+0x23e>
 8002348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800234a:	2b10      	cmp	r3, #16
 800234c:	d01b      	beq.n	8002386 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800235c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e012      	b.n	80023ac <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002394:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023ba:	d14b      	bne.n	8002454 <I2C_Master_ADDR+0x30c>
 80023bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023c2:	d00b      	beq.n	80023dc <I2C_Master_ADDR+0x294>
 80023c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d008      	beq.n	80023dc <I2C_Master_ADDR+0x294>
 80023ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d005      	beq.n	80023dc <I2C_Master_ADDR+0x294>
 80023d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d002      	beq.n	80023dc <I2C_Master_ADDR+0x294>
 80023d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d13b      	bne.n	8002454 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	e032      	b.n	8002454 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800240c:	d117      	bne.n	800243e <I2C_Master_ADDR+0x2f6>
 800240e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002410:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002414:	d00b      	beq.n	800242e <I2C_Master_ADDR+0x2e6>
 8002416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002418:	2b01      	cmp	r3, #1
 800241a:	d008      	beq.n	800242e <I2C_Master_ADDR+0x2e6>
 800241c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241e:	2b08      	cmp	r3, #8
 8002420:	d005      	beq.n	800242e <I2C_Master_ADDR+0x2e6>
 8002422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002424:	2b10      	cmp	r3, #16
 8002426:	d002      	beq.n	800242e <I2C_Master_ADDR+0x2e6>
 8002428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242a:	2b20      	cmp	r3, #32
 800242c:	d107      	bne.n	800243e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800243c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800245a:	e00b      	b.n	8002474 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
}
 8002472:	e7ff      	b.n	8002474 <I2C_Master_ADDR+0x32c>
 8002474:	bf00      	nop
 8002476:	3744      	adds	r7, #68	@ 0x44
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800248c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02b      	beq.n	80024f0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d114      	bne.n	80024f0 <I2C_SlaveTransmit_TXE+0x72>
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b29      	cmp	r3, #41	@ 0x29
 80024ca:	d111      	bne.n	80024f0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2221      	movs	r2, #33	@ 0x21
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2228      	movs	r2, #40	@ 0x28
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff f9e5 	bl	80018ba <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d011      	beq.n	800252e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002546:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d02c      	beq.n	80025ac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d114      	bne.n	80025ac <I2C_SlaveReceive_RXNE+0x74>
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2b2a      	cmp	r3, #42	@ 0x2a
 8002586:	d111      	bne.n	80025ac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002596:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2222      	movs	r2, #34	@ 0x22
 800259c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2228      	movs	r2, #40	@ 0x28
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff f990 	bl	80018cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d012      	beq.n	80025ec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002610:	2b28      	cmp	r3, #40	@ 0x28
 8002612:	d125      	bne.n	8002660 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002622:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	81bb      	strh	r3, [r7, #12]
 8002642:	e002      	b.n	800264a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002652:	89ba      	ldrh	r2, [r7, #12]
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fd fd83 	bl	8000164 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800265e:	e00e      	b.n	800267e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002696:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026a6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026e4:	d172      	bne.n	80027cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	2b22      	cmp	r3, #34	@ 0x22
 80026ea:	d002      	beq.n	80026f2 <I2C_Slave_STOPF+0x6a>
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80026f0:	d135      	bne.n	800275e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	f043 0204 	orr.w	r2, r3, #4
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002724:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fa2a 	bl	8000b84 <HAL_DMA_GetState>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d049      	beq.n	80027ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273a:	4a69      	ldr	r2, [pc, #420]	@ (80028e0 <I2C_Slave_STOPF+0x258>)
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe f9a6 	bl	8000a94 <HAL_DMA_Abort_IT>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d03d      	beq.n	80027ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002758:	4610      	mov	r0, r2
 800275a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800275c:	e035      	b.n	80027ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f043 0204 	orr.w	r2, r3, #4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002790:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe f9f4 	bl	8000b84 <HAL_DMA_GetState>
 800279c:	4603      	mov	r3, r0
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d014      	beq.n	80027cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a6:	4a4e      	ldr	r2, [pc, #312]	@ (80028e0 <I2C_Slave_STOPF+0x258>)
 80027a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe f970 	bl	8000a94 <HAL_DMA_Abort_IT>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027c4:	4610      	mov	r0, r2
 80027c6:	4798      	blx	r3
 80027c8:	e000      	b.n	80027cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d03e      	beq.n	8002854 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d112      	bne.n	800280a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002814:	2b40      	cmp	r3, #64	@ 0x40
 8002816:	d112      	bne.n	800283e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f8b7 	bl	80029d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002862:	e039      	b.n	80028d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b2a      	cmp	r3, #42	@ 0x2a
 8002868:	d109      	bne.n	800287e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2228      	movs	r2, #40	@ 0x28
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff f827 	bl	80018cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b28      	cmp	r3, #40	@ 0x28
 8002888:	d111      	bne.n	80028ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a15      	ldr	r2, [pc, #84]	@ (80028e4 <I2C_Slave_STOPF+0x25c>)
 800288e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fd fc50 	bl	800014c <HAL_I2C_ListenCpltCallback>
}
 80028ac:	e014      	b.n	80028d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	2b22      	cmp	r3, #34	@ 0x22
 80028b4:	d002      	beq.n	80028bc <I2C_Slave_STOPF+0x234>
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b22      	cmp	r3, #34	@ 0x22
 80028ba:	d10d      	bne.n	80028d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe fffa 	bl	80018cc <HAL_I2C_SlaveRxCpltCallback>
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	08002d39 	.word	0x08002d39
 80028e4:	ffff0000 	.word	0xffff0000

080028e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d002      	beq.n	800290a <I2C_Slave_AF+0x22>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b20      	cmp	r3, #32
 8002908:	d129      	bne.n	800295e <I2C_Slave_AF+0x76>
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	2b28      	cmp	r3, #40	@ 0x28
 800290e:	d126      	bne.n	800295e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a2e      	ldr	r2, [pc, #184]	@ (80029cc <I2C_Slave_AF+0xe4>)
 8002914:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002924:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800292e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fd fbf8 	bl	800014c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800295c:	e031      	b.n	80029c2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b21      	cmp	r3, #33	@ 0x21
 8002962:	d129      	bne.n	80029b8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a19      	ldr	r2, [pc, #100]	@ (80029cc <I2C_Slave_AF+0xe4>)
 8002968:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2221      	movs	r2, #33	@ 0x21
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800298e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002998:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fbc0 	bl	8001130 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7fe ff82 	bl	80018ba <HAL_I2C_SlaveTxCpltCallback>
}
 80029b6:	e004      	b.n	80029c2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029c0:	615a      	str	r2, [r3, #20]
}
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	ffff0000 	.word	0xffff0000

080029d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029e8:	7bbb      	ldrb	r3, [r7, #14]
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d002      	beq.n	80029f4 <I2C_ITError+0x24>
 80029ee:	7bbb      	ldrb	r3, [r7, #14]
 80029f0:	2b40      	cmp	r3, #64	@ 0x40
 80029f2:	d10a      	bne.n	8002a0a <I2C_ITError+0x3a>
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b22      	cmp	r3, #34	@ 0x22
 80029f8:	d107      	bne.n	8002a0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a10:	2b28      	cmp	r3, #40	@ 0x28
 8002a12:	d107      	bne.n	8002a24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2228      	movs	r2, #40	@ 0x28
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002a22:	e015      	b.n	8002a50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a32:	d00a      	beq.n	8002a4a <I2C_ITError+0x7a>
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b60      	cmp	r3, #96	@ 0x60
 8002a38:	d007      	beq.n	8002a4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a5e:	d162      	bne.n	8002b26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d020      	beq.n	8002ac0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a82:	4a6a      	ldr	r2, [pc, #424]	@ (8002c2c <I2C_ITError+0x25c>)
 8002a84:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe f802 	bl	8000a94 <HAL_DMA_Abort_IT>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8089 	beq.w	8002baa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002aba:	4610      	mov	r0, r2
 8002abc:	4798      	blx	r3
 8002abe:	e074      	b.n	8002baa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	4a59      	ldr	r2, [pc, #356]	@ (8002c2c <I2C_ITError+0x25c>)
 8002ac6:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd ffe1 	bl	8000a94 <HAL_DMA_Abort_IT>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d068      	beq.n	8002baa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae2:	2b40      	cmp	r3, #64	@ 0x40
 8002ae4:	d10b      	bne.n	8002afe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b20:	4610      	mov	r0, r2
 8002b22:	4798      	blx	r3
 8002b24:	e041      	b.n	8002baa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b60      	cmp	r3, #96	@ 0x60
 8002b30:	d125      	bne.n	8002b7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4a:	2b40      	cmp	r3, #64	@ 0x40
 8002b4c:	d10b      	bne.n	8002b66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe fecc 	bl	8001914 <HAL_I2C_AbortCpltCallback>
 8002b7c:	e015      	b.n	8002baa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	d10b      	bne.n	8002ba4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7fe feac 	bl	8001902 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10e      	bne.n	8002bd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d007      	beq.n	8002be8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002be6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d113      	bne.n	8002c24 <I2C_ITError+0x254>
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b28      	cmp	r3, #40	@ 0x28
 8002c00:	d110      	bne.n	8002c24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <I2C_ITError+0x260>)
 8002c06:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fd fa94 	bl	800014c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	08002d39 	.word	0x08002d39
 8002c30:	ffff0000 	.word	0xffff0000

08002c34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	460b      	mov	r3, r1
 8002c42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d006      	beq.n	8002c5e <I2C_MasterRequestWrite+0x2a>
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d003      	beq.n	8002c5e <I2C_MasterRequestWrite+0x2a>
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c5c:	d108      	bne.n	8002c70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	e00b      	b.n	8002c88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c74:	2b12      	cmp	r3, #18
 8002c76:	d107      	bne.n	8002c88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f8f7 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00d      	beq.n	8002cbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cae:	d103      	bne.n	8002cb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e035      	b.n	8002d28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cc4:	d108      	bne.n	8002cd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cc6:	897b      	ldrh	r3, [r7, #10]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cd4:	611a      	str	r2, [r3, #16]
 8002cd6:	e01b      	b.n	8002d10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cd8:	897b      	ldrh	r3, [r7, #10]
 8002cda:	11db      	asrs	r3, r3, #7
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f003 0306 	and.w	r3, r3, #6
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f063 030f 	orn	r3, r3, #15
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	490e      	ldr	r1, [pc, #56]	@ (8002d30 <I2C_MasterRequestWrite+0xfc>)
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f940 	bl	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e010      	b.n	8002d28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d06:	897b      	ldrh	r3, [r7, #10]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4907      	ldr	r1, [pc, #28]	@ (8002d34 <I2C_MasterRequestWrite+0x100>)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f930 	bl	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	00010008 	.word	0x00010008
 8002d34:	00010002 	.word	0x00010002

08002d38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d52:	4b4b      	ldr	r3, [pc, #300]	@ (8002e80 <I2C_DMAAbort+0x148>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	08db      	lsrs	r3, r3, #3
 8002d58:	4a4a      	ldr	r2, [pc, #296]	@ (8002e84 <I2C_DMAAbort+0x14c>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0a1a      	lsrs	r2, r3, #8
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00da      	lsls	r2, r3, #3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002d7e:	e00a      	b.n	8002d96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d94:	d0ea      	beq.n	8002d6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	2200      	movs	r2, #0
 8002db4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd8:	2200      	movs	r2, #0
 8002dda:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de8:	2200      	movs	r2, #0
 8002dea:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b60      	cmp	r3, #96	@ 0x60
 8002e06:	d10e      	bne.n	8002e26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7fe fd78 	bl	8001914 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e24:	e027      	b.n	8002e76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e2c:	2b28      	cmp	r3, #40	@ 0x28
 8002e2e:	d117      	bne.n	8002e60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2228      	movs	r2, #40	@ 0x28
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002e5e:	e007      	b.n	8002e70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002e70:	6978      	ldr	r0, [r7, #20]
 8002e72:	f7fe fd46 	bl	8001902 <HAL_I2C_ErrorCallback>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000000 	.word	0x20000000
 8002e84:	14f8b589 	.word	0x14f8b589

08002e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e98:	e048      	b.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d044      	beq.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7fd fcbb 	bl	800081c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d139      	bne.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	0c1b      	lsrs	r3, r3, #16
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d10d      	bne.n	8002ede <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	e00c      	b.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d116      	bne.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e023      	b.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10d      	bne.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	e00c      	b.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d093      	beq.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f8a:	e071      	b.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9a:	d123      	bne.n	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002faa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f043 0204 	orr.w	r2, r3, #4
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e067      	b.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d041      	beq.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fec:	f7fd fc16 	bl	800081c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d302      	bcc.n	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d136      	bne.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d10c      	bne.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	bf14      	ite	ne
 800301e:	2301      	movne	r3, #1
 8003020:	2300      	moveq	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	e00b      	b.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	43da      	mvns	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4013      	ands	r3, r2
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e021      	b.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	0c1b      	lsrs	r3, r3, #16
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d10c      	bne.n	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	43da      	mvns	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4013      	ands	r3, r2
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf14      	ite	ne
 800308c:	2301      	movne	r3, #1
 800308e:	2300      	moveq	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e00b      	b.n	80030ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4013      	ands	r3, r2
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f47f af6d 	bne.w	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c8:	e034      	b.n	8003134 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f8b8 	bl	8003240 <I2C_IsAcknowledgeFailed>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e034      	b.n	8003144 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d028      	beq.n	8003134 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fd fb9b 	bl	800081c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11d      	bne.n	8003134 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003102:	2b80      	cmp	r3, #128	@ 0x80
 8003104:	d016      	beq.n	8003134 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e007      	b.n	8003144 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313e:	2b80      	cmp	r3, #128	@ 0x80
 8003140:	d1c3      	bne.n	80030ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003158:	e034      	b.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f870 	bl	8003240 <I2C_IsAcknowledgeFailed>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e034      	b.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d028      	beq.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003172:	f7fd fb53 	bl	800081c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	429a      	cmp	r2, r3
 8003180:	d302      	bcc.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d11d      	bne.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b04      	cmp	r3, #4
 8003194:	d016      	beq.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e007      	b.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d1c3      	bne.n	800315a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	4a13      	ldr	r2, [pc, #76]	@ (800323c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	0a1a      	lsrs	r2, r3, #8
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3b01      	subs	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d107      	bne.n	800321a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	f043 0220 	orr.w	r2, r3, #32
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e008      	b.n	800322c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003228:	d0e9      	beq.n	80031fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000000 	.word	0x20000000
 800323c:	14f8b589 	.word	0x14f8b589

08003240 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003256:	d11b      	bne.n	8003290 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003260:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	f043 0204 	orr.w	r2, r3, #4
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80032ac:	d103      	bne.n	80032b6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80032b4:	e007      	b.n	80032c6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80032be:	d102      	bne.n	80032c6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2208      	movs	r2, #8
 80032c4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e272      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8087 	beq.w	80033fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f0:	4b92      	ldr	r3, [pc, #584]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d00c      	beq.n	8003316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032fc:	4b8f      	ldr	r3, [pc, #572]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d112      	bne.n	800332e <HAL_RCC_OscConfig+0x5e>
 8003308:	4b8c      	ldr	r3, [pc, #560]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003314:	d10b      	bne.n	800332e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003316:	4b89      	ldr	r3, [pc, #548]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d06c      	beq.n	80033fc <HAL_RCC_OscConfig+0x12c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d168      	bne.n	80033fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e24c      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x76>
 8003338:	4b80      	ldr	r3, [pc, #512]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a7f      	ldr	r2, [pc, #508]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800333e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	e02e      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x98>
 800334e:	4b7b      	ldr	r3, [pc, #492]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7a      	ldr	r2, [pc, #488]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b78      	ldr	r3, [pc, #480]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a77      	ldr	r2, [pc, #476]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0xbc>
 8003372:	4b72      	ldr	r3, [pc, #456]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a71      	ldr	r2, [pc, #452]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b6f      	ldr	r3, [pc, #444]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6e      	ldr	r2, [pc, #440]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 800338c:	4b6b      	ldr	r3, [pc, #428]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6a      	ldr	r2, [pc, #424]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b68      	ldr	r3, [pc, #416]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a67      	ldr	r2, [pc, #412]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fd fa36 	bl	800081c <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fd fa32 	bl	800081c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	@ 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e200      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b5d      	ldr	r3, [pc, #372]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0xe4>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fd fa22 	bl	800081c <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fd fa1e 	bl	800081c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	@ 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e1ec      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	4b53      	ldr	r3, [pc, #332]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x10c>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d063      	beq.n	80034d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800340a:	4b4c      	ldr	r3, [pc, #304]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003416:	4b49      	ldr	r3, [pc, #292]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b08      	cmp	r3, #8
 8003420:	d11c      	bne.n	800345c <HAL_RCC_OscConfig+0x18c>
 8003422:	4b46      	ldr	r3, [pc, #280]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d116      	bne.n	800345c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	4b43      	ldr	r3, [pc, #268]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x176>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e1c0      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b3d      	ldr	r3, [pc, #244]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4939      	ldr	r1, [pc, #228]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	e03a      	b.n	80034d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	4b36      	ldr	r3, [pc, #216]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fd f9d7 	bl	800081c <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7fd f9d3 	bl	800081c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1a1      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	4b2d      	ldr	r3, [pc, #180]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b2a      	ldr	r3, [pc, #168]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4927      	ldr	r1, [pc, #156]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e015      	b.n	80034d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b26      	ldr	r3, [pc, #152]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fd f9b6 	bl	800081c <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fd f9b2 	bl	800081c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e180      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d03a      	beq.n	8003554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d019      	beq.n	800351a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e6:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <HAL_RCC_OscConfig+0x274>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ec:	f7fd f996 	bl	800081c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fd f992 	bl	800081c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e160      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003512:	2001      	movs	r0, #1
 8003514:	f000 faba 	bl	8003a8c <RCC_Delay>
 8003518:	e01c      	b.n	8003554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <HAL_RCC_OscConfig+0x274>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003520:	f7fd f97c 	bl	800081c <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003526:	e00f      	b.n	8003548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003528:	f7fd f978 	bl	800081c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d908      	bls.n	8003548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e146      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	42420000 	.word	0x42420000
 8003544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b92      	ldr	r3, [pc, #584]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e9      	bne.n	8003528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80a6 	beq.w	80036ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b8b      	ldr	r3, [pc, #556]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b88      	ldr	r3, [pc, #544]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a87      	ldr	r2, [pc, #540]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357c:	61d3      	str	r3, [r2, #28]
 800357e:	4b85      	ldr	r3, [pc, #532]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b82      	ldr	r3, [pc, #520]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4b7f      	ldr	r3, [pc, #508]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7e      	ldr	r2, [pc, #504]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fd f939 	bl	800081c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fd f935 	bl	800081c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	@ 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e103      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b75      	ldr	r3, [pc, #468]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x312>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	e02d      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x334>
 80035ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4a69      	ldr	r2, [pc, #420]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6213      	str	r3, [r2, #32]
 80035f6:	4b67      	ldr	r3, [pc, #412]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a66      	ldr	r2, [pc, #408]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	6213      	str	r3, [r2, #32]
 8003602:	e01c      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d10c      	bne.n	8003626 <HAL_RCC_OscConfig+0x356>
 800360c:	4b61      	ldr	r3, [pc, #388]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4a60      	ldr	r2, [pc, #384]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	6213      	str	r3, [r2, #32]
 8003618:	4b5e      	ldr	r3, [pc, #376]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4a5d      	ldr	r2, [pc, #372]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6213      	str	r3, [r2, #32]
 8003624:	e00b      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 8003626:	4b5b      	ldr	r3, [pc, #364]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4a5a      	ldr	r2, [pc, #360]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6213      	str	r3, [r2, #32]
 8003632:	4b58      	ldr	r3, [pc, #352]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a57      	ldr	r2, [pc, #348]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003646:	f7fd f8e9 	bl	800081c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fd f8e5 	bl	800081c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0b1      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	4b4b      	ldr	r3, [pc, #300]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ee      	beq.n	800364e <HAL_RCC_OscConfig+0x37e>
 8003670:	e014      	b.n	800369c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fd f8d3 	bl	800081c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fd f8cf 	bl	800081c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e09b      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ee      	bne.n	800367a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8087 	beq.w	80037c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b8:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d061      	beq.n	8003788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d146      	bne.n	800375a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b33      	ldr	r3, [pc, #204]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fd f8a3 	bl	800081c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fd f89f 	bl	800081c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e06d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	4b29      	ldr	r3, [pc, #164]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003700:	d108      	bne.n	8003714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003702:	4b24      	ldr	r3, [pc, #144]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4921      	ldr	r1, [pc, #132]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a19      	ldr	r1, [r3, #32]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	430b      	orrs	r3, r1
 8003726:	491b      	ldr	r1, [pc, #108]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fd f873 	bl	800081c <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fd f86f 	bl	800081c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e03d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800374c:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x46a>
 8003758:	e035      	b.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fd f85c 	bl	800081c <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fd f858 	bl	800081c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e026      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x498>
 8003786:	e01e      	b.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e019      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_RCC_OscConfig+0x500>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000

080037d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0d0      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d910      	bls.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b67      	ldr	r3, [pc, #412]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0207 	bic.w	r2, r3, #7
 80037fe:	4965      	ldr	r1, [pc, #404]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b63      	ldr	r3, [pc, #396]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0b8      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003830:	4b59      	ldr	r3, [pc, #356]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a58      	ldr	r2, [pc, #352]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800383a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003848:	4b53      	ldr	r3, [pc, #332]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a52      	ldr	r2, [pc, #328]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b50      	ldr	r3, [pc, #320]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	494d      	ldr	r1, [pc, #308]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d040      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b47      	ldr	r3, [pc, #284]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d115      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07f      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b41      	ldr	r3, [pc, #260]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e073      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06b      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b39      	ldr	r3, [pc, #228]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4936      	ldr	r1, [pc, #216]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fc ffaa 	bl	800081c <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fc ffa6 	bl	800081c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e053      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d210      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b24      	ldr	r3, [pc, #144]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4922      	ldr	r1, [pc, #136]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e032      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4916      	ldr	r1, [pc, #88]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800394e:	4b12      	ldr	r3, [pc, #72]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	490e      	ldr	r1, [pc, #56]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003962:	f000 f821 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	490a      	ldr	r1, [pc, #40]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	5ccb      	ldrb	r3, [r1, r3]
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <HAL_RCC_ClockConfig+0x1cc>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800397e:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fc ff08 	bl	8000798 <HAL_InitTick>

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000
 8003998:	40021000 	.word	0x40021000
 800399c:	08004968 	.word	0x08004968
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20000004 	.word	0x20000004

080039a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039c2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x30>
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d003      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x36>
 80039d6:	e027      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80039da:	613b      	str	r3, [r7, #16]
      break;
 80039dc:	e027      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	0c9b      	lsrs	r3, r3, #18
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	4a17      	ldr	r2, [pc, #92]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d010      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039f6:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	0c5b      	lsrs	r3, r3, #17
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	4a11      	ldr	r2, [pc, #68]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a0d      	ldr	r2, [pc, #52]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a0a:	fb03 f202 	mul.w	r2, r3, r2
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e004      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	613b      	str	r3, [r7, #16]
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a2a:	613b      	str	r3, [r7, #16]
      break;
 8003a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2e:	693b      	ldr	r3, [r7, #16]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	08004980 	.word	0x08004980
 8003a48:	08004990 	.word	0x08004990
 8003a4c:	003d0900 	.word	0x003d0900

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b02      	ldr	r3, [pc, #8]	@ (8003a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	20000000 	.word	0x20000000

08003a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a68:	f7ff fff2 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4903      	ldr	r1, [pc, #12]	@ (8003a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	08004978 	.word	0x08004978

08003a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <RCC_Delay+0x34>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac4 <RCC_Delay+0x38>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0a5b      	lsrs	r3, r3, #9
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003aa8:	bf00      	nop
  }
  while (Delay --);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1e5a      	subs	r2, r3, #1
 8003aae:	60fa      	str	r2, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f9      	bne.n	8003aa8 <RCC_Delay+0x1c>
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	20000000 	.word	0x20000000
 8003ac4:	10624dd3 	.word	0x10624dd3

08003ac8 <std>:
 8003ac8:	2300      	movs	r3, #0
 8003aca:	b510      	push	{r4, lr}
 8003acc:	4604      	mov	r4, r0
 8003ace:	e9c0 3300 	strd	r3, r3, [r0]
 8003ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ad6:	6083      	str	r3, [r0, #8]
 8003ad8:	8181      	strh	r1, [r0, #12]
 8003ada:	6643      	str	r3, [r0, #100]	@ 0x64
 8003adc:	81c2      	strh	r2, [r0, #14]
 8003ade:	6183      	str	r3, [r0, #24]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	305c      	adds	r0, #92	@ 0x5c
 8003ae6:	f000 f906 	bl	8003cf6 <memset>
 8003aea:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <std+0x58>)
 8003aec:	6224      	str	r4, [r4, #32]
 8003aee:	6263      	str	r3, [r4, #36]	@ 0x24
 8003af0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <std+0x5c>)
 8003af2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003af4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <std+0x60>)
 8003af6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003af8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b2c <std+0x64>)
 8003afa:	6323      	str	r3, [r4, #48]	@ 0x30
 8003afc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <std+0x68>)
 8003afe:	429c      	cmp	r4, r3
 8003b00:	d006      	beq.n	8003b10 <std+0x48>
 8003b02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b06:	4294      	cmp	r4, r2
 8003b08:	d002      	beq.n	8003b10 <std+0x48>
 8003b0a:	33d0      	adds	r3, #208	@ 0xd0
 8003b0c:	429c      	cmp	r4, r3
 8003b0e:	d105      	bne.n	8003b1c <std+0x54>
 8003b10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b18:	f000 b966 	b.w	8003de8 <__retarget_lock_init_recursive>
 8003b1c:	bd10      	pop	{r4, pc}
 8003b1e:	bf00      	nop
 8003b20:	08003c71 	.word	0x08003c71
 8003b24:	08003c93 	.word	0x08003c93
 8003b28:	08003ccb 	.word	0x08003ccb
 8003b2c:	08003cef 	.word	0x08003cef
 8003b30:	20000138 	.word	0x20000138

08003b34 <stdio_exit_handler>:
 8003b34:	4a02      	ldr	r2, [pc, #8]	@ (8003b40 <stdio_exit_handler+0xc>)
 8003b36:	4903      	ldr	r1, [pc, #12]	@ (8003b44 <stdio_exit_handler+0x10>)
 8003b38:	4803      	ldr	r0, [pc, #12]	@ (8003b48 <stdio_exit_handler+0x14>)
 8003b3a:	f000 b869 	b.w	8003c10 <_fwalk_sglue>
 8003b3e:	bf00      	nop
 8003b40:	2000000c 	.word	0x2000000c
 8003b44:	08004681 	.word	0x08004681
 8003b48:	2000001c 	.word	0x2000001c

08003b4c <cleanup_stdio>:
 8003b4c:	6841      	ldr	r1, [r0, #4]
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <cleanup_stdio+0x34>)
 8003b50:	b510      	push	{r4, lr}
 8003b52:	4299      	cmp	r1, r3
 8003b54:	4604      	mov	r4, r0
 8003b56:	d001      	beq.n	8003b5c <cleanup_stdio+0x10>
 8003b58:	f000 fd92 	bl	8004680 <_fflush_r>
 8003b5c:	68a1      	ldr	r1, [r4, #8]
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <cleanup_stdio+0x38>)
 8003b60:	4299      	cmp	r1, r3
 8003b62:	d002      	beq.n	8003b6a <cleanup_stdio+0x1e>
 8003b64:	4620      	mov	r0, r4
 8003b66:	f000 fd8b 	bl	8004680 <_fflush_r>
 8003b6a:	68e1      	ldr	r1, [r4, #12]
 8003b6c:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <cleanup_stdio+0x3c>)
 8003b6e:	4299      	cmp	r1, r3
 8003b70:	d004      	beq.n	8003b7c <cleanup_stdio+0x30>
 8003b72:	4620      	mov	r0, r4
 8003b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b78:	f000 bd82 	b.w	8004680 <_fflush_r>
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000138 	.word	0x20000138
 8003b84:	200001a0 	.word	0x200001a0
 8003b88:	20000208 	.word	0x20000208

08003b8c <global_stdio_init.part.0>:
 8003b8c:	b510      	push	{r4, lr}
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <global_stdio_init.part.0+0x30>)
 8003b90:	4c0b      	ldr	r4, [pc, #44]	@ (8003bc0 <global_stdio_init.part.0+0x34>)
 8003b92:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc4 <global_stdio_init.part.0+0x38>)
 8003b94:	4620      	mov	r0, r4
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	2104      	movs	r1, #4
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f7ff ff94 	bl	8003ac8 <std>
 8003ba0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	2109      	movs	r1, #9
 8003ba8:	f7ff ff8e 	bl	8003ac8 <std>
 8003bac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb6:	2112      	movs	r1, #18
 8003bb8:	f7ff bf86 	b.w	8003ac8 <std>
 8003bbc:	20000270 	.word	0x20000270
 8003bc0:	20000138 	.word	0x20000138
 8003bc4:	08003b35 	.word	0x08003b35

08003bc8 <__sfp_lock_acquire>:
 8003bc8:	4801      	ldr	r0, [pc, #4]	@ (8003bd0 <__sfp_lock_acquire+0x8>)
 8003bca:	f000 b90e 	b.w	8003dea <__retarget_lock_acquire_recursive>
 8003bce:	bf00      	nop
 8003bd0:	20000279 	.word	0x20000279

08003bd4 <__sfp_lock_release>:
 8003bd4:	4801      	ldr	r0, [pc, #4]	@ (8003bdc <__sfp_lock_release+0x8>)
 8003bd6:	f000 b909 	b.w	8003dec <__retarget_lock_release_recursive>
 8003bda:	bf00      	nop
 8003bdc:	20000279 	.word	0x20000279

08003be0 <__sinit>:
 8003be0:	b510      	push	{r4, lr}
 8003be2:	4604      	mov	r4, r0
 8003be4:	f7ff fff0 	bl	8003bc8 <__sfp_lock_acquire>
 8003be8:	6a23      	ldr	r3, [r4, #32]
 8003bea:	b11b      	cbz	r3, 8003bf4 <__sinit+0x14>
 8003bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf0:	f7ff bff0 	b.w	8003bd4 <__sfp_lock_release>
 8003bf4:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <__sinit+0x28>)
 8003bf6:	6223      	str	r3, [r4, #32]
 8003bf8:	4b04      	ldr	r3, [pc, #16]	@ (8003c0c <__sinit+0x2c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f5      	bne.n	8003bec <__sinit+0xc>
 8003c00:	f7ff ffc4 	bl	8003b8c <global_stdio_init.part.0>
 8003c04:	e7f2      	b.n	8003bec <__sinit+0xc>
 8003c06:	bf00      	nop
 8003c08:	08003b4d 	.word	0x08003b4d
 8003c0c:	20000270 	.word	0x20000270

08003c10 <_fwalk_sglue>:
 8003c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c14:	4607      	mov	r7, r0
 8003c16:	4688      	mov	r8, r1
 8003c18:	4614      	mov	r4, r2
 8003c1a:	2600      	movs	r6, #0
 8003c1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c20:	f1b9 0901 	subs.w	r9, r9, #1
 8003c24:	d505      	bpl.n	8003c32 <_fwalk_sglue+0x22>
 8003c26:	6824      	ldr	r4, [r4, #0]
 8003c28:	2c00      	cmp	r4, #0
 8003c2a:	d1f7      	bne.n	8003c1c <_fwalk_sglue+0xc>
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c32:	89ab      	ldrh	r3, [r5, #12]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d907      	bls.n	8003c48 <_fwalk_sglue+0x38>
 8003c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	d003      	beq.n	8003c48 <_fwalk_sglue+0x38>
 8003c40:	4629      	mov	r1, r5
 8003c42:	4638      	mov	r0, r7
 8003c44:	47c0      	blx	r8
 8003c46:	4306      	orrs	r6, r0
 8003c48:	3568      	adds	r5, #104	@ 0x68
 8003c4a:	e7e9      	b.n	8003c20 <_fwalk_sglue+0x10>

08003c4c <iprintf>:
 8003c4c:	b40f      	push	{r0, r1, r2, r3}
 8003c4e:	b507      	push	{r0, r1, r2, lr}
 8003c50:	4906      	ldr	r1, [pc, #24]	@ (8003c6c <iprintf+0x20>)
 8003c52:	ab04      	add	r3, sp, #16
 8003c54:	6808      	ldr	r0, [r1, #0]
 8003c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c5a:	6881      	ldr	r1, [r0, #8]
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	f000 f9e5 	bl	800402c <_vfiprintf_r>
 8003c62:	b003      	add	sp, #12
 8003c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c68:	b004      	add	sp, #16
 8003c6a:	4770      	bx	lr
 8003c6c:	20000018 	.word	0x20000018

08003c70 <__sread>:
 8003c70:	b510      	push	{r4, lr}
 8003c72:	460c      	mov	r4, r1
 8003c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c78:	f000 f868 	bl	8003d4c <_read_r>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	bfab      	itete	ge
 8003c80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c82:	89a3      	ldrhlt	r3, [r4, #12]
 8003c84:	181b      	addge	r3, r3, r0
 8003c86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c8a:	bfac      	ite	ge
 8003c8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c8e:	81a3      	strhlt	r3, [r4, #12]
 8003c90:	bd10      	pop	{r4, pc}

08003c92 <__swrite>:
 8003c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c96:	461f      	mov	r7, r3
 8003c98:	898b      	ldrh	r3, [r1, #12]
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	05db      	lsls	r3, r3, #23
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	4616      	mov	r6, r2
 8003ca2:	d505      	bpl.n	8003cb0 <__swrite+0x1e>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cac:	f000 f83c 	bl	8003d28 <_lseek_r>
 8003cb0:	89a3      	ldrh	r3, [r4, #12]
 8003cb2:	4632      	mov	r2, r6
 8003cb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cb8:	81a3      	strh	r3, [r4, #12]
 8003cba:	4628      	mov	r0, r5
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc6:	f000 b853 	b.w	8003d70 <_write_r>

08003cca <__sseek>:
 8003cca:	b510      	push	{r4, lr}
 8003ccc:	460c      	mov	r4, r1
 8003cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd2:	f000 f829 	bl	8003d28 <_lseek_r>
 8003cd6:	1c43      	adds	r3, r0, #1
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	bf15      	itete	ne
 8003cdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003cde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ce2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ce6:	81a3      	strheq	r3, [r4, #12]
 8003ce8:	bf18      	it	ne
 8003cea:	81a3      	strhne	r3, [r4, #12]
 8003cec:	bd10      	pop	{r4, pc}

08003cee <__sclose>:
 8003cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf2:	f000 b809 	b.w	8003d08 <_close_r>

08003cf6 <memset>:
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4402      	add	r2, r0
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d100      	bne.n	8003d00 <memset+0xa>
 8003cfe:	4770      	bx	lr
 8003d00:	f803 1b01 	strb.w	r1, [r3], #1
 8003d04:	e7f9      	b.n	8003cfa <memset+0x4>
	...

08003d08 <_close_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	4d05      	ldr	r5, [pc, #20]	@ (8003d24 <_close_r+0x1c>)
 8003d0e:	4604      	mov	r4, r0
 8003d10:	4608      	mov	r0, r1
 8003d12:	602b      	str	r3, [r5, #0]
 8003d14:	f7fc fc97 	bl	8000646 <_close>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d102      	bne.n	8003d22 <_close_r+0x1a>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	b103      	cbz	r3, 8003d22 <_close_r+0x1a>
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	20000274 	.word	0x20000274

08003d28 <_lseek_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	2200      	movs	r2, #0
 8003d32:	4d05      	ldr	r5, [pc, #20]	@ (8003d48 <_lseek_r+0x20>)
 8003d34:	602a      	str	r2, [r5, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	f7fc fca9 	bl	800068e <_lseek>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d102      	bne.n	8003d46 <_lseek_r+0x1e>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	b103      	cbz	r3, 8003d46 <_lseek_r+0x1e>
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	20000274 	.word	0x20000274

08003d4c <_read_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4604      	mov	r4, r0
 8003d50:	4608      	mov	r0, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	2200      	movs	r2, #0
 8003d56:	4d05      	ldr	r5, [pc, #20]	@ (8003d6c <_read_r+0x20>)
 8003d58:	602a      	str	r2, [r5, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f7fc fc3a 	bl	80005d4 <_read>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_read_r+0x1e>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_read_r+0x1e>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	20000274 	.word	0x20000274

08003d70 <_write_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4604      	mov	r4, r0
 8003d74:	4608      	mov	r0, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4d05      	ldr	r5, [pc, #20]	@ (8003d90 <_write_r+0x20>)
 8003d7c:	602a      	str	r2, [r5, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7fc fc45 	bl	800060e <_write>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d102      	bne.n	8003d8e <_write_r+0x1e>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	b103      	cbz	r3, 8003d8e <_write_r+0x1e>
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	20000274 	.word	0x20000274

08003d94 <__errno>:
 8003d94:	4b01      	ldr	r3, [pc, #4]	@ (8003d9c <__errno+0x8>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000018 	.word	0x20000018

08003da0 <__libc_init_array>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	2600      	movs	r6, #0
 8003da4:	4d0c      	ldr	r5, [pc, #48]	@ (8003dd8 <__libc_init_array+0x38>)
 8003da6:	4c0d      	ldr	r4, [pc, #52]	@ (8003ddc <__libc_init_array+0x3c>)
 8003da8:	1b64      	subs	r4, r4, r5
 8003daa:	10a4      	asrs	r4, r4, #2
 8003dac:	42a6      	cmp	r6, r4
 8003dae:	d109      	bne.n	8003dc4 <__libc_init_array+0x24>
 8003db0:	f000 fdc4 	bl	800493c <_init>
 8003db4:	2600      	movs	r6, #0
 8003db6:	4d0a      	ldr	r5, [pc, #40]	@ (8003de0 <__libc_init_array+0x40>)
 8003db8:	4c0a      	ldr	r4, [pc, #40]	@ (8003de4 <__libc_init_array+0x44>)
 8003dba:	1b64      	subs	r4, r4, r5
 8003dbc:	10a4      	asrs	r4, r4, #2
 8003dbe:	42a6      	cmp	r6, r4
 8003dc0:	d105      	bne.n	8003dce <__libc_init_array+0x2e>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc8:	4798      	blx	r3
 8003dca:	3601      	adds	r6, #1
 8003dcc:	e7ee      	b.n	8003dac <__libc_init_array+0xc>
 8003dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd2:	4798      	blx	r3
 8003dd4:	3601      	adds	r6, #1
 8003dd6:	e7f2      	b.n	8003dbe <__libc_init_array+0x1e>
 8003dd8:	080049c8 	.word	0x080049c8
 8003ddc:	080049c8 	.word	0x080049c8
 8003de0:	080049c8 	.word	0x080049c8
 8003de4:	080049cc 	.word	0x080049cc

08003de8 <__retarget_lock_init_recursive>:
 8003de8:	4770      	bx	lr

08003dea <__retarget_lock_acquire_recursive>:
 8003dea:	4770      	bx	lr

08003dec <__retarget_lock_release_recursive>:
 8003dec:	4770      	bx	lr
	...

08003df0 <_free_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4605      	mov	r5, r0
 8003df4:	2900      	cmp	r1, #0
 8003df6:	d040      	beq.n	8003e7a <_free_r+0x8a>
 8003df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dfc:	1f0c      	subs	r4, r1, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bfb8      	it	lt
 8003e02:	18e4      	addlt	r4, r4, r3
 8003e04:	f000 f8de 	bl	8003fc4 <__malloc_lock>
 8003e08:	4a1c      	ldr	r2, [pc, #112]	@ (8003e7c <_free_r+0x8c>)
 8003e0a:	6813      	ldr	r3, [r2, #0]
 8003e0c:	b933      	cbnz	r3, 8003e1c <_free_r+0x2c>
 8003e0e:	6063      	str	r3, [r4, #4]
 8003e10:	6014      	str	r4, [r2, #0]
 8003e12:	4628      	mov	r0, r5
 8003e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e18:	f000 b8da 	b.w	8003fd0 <__malloc_unlock>
 8003e1c:	42a3      	cmp	r3, r4
 8003e1e:	d908      	bls.n	8003e32 <_free_r+0x42>
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	1821      	adds	r1, r4, r0
 8003e24:	428b      	cmp	r3, r1
 8003e26:	bf01      	itttt	eq
 8003e28:	6819      	ldreq	r1, [r3, #0]
 8003e2a:	685b      	ldreq	r3, [r3, #4]
 8003e2c:	1809      	addeq	r1, r1, r0
 8003e2e:	6021      	streq	r1, [r4, #0]
 8003e30:	e7ed      	b.n	8003e0e <_free_r+0x1e>
 8003e32:	461a      	mov	r2, r3
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	b10b      	cbz	r3, 8003e3c <_free_r+0x4c>
 8003e38:	42a3      	cmp	r3, r4
 8003e3a:	d9fa      	bls.n	8003e32 <_free_r+0x42>
 8003e3c:	6811      	ldr	r1, [r2, #0]
 8003e3e:	1850      	adds	r0, r2, r1
 8003e40:	42a0      	cmp	r0, r4
 8003e42:	d10b      	bne.n	8003e5c <_free_r+0x6c>
 8003e44:	6820      	ldr	r0, [r4, #0]
 8003e46:	4401      	add	r1, r0
 8003e48:	1850      	adds	r0, r2, r1
 8003e4a:	4283      	cmp	r3, r0
 8003e4c:	6011      	str	r1, [r2, #0]
 8003e4e:	d1e0      	bne.n	8003e12 <_free_r+0x22>
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4408      	add	r0, r1
 8003e56:	6010      	str	r0, [r2, #0]
 8003e58:	6053      	str	r3, [r2, #4]
 8003e5a:	e7da      	b.n	8003e12 <_free_r+0x22>
 8003e5c:	d902      	bls.n	8003e64 <_free_r+0x74>
 8003e5e:	230c      	movs	r3, #12
 8003e60:	602b      	str	r3, [r5, #0]
 8003e62:	e7d6      	b.n	8003e12 <_free_r+0x22>
 8003e64:	6820      	ldr	r0, [r4, #0]
 8003e66:	1821      	adds	r1, r4, r0
 8003e68:	428b      	cmp	r3, r1
 8003e6a:	bf01      	itttt	eq
 8003e6c:	6819      	ldreq	r1, [r3, #0]
 8003e6e:	685b      	ldreq	r3, [r3, #4]
 8003e70:	1809      	addeq	r1, r1, r0
 8003e72:	6021      	streq	r1, [r4, #0]
 8003e74:	6063      	str	r3, [r4, #4]
 8003e76:	6054      	str	r4, [r2, #4]
 8003e78:	e7cb      	b.n	8003e12 <_free_r+0x22>
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	20000280 	.word	0x20000280

08003e80 <sbrk_aligned>:
 8003e80:	b570      	push	{r4, r5, r6, lr}
 8003e82:	4e0f      	ldr	r6, [pc, #60]	@ (8003ec0 <sbrk_aligned+0x40>)
 8003e84:	460c      	mov	r4, r1
 8003e86:	6831      	ldr	r1, [r6, #0]
 8003e88:	4605      	mov	r5, r0
 8003e8a:	b911      	cbnz	r1, 8003e92 <sbrk_aligned+0x12>
 8003e8c:	f000 fcb4 	bl	80047f8 <_sbrk_r>
 8003e90:	6030      	str	r0, [r6, #0]
 8003e92:	4621      	mov	r1, r4
 8003e94:	4628      	mov	r0, r5
 8003e96:	f000 fcaf 	bl	80047f8 <_sbrk_r>
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	d103      	bne.n	8003ea6 <sbrk_aligned+0x26>
 8003e9e:	f04f 34ff 	mov.w	r4, #4294967295
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
 8003ea6:	1cc4      	adds	r4, r0, #3
 8003ea8:	f024 0403 	bic.w	r4, r4, #3
 8003eac:	42a0      	cmp	r0, r4
 8003eae:	d0f8      	beq.n	8003ea2 <sbrk_aligned+0x22>
 8003eb0:	1a21      	subs	r1, r4, r0
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f000 fca0 	bl	80047f8 <_sbrk_r>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d1f2      	bne.n	8003ea2 <sbrk_aligned+0x22>
 8003ebc:	e7ef      	b.n	8003e9e <sbrk_aligned+0x1e>
 8003ebe:	bf00      	nop
 8003ec0:	2000027c 	.word	0x2000027c

08003ec4 <_malloc_r>:
 8003ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ec8:	1ccd      	adds	r5, r1, #3
 8003eca:	f025 0503 	bic.w	r5, r5, #3
 8003ece:	3508      	adds	r5, #8
 8003ed0:	2d0c      	cmp	r5, #12
 8003ed2:	bf38      	it	cc
 8003ed4:	250c      	movcc	r5, #12
 8003ed6:	2d00      	cmp	r5, #0
 8003ed8:	4606      	mov	r6, r0
 8003eda:	db01      	blt.n	8003ee0 <_malloc_r+0x1c>
 8003edc:	42a9      	cmp	r1, r5
 8003ede:	d904      	bls.n	8003eea <_malloc_r+0x26>
 8003ee0:	230c      	movs	r3, #12
 8003ee2:	6033      	str	r3, [r6, #0]
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fc0 <_malloc_r+0xfc>
 8003eee:	f000 f869 	bl	8003fc4 <__malloc_lock>
 8003ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef6:	461c      	mov	r4, r3
 8003ef8:	bb44      	cbnz	r4, 8003f4c <_malloc_r+0x88>
 8003efa:	4629      	mov	r1, r5
 8003efc:	4630      	mov	r0, r6
 8003efe:	f7ff ffbf 	bl	8003e80 <sbrk_aligned>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	4604      	mov	r4, r0
 8003f06:	d158      	bne.n	8003fba <_malloc_r+0xf6>
 8003f08:	f8d8 4000 	ldr.w	r4, [r8]
 8003f0c:	4627      	mov	r7, r4
 8003f0e:	2f00      	cmp	r7, #0
 8003f10:	d143      	bne.n	8003f9a <_malloc_r+0xd6>
 8003f12:	2c00      	cmp	r4, #0
 8003f14:	d04b      	beq.n	8003fae <_malloc_r+0xea>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	4639      	mov	r1, r7
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	eb04 0903 	add.w	r9, r4, r3
 8003f20:	f000 fc6a 	bl	80047f8 <_sbrk_r>
 8003f24:	4581      	cmp	r9, r0
 8003f26:	d142      	bne.n	8003fae <_malloc_r+0xea>
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	1a6d      	subs	r5, r5, r1
 8003f2e:	4629      	mov	r1, r5
 8003f30:	f7ff ffa6 	bl	8003e80 <sbrk_aligned>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d03a      	beq.n	8003fae <_malloc_r+0xea>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	442b      	add	r3, r5
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	bb62      	cbnz	r2, 8003fa0 <_malloc_r+0xdc>
 8003f46:	f8c8 7000 	str.w	r7, [r8]
 8003f4a:	e00f      	b.n	8003f6c <_malloc_r+0xa8>
 8003f4c:	6822      	ldr	r2, [r4, #0]
 8003f4e:	1b52      	subs	r2, r2, r5
 8003f50:	d420      	bmi.n	8003f94 <_malloc_r+0xd0>
 8003f52:	2a0b      	cmp	r2, #11
 8003f54:	d917      	bls.n	8003f86 <_malloc_r+0xc2>
 8003f56:	1961      	adds	r1, r4, r5
 8003f58:	42a3      	cmp	r3, r4
 8003f5a:	6025      	str	r5, [r4, #0]
 8003f5c:	bf18      	it	ne
 8003f5e:	6059      	strne	r1, [r3, #4]
 8003f60:	6863      	ldr	r3, [r4, #4]
 8003f62:	bf08      	it	eq
 8003f64:	f8c8 1000 	streq.w	r1, [r8]
 8003f68:	5162      	str	r2, [r4, r5]
 8003f6a:	604b      	str	r3, [r1, #4]
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f000 f82f 	bl	8003fd0 <__malloc_unlock>
 8003f72:	f104 000b 	add.w	r0, r4, #11
 8003f76:	1d23      	adds	r3, r4, #4
 8003f78:	f020 0007 	bic.w	r0, r0, #7
 8003f7c:	1ac2      	subs	r2, r0, r3
 8003f7e:	bf1c      	itt	ne
 8003f80:	1a1b      	subne	r3, r3, r0
 8003f82:	50a3      	strne	r3, [r4, r2]
 8003f84:	e7af      	b.n	8003ee6 <_malloc_r+0x22>
 8003f86:	6862      	ldr	r2, [r4, #4]
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	bf0c      	ite	eq
 8003f8c:	f8c8 2000 	streq.w	r2, [r8]
 8003f90:	605a      	strne	r2, [r3, #4]
 8003f92:	e7eb      	b.n	8003f6c <_malloc_r+0xa8>
 8003f94:	4623      	mov	r3, r4
 8003f96:	6864      	ldr	r4, [r4, #4]
 8003f98:	e7ae      	b.n	8003ef8 <_malloc_r+0x34>
 8003f9a:	463c      	mov	r4, r7
 8003f9c:	687f      	ldr	r7, [r7, #4]
 8003f9e:	e7b6      	b.n	8003f0e <_malloc_r+0x4a>
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	d1fb      	bne.n	8003fa0 <_malloc_r+0xdc>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6053      	str	r3, [r2, #4]
 8003fac:	e7de      	b.n	8003f6c <_malloc_r+0xa8>
 8003fae:	230c      	movs	r3, #12
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	6033      	str	r3, [r6, #0]
 8003fb4:	f000 f80c 	bl	8003fd0 <__malloc_unlock>
 8003fb8:	e794      	b.n	8003ee4 <_malloc_r+0x20>
 8003fba:	6005      	str	r5, [r0, #0]
 8003fbc:	e7d6      	b.n	8003f6c <_malloc_r+0xa8>
 8003fbe:	bf00      	nop
 8003fc0:	20000280 	.word	0x20000280

08003fc4 <__malloc_lock>:
 8003fc4:	4801      	ldr	r0, [pc, #4]	@ (8003fcc <__malloc_lock+0x8>)
 8003fc6:	f7ff bf10 	b.w	8003dea <__retarget_lock_acquire_recursive>
 8003fca:	bf00      	nop
 8003fcc:	20000278 	.word	0x20000278

08003fd0 <__malloc_unlock>:
 8003fd0:	4801      	ldr	r0, [pc, #4]	@ (8003fd8 <__malloc_unlock+0x8>)
 8003fd2:	f7ff bf0b 	b.w	8003dec <__retarget_lock_release_recursive>
 8003fd6:	bf00      	nop
 8003fd8:	20000278 	.word	0x20000278

08003fdc <__sfputc_r>:
 8003fdc:	6893      	ldr	r3, [r2, #8]
 8003fde:	b410      	push	{r4}
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	6093      	str	r3, [r2, #8]
 8003fe6:	da07      	bge.n	8003ff8 <__sfputc_r+0x1c>
 8003fe8:	6994      	ldr	r4, [r2, #24]
 8003fea:	42a3      	cmp	r3, r4
 8003fec:	db01      	blt.n	8003ff2 <__sfputc_r+0x16>
 8003fee:	290a      	cmp	r1, #10
 8003ff0:	d102      	bne.n	8003ff8 <__sfputc_r+0x1c>
 8003ff2:	bc10      	pop	{r4}
 8003ff4:	f000 bb6c 	b.w	80046d0 <__swbuf_r>
 8003ff8:	6813      	ldr	r3, [r2, #0]
 8003ffa:	1c58      	adds	r0, r3, #1
 8003ffc:	6010      	str	r0, [r2, #0]
 8003ffe:	7019      	strb	r1, [r3, #0]
 8004000:	4608      	mov	r0, r1
 8004002:	bc10      	pop	{r4}
 8004004:	4770      	bx	lr

08004006 <__sfputs_r>:
 8004006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004008:	4606      	mov	r6, r0
 800400a:	460f      	mov	r7, r1
 800400c:	4614      	mov	r4, r2
 800400e:	18d5      	adds	r5, r2, r3
 8004010:	42ac      	cmp	r4, r5
 8004012:	d101      	bne.n	8004018 <__sfputs_r+0x12>
 8004014:	2000      	movs	r0, #0
 8004016:	e007      	b.n	8004028 <__sfputs_r+0x22>
 8004018:	463a      	mov	r2, r7
 800401a:	4630      	mov	r0, r6
 800401c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004020:	f7ff ffdc 	bl	8003fdc <__sfputc_r>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d1f3      	bne.n	8004010 <__sfputs_r+0xa>
 8004028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800402c <_vfiprintf_r>:
 800402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004030:	460d      	mov	r5, r1
 8004032:	4614      	mov	r4, r2
 8004034:	4698      	mov	r8, r3
 8004036:	4606      	mov	r6, r0
 8004038:	b09d      	sub	sp, #116	@ 0x74
 800403a:	b118      	cbz	r0, 8004044 <_vfiprintf_r+0x18>
 800403c:	6a03      	ldr	r3, [r0, #32]
 800403e:	b90b      	cbnz	r3, 8004044 <_vfiprintf_r+0x18>
 8004040:	f7ff fdce 	bl	8003be0 <__sinit>
 8004044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004046:	07d9      	lsls	r1, r3, #31
 8004048:	d405      	bmi.n	8004056 <_vfiprintf_r+0x2a>
 800404a:	89ab      	ldrh	r3, [r5, #12]
 800404c:	059a      	lsls	r2, r3, #22
 800404e:	d402      	bmi.n	8004056 <_vfiprintf_r+0x2a>
 8004050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004052:	f7ff feca 	bl	8003dea <__retarget_lock_acquire_recursive>
 8004056:	89ab      	ldrh	r3, [r5, #12]
 8004058:	071b      	lsls	r3, r3, #28
 800405a:	d501      	bpl.n	8004060 <_vfiprintf_r+0x34>
 800405c:	692b      	ldr	r3, [r5, #16]
 800405e:	b99b      	cbnz	r3, 8004088 <_vfiprintf_r+0x5c>
 8004060:	4629      	mov	r1, r5
 8004062:	4630      	mov	r0, r6
 8004064:	f000 fb72 	bl	800474c <__swsetup_r>
 8004068:	b170      	cbz	r0, 8004088 <_vfiprintf_r+0x5c>
 800406a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800406c:	07dc      	lsls	r4, r3, #31
 800406e:	d504      	bpl.n	800407a <_vfiprintf_r+0x4e>
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	b01d      	add	sp, #116	@ 0x74
 8004076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407a:	89ab      	ldrh	r3, [r5, #12]
 800407c:	0598      	lsls	r0, r3, #22
 800407e:	d4f7      	bmi.n	8004070 <_vfiprintf_r+0x44>
 8004080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004082:	f7ff feb3 	bl	8003dec <__retarget_lock_release_recursive>
 8004086:	e7f3      	b.n	8004070 <_vfiprintf_r+0x44>
 8004088:	2300      	movs	r3, #0
 800408a:	9309      	str	r3, [sp, #36]	@ 0x24
 800408c:	2320      	movs	r3, #32
 800408e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004092:	2330      	movs	r3, #48	@ 0x30
 8004094:	f04f 0901 	mov.w	r9, #1
 8004098:	f8cd 800c 	str.w	r8, [sp, #12]
 800409c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004248 <_vfiprintf_r+0x21c>
 80040a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040a4:	4623      	mov	r3, r4
 80040a6:	469a      	mov	sl, r3
 80040a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040ac:	b10a      	cbz	r2, 80040b2 <_vfiprintf_r+0x86>
 80040ae:	2a25      	cmp	r2, #37	@ 0x25
 80040b0:	d1f9      	bne.n	80040a6 <_vfiprintf_r+0x7a>
 80040b2:	ebba 0b04 	subs.w	fp, sl, r4
 80040b6:	d00b      	beq.n	80040d0 <_vfiprintf_r+0xa4>
 80040b8:	465b      	mov	r3, fp
 80040ba:	4622      	mov	r2, r4
 80040bc:	4629      	mov	r1, r5
 80040be:	4630      	mov	r0, r6
 80040c0:	f7ff ffa1 	bl	8004006 <__sfputs_r>
 80040c4:	3001      	adds	r0, #1
 80040c6:	f000 80a7 	beq.w	8004218 <_vfiprintf_r+0x1ec>
 80040ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040cc:	445a      	add	r2, fp
 80040ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80040d0:	f89a 3000 	ldrb.w	r3, [sl]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 809f 	beq.w	8004218 <_vfiprintf_r+0x1ec>
 80040da:	2300      	movs	r3, #0
 80040dc:	f04f 32ff 	mov.w	r2, #4294967295
 80040e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040e4:	f10a 0a01 	add.w	sl, sl, #1
 80040e8:	9304      	str	r3, [sp, #16]
 80040ea:	9307      	str	r3, [sp, #28]
 80040ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80040f2:	4654      	mov	r4, sl
 80040f4:	2205      	movs	r2, #5
 80040f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040fa:	4853      	ldr	r0, [pc, #332]	@ (8004248 <_vfiprintf_r+0x21c>)
 80040fc:	f000 fb8c 	bl	8004818 <memchr>
 8004100:	9a04      	ldr	r2, [sp, #16]
 8004102:	b9d8      	cbnz	r0, 800413c <_vfiprintf_r+0x110>
 8004104:	06d1      	lsls	r1, r2, #27
 8004106:	bf44      	itt	mi
 8004108:	2320      	movmi	r3, #32
 800410a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800410e:	0713      	lsls	r3, r2, #28
 8004110:	bf44      	itt	mi
 8004112:	232b      	movmi	r3, #43	@ 0x2b
 8004114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004118:	f89a 3000 	ldrb.w	r3, [sl]
 800411c:	2b2a      	cmp	r3, #42	@ 0x2a
 800411e:	d015      	beq.n	800414c <_vfiprintf_r+0x120>
 8004120:	4654      	mov	r4, sl
 8004122:	2000      	movs	r0, #0
 8004124:	f04f 0c0a 	mov.w	ip, #10
 8004128:	9a07      	ldr	r2, [sp, #28]
 800412a:	4621      	mov	r1, r4
 800412c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004130:	3b30      	subs	r3, #48	@ 0x30
 8004132:	2b09      	cmp	r3, #9
 8004134:	d94b      	bls.n	80041ce <_vfiprintf_r+0x1a2>
 8004136:	b1b0      	cbz	r0, 8004166 <_vfiprintf_r+0x13a>
 8004138:	9207      	str	r2, [sp, #28]
 800413a:	e014      	b.n	8004166 <_vfiprintf_r+0x13a>
 800413c:	eba0 0308 	sub.w	r3, r0, r8
 8004140:	fa09 f303 	lsl.w	r3, r9, r3
 8004144:	4313      	orrs	r3, r2
 8004146:	46a2      	mov	sl, r4
 8004148:	9304      	str	r3, [sp, #16]
 800414a:	e7d2      	b.n	80040f2 <_vfiprintf_r+0xc6>
 800414c:	9b03      	ldr	r3, [sp, #12]
 800414e:	1d19      	adds	r1, r3, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	9103      	str	r1, [sp, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	bfbb      	ittet	lt
 8004158:	425b      	neglt	r3, r3
 800415a:	f042 0202 	orrlt.w	r2, r2, #2
 800415e:	9307      	strge	r3, [sp, #28]
 8004160:	9307      	strlt	r3, [sp, #28]
 8004162:	bfb8      	it	lt
 8004164:	9204      	strlt	r2, [sp, #16]
 8004166:	7823      	ldrb	r3, [r4, #0]
 8004168:	2b2e      	cmp	r3, #46	@ 0x2e
 800416a:	d10a      	bne.n	8004182 <_vfiprintf_r+0x156>
 800416c:	7863      	ldrb	r3, [r4, #1]
 800416e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004170:	d132      	bne.n	80041d8 <_vfiprintf_r+0x1ac>
 8004172:	9b03      	ldr	r3, [sp, #12]
 8004174:	3402      	adds	r4, #2
 8004176:	1d1a      	adds	r2, r3, #4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	9203      	str	r2, [sp, #12]
 800417c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004180:	9305      	str	r3, [sp, #20]
 8004182:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800424c <_vfiprintf_r+0x220>
 8004186:	2203      	movs	r2, #3
 8004188:	4650      	mov	r0, sl
 800418a:	7821      	ldrb	r1, [r4, #0]
 800418c:	f000 fb44 	bl	8004818 <memchr>
 8004190:	b138      	cbz	r0, 80041a2 <_vfiprintf_r+0x176>
 8004192:	2240      	movs	r2, #64	@ 0x40
 8004194:	9b04      	ldr	r3, [sp, #16]
 8004196:	eba0 000a 	sub.w	r0, r0, sl
 800419a:	4082      	lsls	r2, r0
 800419c:	4313      	orrs	r3, r2
 800419e:	3401      	adds	r4, #1
 80041a0:	9304      	str	r3, [sp, #16]
 80041a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041a6:	2206      	movs	r2, #6
 80041a8:	4829      	ldr	r0, [pc, #164]	@ (8004250 <_vfiprintf_r+0x224>)
 80041aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041ae:	f000 fb33 	bl	8004818 <memchr>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d03f      	beq.n	8004236 <_vfiprintf_r+0x20a>
 80041b6:	4b27      	ldr	r3, [pc, #156]	@ (8004254 <_vfiprintf_r+0x228>)
 80041b8:	bb1b      	cbnz	r3, 8004202 <_vfiprintf_r+0x1d6>
 80041ba:	9b03      	ldr	r3, [sp, #12]
 80041bc:	3307      	adds	r3, #7
 80041be:	f023 0307 	bic.w	r3, r3, #7
 80041c2:	3308      	adds	r3, #8
 80041c4:	9303      	str	r3, [sp, #12]
 80041c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041c8:	443b      	add	r3, r7
 80041ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80041cc:	e76a      	b.n	80040a4 <_vfiprintf_r+0x78>
 80041ce:	460c      	mov	r4, r1
 80041d0:	2001      	movs	r0, #1
 80041d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80041d6:	e7a8      	b.n	800412a <_vfiprintf_r+0xfe>
 80041d8:	2300      	movs	r3, #0
 80041da:	f04f 0c0a 	mov.w	ip, #10
 80041de:	4619      	mov	r1, r3
 80041e0:	3401      	adds	r4, #1
 80041e2:	9305      	str	r3, [sp, #20]
 80041e4:	4620      	mov	r0, r4
 80041e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041ea:	3a30      	subs	r2, #48	@ 0x30
 80041ec:	2a09      	cmp	r2, #9
 80041ee:	d903      	bls.n	80041f8 <_vfiprintf_r+0x1cc>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0c6      	beq.n	8004182 <_vfiprintf_r+0x156>
 80041f4:	9105      	str	r1, [sp, #20]
 80041f6:	e7c4      	b.n	8004182 <_vfiprintf_r+0x156>
 80041f8:	4604      	mov	r4, r0
 80041fa:	2301      	movs	r3, #1
 80041fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004200:	e7f0      	b.n	80041e4 <_vfiprintf_r+0x1b8>
 8004202:	ab03      	add	r3, sp, #12
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	462a      	mov	r2, r5
 8004208:	4630      	mov	r0, r6
 800420a:	4b13      	ldr	r3, [pc, #76]	@ (8004258 <_vfiprintf_r+0x22c>)
 800420c:	a904      	add	r1, sp, #16
 800420e:	f3af 8000 	nop.w
 8004212:	4607      	mov	r7, r0
 8004214:	1c78      	adds	r0, r7, #1
 8004216:	d1d6      	bne.n	80041c6 <_vfiprintf_r+0x19a>
 8004218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800421a:	07d9      	lsls	r1, r3, #31
 800421c:	d405      	bmi.n	800422a <_vfiprintf_r+0x1fe>
 800421e:	89ab      	ldrh	r3, [r5, #12]
 8004220:	059a      	lsls	r2, r3, #22
 8004222:	d402      	bmi.n	800422a <_vfiprintf_r+0x1fe>
 8004224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004226:	f7ff fde1 	bl	8003dec <__retarget_lock_release_recursive>
 800422a:	89ab      	ldrh	r3, [r5, #12]
 800422c:	065b      	lsls	r3, r3, #25
 800422e:	f53f af1f 	bmi.w	8004070 <_vfiprintf_r+0x44>
 8004232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004234:	e71e      	b.n	8004074 <_vfiprintf_r+0x48>
 8004236:	ab03      	add	r3, sp, #12
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	462a      	mov	r2, r5
 800423c:	4630      	mov	r0, r6
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <_vfiprintf_r+0x22c>)
 8004240:	a904      	add	r1, sp, #16
 8004242:	f000 f87d 	bl	8004340 <_printf_i>
 8004246:	e7e4      	b.n	8004212 <_vfiprintf_r+0x1e6>
 8004248:	08004992 	.word	0x08004992
 800424c:	08004998 	.word	0x08004998
 8004250:	0800499c 	.word	0x0800499c
 8004254:	00000000 	.word	0x00000000
 8004258:	08004007 	.word	0x08004007

0800425c <_printf_common>:
 800425c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004260:	4616      	mov	r6, r2
 8004262:	4698      	mov	r8, r3
 8004264:	688a      	ldr	r2, [r1, #8]
 8004266:	690b      	ldr	r3, [r1, #16]
 8004268:	4607      	mov	r7, r0
 800426a:	4293      	cmp	r3, r2
 800426c:	bfb8      	it	lt
 800426e:	4613      	movlt	r3, r2
 8004270:	6033      	str	r3, [r6, #0]
 8004272:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004276:	460c      	mov	r4, r1
 8004278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800427c:	b10a      	cbz	r2, 8004282 <_printf_common+0x26>
 800427e:	3301      	adds	r3, #1
 8004280:	6033      	str	r3, [r6, #0]
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	0699      	lsls	r1, r3, #26
 8004286:	bf42      	ittt	mi
 8004288:	6833      	ldrmi	r3, [r6, #0]
 800428a:	3302      	addmi	r3, #2
 800428c:	6033      	strmi	r3, [r6, #0]
 800428e:	6825      	ldr	r5, [r4, #0]
 8004290:	f015 0506 	ands.w	r5, r5, #6
 8004294:	d106      	bne.n	80042a4 <_printf_common+0x48>
 8004296:	f104 0a19 	add.w	sl, r4, #25
 800429a:	68e3      	ldr	r3, [r4, #12]
 800429c:	6832      	ldr	r2, [r6, #0]
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	42ab      	cmp	r3, r5
 80042a2:	dc2b      	bgt.n	80042fc <_printf_common+0xa0>
 80042a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042a8:	6822      	ldr	r2, [r4, #0]
 80042aa:	3b00      	subs	r3, #0
 80042ac:	bf18      	it	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	0692      	lsls	r2, r2, #26
 80042b2:	d430      	bmi.n	8004316 <_printf_common+0xba>
 80042b4:	4641      	mov	r1, r8
 80042b6:	4638      	mov	r0, r7
 80042b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042bc:	47c8      	blx	r9
 80042be:	3001      	adds	r0, #1
 80042c0:	d023      	beq.n	800430a <_printf_common+0xae>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	6922      	ldr	r2, [r4, #16]
 80042c6:	f003 0306 	and.w	r3, r3, #6
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	bf14      	ite	ne
 80042ce:	2500      	movne	r5, #0
 80042d0:	6833      	ldreq	r3, [r6, #0]
 80042d2:	f04f 0600 	mov.w	r6, #0
 80042d6:	bf08      	it	eq
 80042d8:	68e5      	ldreq	r5, [r4, #12]
 80042da:	f104 041a 	add.w	r4, r4, #26
 80042de:	bf08      	it	eq
 80042e0:	1aed      	subeq	r5, r5, r3
 80042e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042e6:	bf08      	it	eq
 80042e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042ec:	4293      	cmp	r3, r2
 80042ee:	bfc4      	itt	gt
 80042f0:	1a9b      	subgt	r3, r3, r2
 80042f2:	18ed      	addgt	r5, r5, r3
 80042f4:	42b5      	cmp	r5, r6
 80042f6:	d11a      	bne.n	800432e <_printf_common+0xd2>
 80042f8:	2000      	movs	r0, #0
 80042fa:	e008      	b.n	800430e <_printf_common+0xb2>
 80042fc:	2301      	movs	r3, #1
 80042fe:	4652      	mov	r2, sl
 8004300:	4641      	mov	r1, r8
 8004302:	4638      	mov	r0, r7
 8004304:	47c8      	blx	r9
 8004306:	3001      	adds	r0, #1
 8004308:	d103      	bne.n	8004312 <_printf_common+0xb6>
 800430a:	f04f 30ff 	mov.w	r0, #4294967295
 800430e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004312:	3501      	adds	r5, #1
 8004314:	e7c1      	b.n	800429a <_printf_common+0x3e>
 8004316:	2030      	movs	r0, #48	@ 0x30
 8004318:	18e1      	adds	r1, r4, r3
 800431a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004324:	4422      	add	r2, r4
 8004326:	3302      	adds	r3, #2
 8004328:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800432c:	e7c2      	b.n	80042b4 <_printf_common+0x58>
 800432e:	2301      	movs	r3, #1
 8004330:	4622      	mov	r2, r4
 8004332:	4641      	mov	r1, r8
 8004334:	4638      	mov	r0, r7
 8004336:	47c8      	blx	r9
 8004338:	3001      	adds	r0, #1
 800433a:	d0e6      	beq.n	800430a <_printf_common+0xae>
 800433c:	3601      	adds	r6, #1
 800433e:	e7d9      	b.n	80042f4 <_printf_common+0x98>

08004340 <_printf_i>:
 8004340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004344:	7e0f      	ldrb	r7, [r1, #24]
 8004346:	4691      	mov	r9, r2
 8004348:	2f78      	cmp	r7, #120	@ 0x78
 800434a:	4680      	mov	r8, r0
 800434c:	460c      	mov	r4, r1
 800434e:	469a      	mov	sl, r3
 8004350:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004356:	d807      	bhi.n	8004368 <_printf_i+0x28>
 8004358:	2f62      	cmp	r7, #98	@ 0x62
 800435a:	d80a      	bhi.n	8004372 <_printf_i+0x32>
 800435c:	2f00      	cmp	r7, #0
 800435e:	f000 80d3 	beq.w	8004508 <_printf_i+0x1c8>
 8004362:	2f58      	cmp	r7, #88	@ 0x58
 8004364:	f000 80ba 	beq.w	80044dc <_printf_i+0x19c>
 8004368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800436c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004370:	e03a      	b.n	80043e8 <_printf_i+0xa8>
 8004372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004376:	2b15      	cmp	r3, #21
 8004378:	d8f6      	bhi.n	8004368 <_printf_i+0x28>
 800437a:	a101      	add	r1, pc, #4	@ (adr r1, 8004380 <_printf_i+0x40>)
 800437c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004380:	080043d9 	.word	0x080043d9
 8004384:	080043ed 	.word	0x080043ed
 8004388:	08004369 	.word	0x08004369
 800438c:	08004369 	.word	0x08004369
 8004390:	08004369 	.word	0x08004369
 8004394:	08004369 	.word	0x08004369
 8004398:	080043ed 	.word	0x080043ed
 800439c:	08004369 	.word	0x08004369
 80043a0:	08004369 	.word	0x08004369
 80043a4:	08004369 	.word	0x08004369
 80043a8:	08004369 	.word	0x08004369
 80043ac:	080044ef 	.word	0x080044ef
 80043b0:	08004417 	.word	0x08004417
 80043b4:	080044a9 	.word	0x080044a9
 80043b8:	08004369 	.word	0x08004369
 80043bc:	08004369 	.word	0x08004369
 80043c0:	08004511 	.word	0x08004511
 80043c4:	08004369 	.word	0x08004369
 80043c8:	08004417 	.word	0x08004417
 80043cc:	08004369 	.word	0x08004369
 80043d0:	08004369 	.word	0x08004369
 80043d4:	080044b1 	.word	0x080044b1
 80043d8:	6833      	ldr	r3, [r6, #0]
 80043da:	1d1a      	adds	r2, r3, #4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6032      	str	r2, [r6, #0]
 80043e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043e8:	2301      	movs	r3, #1
 80043ea:	e09e      	b.n	800452a <_printf_i+0x1ea>
 80043ec:	6833      	ldr	r3, [r6, #0]
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	1d19      	adds	r1, r3, #4
 80043f2:	6031      	str	r1, [r6, #0]
 80043f4:	0606      	lsls	r6, r0, #24
 80043f6:	d501      	bpl.n	80043fc <_printf_i+0xbc>
 80043f8:	681d      	ldr	r5, [r3, #0]
 80043fa:	e003      	b.n	8004404 <_printf_i+0xc4>
 80043fc:	0645      	lsls	r5, r0, #25
 80043fe:	d5fb      	bpl.n	80043f8 <_printf_i+0xb8>
 8004400:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004404:	2d00      	cmp	r5, #0
 8004406:	da03      	bge.n	8004410 <_printf_i+0xd0>
 8004408:	232d      	movs	r3, #45	@ 0x2d
 800440a:	426d      	negs	r5, r5
 800440c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004410:	230a      	movs	r3, #10
 8004412:	4859      	ldr	r0, [pc, #356]	@ (8004578 <_printf_i+0x238>)
 8004414:	e011      	b.n	800443a <_printf_i+0xfa>
 8004416:	6821      	ldr	r1, [r4, #0]
 8004418:	6833      	ldr	r3, [r6, #0]
 800441a:	0608      	lsls	r0, r1, #24
 800441c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004420:	d402      	bmi.n	8004428 <_printf_i+0xe8>
 8004422:	0649      	lsls	r1, r1, #25
 8004424:	bf48      	it	mi
 8004426:	b2ad      	uxthmi	r5, r5
 8004428:	2f6f      	cmp	r7, #111	@ 0x6f
 800442a:	6033      	str	r3, [r6, #0]
 800442c:	bf14      	ite	ne
 800442e:	230a      	movne	r3, #10
 8004430:	2308      	moveq	r3, #8
 8004432:	4851      	ldr	r0, [pc, #324]	@ (8004578 <_printf_i+0x238>)
 8004434:	2100      	movs	r1, #0
 8004436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800443a:	6866      	ldr	r6, [r4, #4]
 800443c:	2e00      	cmp	r6, #0
 800443e:	bfa8      	it	ge
 8004440:	6821      	ldrge	r1, [r4, #0]
 8004442:	60a6      	str	r6, [r4, #8]
 8004444:	bfa4      	itt	ge
 8004446:	f021 0104 	bicge.w	r1, r1, #4
 800444a:	6021      	strge	r1, [r4, #0]
 800444c:	b90d      	cbnz	r5, 8004452 <_printf_i+0x112>
 800444e:	2e00      	cmp	r6, #0
 8004450:	d04b      	beq.n	80044ea <_printf_i+0x1aa>
 8004452:	4616      	mov	r6, r2
 8004454:	fbb5 f1f3 	udiv	r1, r5, r3
 8004458:	fb03 5711 	mls	r7, r3, r1, r5
 800445c:	5dc7      	ldrb	r7, [r0, r7]
 800445e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004462:	462f      	mov	r7, r5
 8004464:	42bb      	cmp	r3, r7
 8004466:	460d      	mov	r5, r1
 8004468:	d9f4      	bls.n	8004454 <_printf_i+0x114>
 800446a:	2b08      	cmp	r3, #8
 800446c:	d10b      	bne.n	8004486 <_printf_i+0x146>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	07df      	lsls	r7, r3, #31
 8004472:	d508      	bpl.n	8004486 <_printf_i+0x146>
 8004474:	6923      	ldr	r3, [r4, #16]
 8004476:	6861      	ldr	r1, [r4, #4]
 8004478:	4299      	cmp	r1, r3
 800447a:	bfde      	ittt	le
 800447c:	2330      	movle	r3, #48	@ 0x30
 800447e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004482:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004486:	1b92      	subs	r2, r2, r6
 8004488:	6122      	str	r2, [r4, #16]
 800448a:	464b      	mov	r3, r9
 800448c:	4621      	mov	r1, r4
 800448e:	4640      	mov	r0, r8
 8004490:	f8cd a000 	str.w	sl, [sp]
 8004494:	aa03      	add	r2, sp, #12
 8004496:	f7ff fee1 	bl	800425c <_printf_common>
 800449a:	3001      	adds	r0, #1
 800449c:	d14a      	bne.n	8004534 <_printf_i+0x1f4>
 800449e:	f04f 30ff 	mov.w	r0, #4294967295
 80044a2:	b004      	add	sp, #16
 80044a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	f043 0320 	orr.w	r3, r3, #32
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	2778      	movs	r7, #120	@ 0x78
 80044b2:	4832      	ldr	r0, [pc, #200]	@ (800457c <_printf_i+0x23c>)
 80044b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	6831      	ldr	r1, [r6, #0]
 80044bc:	061f      	lsls	r7, r3, #24
 80044be:	f851 5b04 	ldr.w	r5, [r1], #4
 80044c2:	d402      	bmi.n	80044ca <_printf_i+0x18a>
 80044c4:	065f      	lsls	r7, r3, #25
 80044c6:	bf48      	it	mi
 80044c8:	b2ad      	uxthmi	r5, r5
 80044ca:	6031      	str	r1, [r6, #0]
 80044cc:	07d9      	lsls	r1, r3, #31
 80044ce:	bf44      	itt	mi
 80044d0:	f043 0320 	orrmi.w	r3, r3, #32
 80044d4:	6023      	strmi	r3, [r4, #0]
 80044d6:	b11d      	cbz	r5, 80044e0 <_printf_i+0x1a0>
 80044d8:	2310      	movs	r3, #16
 80044da:	e7ab      	b.n	8004434 <_printf_i+0xf4>
 80044dc:	4826      	ldr	r0, [pc, #152]	@ (8004578 <_printf_i+0x238>)
 80044de:	e7e9      	b.n	80044b4 <_printf_i+0x174>
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	f023 0320 	bic.w	r3, r3, #32
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	e7f6      	b.n	80044d8 <_printf_i+0x198>
 80044ea:	4616      	mov	r6, r2
 80044ec:	e7bd      	b.n	800446a <_printf_i+0x12a>
 80044ee:	6833      	ldr	r3, [r6, #0]
 80044f0:	6825      	ldr	r5, [r4, #0]
 80044f2:	1d18      	adds	r0, r3, #4
 80044f4:	6961      	ldr	r1, [r4, #20]
 80044f6:	6030      	str	r0, [r6, #0]
 80044f8:	062e      	lsls	r6, r5, #24
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	d501      	bpl.n	8004502 <_printf_i+0x1c2>
 80044fe:	6019      	str	r1, [r3, #0]
 8004500:	e002      	b.n	8004508 <_printf_i+0x1c8>
 8004502:	0668      	lsls	r0, r5, #25
 8004504:	d5fb      	bpl.n	80044fe <_printf_i+0x1be>
 8004506:	8019      	strh	r1, [r3, #0]
 8004508:	2300      	movs	r3, #0
 800450a:	4616      	mov	r6, r2
 800450c:	6123      	str	r3, [r4, #16]
 800450e:	e7bc      	b.n	800448a <_printf_i+0x14a>
 8004510:	6833      	ldr	r3, [r6, #0]
 8004512:	2100      	movs	r1, #0
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	6032      	str	r2, [r6, #0]
 8004518:	681e      	ldr	r6, [r3, #0]
 800451a:	6862      	ldr	r2, [r4, #4]
 800451c:	4630      	mov	r0, r6
 800451e:	f000 f97b 	bl	8004818 <memchr>
 8004522:	b108      	cbz	r0, 8004528 <_printf_i+0x1e8>
 8004524:	1b80      	subs	r0, r0, r6
 8004526:	6060      	str	r0, [r4, #4]
 8004528:	6863      	ldr	r3, [r4, #4]
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	2300      	movs	r3, #0
 800452e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004532:	e7aa      	b.n	800448a <_printf_i+0x14a>
 8004534:	4632      	mov	r2, r6
 8004536:	4649      	mov	r1, r9
 8004538:	4640      	mov	r0, r8
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	47d0      	blx	sl
 800453e:	3001      	adds	r0, #1
 8004540:	d0ad      	beq.n	800449e <_printf_i+0x15e>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	079b      	lsls	r3, r3, #30
 8004546:	d413      	bmi.n	8004570 <_printf_i+0x230>
 8004548:	68e0      	ldr	r0, [r4, #12]
 800454a:	9b03      	ldr	r3, [sp, #12]
 800454c:	4298      	cmp	r0, r3
 800454e:	bfb8      	it	lt
 8004550:	4618      	movlt	r0, r3
 8004552:	e7a6      	b.n	80044a2 <_printf_i+0x162>
 8004554:	2301      	movs	r3, #1
 8004556:	4632      	mov	r2, r6
 8004558:	4649      	mov	r1, r9
 800455a:	4640      	mov	r0, r8
 800455c:	47d0      	blx	sl
 800455e:	3001      	adds	r0, #1
 8004560:	d09d      	beq.n	800449e <_printf_i+0x15e>
 8004562:	3501      	adds	r5, #1
 8004564:	68e3      	ldr	r3, [r4, #12]
 8004566:	9903      	ldr	r1, [sp, #12]
 8004568:	1a5b      	subs	r3, r3, r1
 800456a:	42ab      	cmp	r3, r5
 800456c:	dcf2      	bgt.n	8004554 <_printf_i+0x214>
 800456e:	e7eb      	b.n	8004548 <_printf_i+0x208>
 8004570:	2500      	movs	r5, #0
 8004572:	f104 0619 	add.w	r6, r4, #25
 8004576:	e7f5      	b.n	8004564 <_printf_i+0x224>
 8004578:	080049a3 	.word	0x080049a3
 800457c:	080049b4 	.word	0x080049b4

08004580 <__sflush_r>:
 8004580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	0716      	lsls	r6, r2, #28
 8004588:	4605      	mov	r5, r0
 800458a:	460c      	mov	r4, r1
 800458c:	d454      	bmi.n	8004638 <__sflush_r+0xb8>
 800458e:	684b      	ldr	r3, [r1, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	dc02      	bgt.n	800459a <__sflush_r+0x1a>
 8004594:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	dd48      	ble.n	800462c <__sflush_r+0xac>
 800459a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800459c:	2e00      	cmp	r6, #0
 800459e:	d045      	beq.n	800462c <__sflush_r+0xac>
 80045a0:	2300      	movs	r3, #0
 80045a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045a6:	682f      	ldr	r7, [r5, #0]
 80045a8:	6a21      	ldr	r1, [r4, #32]
 80045aa:	602b      	str	r3, [r5, #0]
 80045ac:	d030      	beq.n	8004610 <__sflush_r+0x90>
 80045ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	0759      	lsls	r1, r3, #29
 80045b4:	d505      	bpl.n	80045c2 <__sflush_r+0x42>
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	1ad2      	subs	r2, r2, r3
 80045ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80045bc:	b10b      	cbz	r3, 80045c2 <__sflush_r+0x42>
 80045be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045c0:	1ad2      	subs	r2, r2, r3
 80045c2:	2300      	movs	r3, #0
 80045c4:	4628      	mov	r0, r5
 80045c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045c8:	6a21      	ldr	r1, [r4, #32]
 80045ca:	47b0      	blx	r6
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	d106      	bne.n	80045e0 <__sflush_r+0x60>
 80045d2:	6829      	ldr	r1, [r5, #0]
 80045d4:	291d      	cmp	r1, #29
 80045d6:	d82b      	bhi.n	8004630 <__sflush_r+0xb0>
 80045d8:	4a28      	ldr	r2, [pc, #160]	@ (800467c <__sflush_r+0xfc>)
 80045da:	410a      	asrs	r2, r1
 80045dc:	07d6      	lsls	r6, r2, #31
 80045de:	d427      	bmi.n	8004630 <__sflush_r+0xb0>
 80045e0:	2200      	movs	r2, #0
 80045e2:	6062      	str	r2, [r4, #4]
 80045e4:	6922      	ldr	r2, [r4, #16]
 80045e6:	04d9      	lsls	r1, r3, #19
 80045e8:	6022      	str	r2, [r4, #0]
 80045ea:	d504      	bpl.n	80045f6 <__sflush_r+0x76>
 80045ec:	1c42      	adds	r2, r0, #1
 80045ee:	d101      	bne.n	80045f4 <__sflush_r+0x74>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	b903      	cbnz	r3, 80045f6 <__sflush_r+0x76>
 80045f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80045f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045f8:	602f      	str	r7, [r5, #0]
 80045fa:	b1b9      	cbz	r1, 800462c <__sflush_r+0xac>
 80045fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004600:	4299      	cmp	r1, r3
 8004602:	d002      	beq.n	800460a <__sflush_r+0x8a>
 8004604:	4628      	mov	r0, r5
 8004606:	f7ff fbf3 	bl	8003df0 <_free_r>
 800460a:	2300      	movs	r3, #0
 800460c:	6363      	str	r3, [r4, #52]	@ 0x34
 800460e:	e00d      	b.n	800462c <__sflush_r+0xac>
 8004610:	2301      	movs	r3, #1
 8004612:	4628      	mov	r0, r5
 8004614:	47b0      	blx	r6
 8004616:	4602      	mov	r2, r0
 8004618:	1c50      	adds	r0, r2, #1
 800461a:	d1c9      	bne.n	80045b0 <__sflush_r+0x30>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0c6      	beq.n	80045b0 <__sflush_r+0x30>
 8004622:	2b1d      	cmp	r3, #29
 8004624:	d001      	beq.n	800462a <__sflush_r+0xaa>
 8004626:	2b16      	cmp	r3, #22
 8004628:	d11d      	bne.n	8004666 <__sflush_r+0xe6>
 800462a:	602f      	str	r7, [r5, #0]
 800462c:	2000      	movs	r0, #0
 800462e:	e021      	b.n	8004674 <__sflush_r+0xf4>
 8004630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004634:	b21b      	sxth	r3, r3
 8004636:	e01a      	b.n	800466e <__sflush_r+0xee>
 8004638:	690f      	ldr	r7, [r1, #16]
 800463a:	2f00      	cmp	r7, #0
 800463c:	d0f6      	beq.n	800462c <__sflush_r+0xac>
 800463e:	0793      	lsls	r3, r2, #30
 8004640:	bf18      	it	ne
 8004642:	2300      	movne	r3, #0
 8004644:	680e      	ldr	r6, [r1, #0]
 8004646:	bf08      	it	eq
 8004648:	694b      	ldreq	r3, [r1, #20]
 800464a:	1bf6      	subs	r6, r6, r7
 800464c:	600f      	str	r7, [r1, #0]
 800464e:	608b      	str	r3, [r1, #8]
 8004650:	2e00      	cmp	r6, #0
 8004652:	ddeb      	ble.n	800462c <__sflush_r+0xac>
 8004654:	4633      	mov	r3, r6
 8004656:	463a      	mov	r2, r7
 8004658:	4628      	mov	r0, r5
 800465a:	6a21      	ldr	r1, [r4, #32]
 800465c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004660:	47e0      	blx	ip
 8004662:	2800      	cmp	r0, #0
 8004664:	dc07      	bgt.n	8004676 <__sflush_r+0xf6>
 8004666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800466a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800466e:	f04f 30ff 	mov.w	r0, #4294967295
 8004672:	81a3      	strh	r3, [r4, #12]
 8004674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004676:	4407      	add	r7, r0
 8004678:	1a36      	subs	r6, r6, r0
 800467a:	e7e9      	b.n	8004650 <__sflush_r+0xd0>
 800467c:	dfbffffe 	.word	0xdfbffffe

08004680 <_fflush_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	690b      	ldr	r3, [r1, #16]
 8004684:	4605      	mov	r5, r0
 8004686:	460c      	mov	r4, r1
 8004688:	b913      	cbnz	r3, 8004690 <_fflush_r+0x10>
 800468a:	2500      	movs	r5, #0
 800468c:	4628      	mov	r0, r5
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	b118      	cbz	r0, 800469a <_fflush_r+0x1a>
 8004692:	6a03      	ldr	r3, [r0, #32]
 8004694:	b90b      	cbnz	r3, 800469a <_fflush_r+0x1a>
 8004696:	f7ff faa3 	bl	8003be0 <__sinit>
 800469a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f3      	beq.n	800468a <_fflush_r+0xa>
 80046a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80046a4:	07d0      	lsls	r0, r2, #31
 80046a6:	d404      	bmi.n	80046b2 <_fflush_r+0x32>
 80046a8:	0599      	lsls	r1, r3, #22
 80046aa:	d402      	bmi.n	80046b2 <_fflush_r+0x32>
 80046ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046ae:	f7ff fb9c 	bl	8003dea <__retarget_lock_acquire_recursive>
 80046b2:	4628      	mov	r0, r5
 80046b4:	4621      	mov	r1, r4
 80046b6:	f7ff ff63 	bl	8004580 <__sflush_r>
 80046ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046bc:	4605      	mov	r5, r0
 80046be:	07da      	lsls	r2, r3, #31
 80046c0:	d4e4      	bmi.n	800468c <_fflush_r+0xc>
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	059b      	lsls	r3, r3, #22
 80046c6:	d4e1      	bmi.n	800468c <_fflush_r+0xc>
 80046c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046ca:	f7ff fb8f 	bl	8003dec <__retarget_lock_release_recursive>
 80046ce:	e7dd      	b.n	800468c <_fflush_r+0xc>

080046d0 <__swbuf_r>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	460e      	mov	r6, r1
 80046d4:	4614      	mov	r4, r2
 80046d6:	4605      	mov	r5, r0
 80046d8:	b118      	cbz	r0, 80046e2 <__swbuf_r+0x12>
 80046da:	6a03      	ldr	r3, [r0, #32]
 80046dc:	b90b      	cbnz	r3, 80046e2 <__swbuf_r+0x12>
 80046de:	f7ff fa7f 	bl	8003be0 <__sinit>
 80046e2:	69a3      	ldr	r3, [r4, #24]
 80046e4:	60a3      	str	r3, [r4, #8]
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	071a      	lsls	r2, r3, #28
 80046ea:	d501      	bpl.n	80046f0 <__swbuf_r+0x20>
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	b943      	cbnz	r3, 8004702 <__swbuf_r+0x32>
 80046f0:	4621      	mov	r1, r4
 80046f2:	4628      	mov	r0, r5
 80046f4:	f000 f82a 	bl	800474c <__swsetup_r>
 80046f8:	b118      	cbz	r0, 8004702 <__swbuf_r+0x32>
 80046fa:	f04f 37ff 	mov.w	r7, #4294967295
 80046fe:	4638      	mov	r0, r7
 8004700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	6922      	ldr	r2, [r4, #16]
 8004706:	b2f6      	uxtb	r6, r6
 8004708:	1a98      	subs	r0, r3, r2
 800470a:	6963      	ldr	r3, [r4, #20]
 800470c:	4637      	mov	r7, r6
 800470e:	4283      	cmp	r3, r0
 8004710:	dc05      	bgt.n	800471e <__swbuf_r+0x4e>
 8004712:	4621      	mov	r1, r4
 8004714:	4628      	mov	r0, r5
 8004716:	f7ff ffb3 	bl	8004680 <_fflush_r>
 800471a:	2800      	cmp	r0, #0
 800471c:	d1ed      	bne.n	80046fa <__swbuf_r+0x2a>
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	3b01      	subs	r3, #1
 8004722:	60a3      	str	r3, [r4, #8]
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	6022      	str	r2, [r4, #0]
 800472a:	701e      	strb	r6, [r3, #0]
 800472c:	6962      	ldr	r2, [r4, #20]
 800472e:	1c43      	adds	r3, r0, #1
 8004730:	429a      	cmp	r2, r3
 8004732:	d004      	beq.n	800473e <__swbuf_r+0x6e>
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	07db      	lsls	r3, r3, #31
 8004738:	d5e1      	bpl.n	80046fe <__swbuf_r+0x2e>
 800473a:	2e0a      	cmp	r6, #10
 800473c:	d1df      	bne.n	80046fe <__swbuf_r+0x2e>
 800473e:	4621      	mov	r1, r4
 8004740:	4628      	mov	r0, r5
 8004742:	f7ff ff9d 	bl	8004680 <_fflush_r>
 8004746:	2800      	cmp	r0, #0
 8004748:	d0d9      	beq.n	80046fe <__swbuf_r+0x2e>
 800474a:	e7d6      	b.n	80046fa <__swbuf_r+0x2a>

0800474c <__swsetup_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4b29      	ldr	r3, [pc, #164]	@ (80047f4 <__swsetup_r+0xa8>)
 8004750:	4605      	mov	r5, r0
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	460c      	mov	r4, r1
 8004756:	b118      	cbz	r0, 8004760 <__swsetup_r+0x14>
 8004758:	6a03      	ldr	r3, [r0, #32]
 800475a:	b90b      	cbnz	r3, 8004760 <__swsetup_r+0x14>
 800475c:	f7ff fa40 	bl	8003be0 <__sinit>
 8004760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004764:	0719      	lsls	r1, r3, #28
 8004766:	d422      	bmi.n	80047ae <__swsetup_r+0x62>
 8004768:	06da      	lsls	r2, r3, #27
 800476a:	d407      	bmi.n	800477c <__swsetup_r+0x30>
 800476c:	2209      	movs	r2, #9
 800476e:	602a      	str	r2, [r5, #0]
 8004770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	e033      	b.n	80047e4 <__swsetup_r+0x98>
 800477c:	0758      	lsls	r0, r3, #29
 800477e:	d512      	bpl.n	80047a6 <__swsetup_r+0x5a>
 8004780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004782:	b141      	cbz	r1, 8004796 <__swsetup_r+0x4a>
 8004784:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004788:	4299      	cmp	r1, r3
 800478a:	d002      	beq.n	8004792 <__swsetup_r+0x46>
 800478c:	4628      	mov	r0, r5
 800478e:	f7ff fb2f 	bl	8003df0 <_free_r>
 8004792:	2300      	movs	r3, #0
 8004794:	6363      	str	r3, [r4, #52]	@ 0x34
 8004796:	89a3      	ldrh	r3, [r4, #12]
 8004798:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800479c:	81a3      	strh	r3, [r4, #12]
 800479e:	2300      	movs	r3, #0
 80047a0:	6063      	str	r3, [r4, #4]
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	f043 0308 	orr.w	r3, r3, #8
 80047ac:	81a3      	strh	r3, [r4, #12]
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	b94b      	cbnz	r3, 80047c6 <__swsetup_r+0x7a>
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047bc:	d003      	beq.n	80047c6 <__swsetup_r+0x7a>
 80047be:	4621      	mov	r1, r4
 80047c0:	4628      	mov	r0, r5
 80047c2:	f000 f85c 	bl	800487e <__smakebuf_r>
 80047c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ca:	f013 0201 	ands.w	r2, r3, #1
 80047ce:	d00a      	beq.n	80047e6 <__swsetup_r+0x9a>
 80047d0:	2200      	movs	r2, #0
 80047d2:	60a2      	str	r2, [r4, #8]
 80047d4:	6962      	ldr	r2, [r4, #20]
 80047d6:	4252      	negs	r2, r2
 80047d8:	61a2      	str	r2, [r4, #24]
 80047da:	6922      	ldr	r2, [r4, #16]
 80047dc:	b942      	cbnz	r2, 80047f0 <__swsetup_r+0xa4>
 80047de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80047e2:	d1c5      	bne.n	8004770 <__swsetup_r+0x24>
 80047e4:	bd38      	pop	{r3, r4, r5, pc}
 80047e6:	0799      	lsls	r1, r3, #30
 80047e8:	bf58      	it	pl
 80047ea:	6962      	ldrpl	r2, [r4, #20]
 80047ec:	60a2      	str	r2, [r4, #8]
 80047ee:	e7f4      	b.n	80047da <__swsetup_r+0x8e>
 80047f0:	2000      	movs	r0, #0
 80047f2:	e7f7      	b.n	80047e4 <__swsetup_r+0x98>
 80047f4:	20000018 	.word	0x20000018

080047f8 <_sbrk_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	2300      	movs	r3, #0
 80047fc:	4d05      	ldr	r5, [pc, #20]	@ (8004814 <_sbrk_r+0x1c>)
 80047fe:	4604      	mov	r4, r0
 8004800:	4608      	mov	r0, r1
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	f7fb ff50 	bl	80006a8 <_sbrk>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d102      	bne.n	8004812 <_sbrk_r+0x1a>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	b103      	cbz	r3, 8004812 <_sbrk_r+0x1a>
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	20000274 	.word	0x20000274

08004818 <memchr>:
 8004818:	4603      	mov	r3, r0
 800481a:	b510      	push	{r4, lr}
 800481c:	b2c9      	uxtb	r1, r1
 800481e:	4402      	add	r2, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	4618      	mov	r0, r3
 8004824:	d101      	bne.n	800482a <memchr+0x12>
 8004826:	2000      	movs	r0, #0
 8004828:	e003      	b.n	8004832 <memchr+0x1a>
 800482a:	7804      	ldrb	r4, [r0, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	428c      	cmp	r4, r1
 8004830:	d1f6      	bne.n	8004820 <memchr+0x8>
 8004832:	bd10      	pop	{r4, pc}

08004834 <__swhatbuf_r>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	460c      	mov	r4, r1
 8004838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483c:	4615      	mov	r5, r2
 800483e:	2900      	cmp	r1, #0
 8004840:	461e      	mov	r6, r3
 8004842:	b096      	sub	sp, #88	@ 0x58
 8004844:	da0c      	bge.n	8004860 <__swhatbuf_r+0x2c>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	2100      	movs	r1, #0
 800484a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800484e:	bf14      	ite	ne
 8004850:	2340      	movne	r3, #64	@ 0x40
 8004852:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004856:	2000      	movs	r0, #0
 8004858:	6031      	str	r1, [r6, #0]
 800485a:	602b      	str	r3, [r5, #0]
 800485c:	b016      	add	sp, #88	@ 0x58
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	466a      	mov	r2, sp
 8004862:	f000 f849 	bl	80048f8 <_fstat_r>
 8004866:	2800      	cmp	r0, #0
 8004868:	dbed      	blt.n	8004846 <__swhatbuf_r+0x12>
 800486a:	9901      	ldr	r1, [sp, #4]
 800486c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004870:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004874:	4259      	negs	r1, r3
 8004876:	4159      	adcs	r1, r3
 8004878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800487c:	e7eb      	b.n	8004856 <__swhatbuf_r+0x22>

0800487e <__smakebuf_r>:
 800487e:	898b      	ldrh	r3, [r1, #12]
 8004880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004882:	079d      	lsls	r5, r3, #30
 8004884:	4606      	mov	r6, r0
 8004886:	460c      	mov	r4, r1
 8004888:	d507      	bpl.n	800489a <__smakebuf_r+0x1c>
 800488a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	6123      	str	r3, [r4, #16]
 8004892:	2301      	movs	r3, #1
 8004894:	6163      	str	r3, [r4, #20]
 8004896:	b003      	add	sp, #12
 8004898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489a:	466a      	mov	r2, sp
 800489c:	ab01      	add	r3, sp, #4
 800489e:	f7ff ffc9 	bl	8004834 <__swhatbuf_r>
 80048a2:	9f00      	ldr	r7, [sp, #0]
 80048a4:	4605      	mov	r5, r0
 80048a6:	4639      	mov	r1, r7
 80048a8:	4630      	mov	r0, r6
 80048aa:	f7ff fb0b 	bl	8003ec4 <_malloc_r>
 80048ae:	b948      	cbnz	r0, 80048c4 <__smakebuf_r+0x46>
 80048b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b4:	059a      	lsls	r2, r3, #22
 80048b6:	d4ee      	bmi.n	8004896 <__smakebuf_r+0x18>
 80048b8:	f023 0303 	bic.w	r3, r3, #3
 80048bc:	f043 0302 	orr.w	r3, r3, #2
 80048c0:	81a3      	strh	r3, [r4, #12]
 80048c2:	e7e2      	b.n	800488a <__smakebuf_r+0xc>
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80048ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ce:	81a3      	strh	r3, [r4, #12]
 80048d0:	9b01      	ldr	r3, [sp, #4]
 80048d2:	6020      	str	r0, [r4, #0]
 80048d4:	b15b      	cbz	r3, 80048ee <__smakebuf_r+0x70>
 80048d6:	4630      	mov	r0, r6
 80048d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048dc:	f000 f81e 	bl	800491c <_isatty_r>
 80048e0:	b128      	cbz	r0, 80048ee <__smakebuf_r+0x70>
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	f023 0303 	bic.w	r3, r3, #3
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	81a3      	strh	r3, [r4, #12]
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	431d      	orrs	r5, r3
 80048f2:	81a5      	strh	r5, [r4, #12]
 80048f4:	e7cf      	b.n	8004896 <__smakebuf_r+0x18>
	...

080048f8 <_fstat_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	2300      	movs	r3, #0
 80048fc:	4d06      	ldr	r5, [pc, #24]	@ (8004918 <_fstat_r+0x20>)
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	602b      	str	r3, [r5, #0]
 8004906:	f7fb fea9 	bl	800065c <_fstat>
 800490a:	1c43      	adds	r3, r0, #1
 800490c:	d102      	bne.n	8004914 <_fstat_r+0x1c>
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	b103      	cbz	r3, 8004914 <_fstat_r+0x1c>
 8004912:	6023      	str	r3, [r4, #0]
 8004914:	bd38      	pop	{r3, r4, r5, pc}
 8004916:	bf00      	nop
 8004918:	20000274 	.word	0x20000274

0800491c <_isatty_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	2300      	movs	r3, #0
 8004920:	4d05      	ldr	r5, [pc, #20]	@ (8004938 <_isatty_r+0x1c>)
 8004922:	4604      	mov	r4, r0
 8004924:	4608      	mov	r0, r1
 8004926:	602b      	str	r3, [r5, #0]
 8004928:	f7fb fea7 	bl	800067a <_isatty>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d102      	bne.n	8004936 <_isatty_r+0x1a>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b103      	cbz	r3, 8004936 <_isatty_r+0x1a>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	20000274 	.word	0x20000274

0800493c <_init>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr

08004948 <_fini>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr
