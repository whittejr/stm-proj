
interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c80  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001d8c  08001d8c  00002d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dd0  08001dd0  00003068  2**0
                  CONTENTS
  4 .ARM          00000000  08001dd0  08001dd0  00003068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dd0  08001dd0  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dd0  08001dd0  00002dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001dd4  08001dd4  00002dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001dd8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08001e40  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001e40  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035fe  00000000  00000000  00003091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011bd  00000000  00000000  0000668f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  00007850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000035d  00000000  00000000  00007d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017387  00000000  00000000  00008065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000059ce  00000000  00000000  0001f3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081555  00000000  00000000  00024dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a630f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016e8  00000000  00000000  000a6354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000a7a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d74 	.word	0x08001d74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08001d74 	.word	0x08001d74

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	4603      	mov	r3, r0
 80001a0:	80fb      	strh	r3, [r7, #6]
	printf("Chegou aqui.. \n");
 80001a2:	4806      	ldr	r0, [pc, #24]	@ (80001bc <HAL_GPIO_EXTI_Callback+0x24>)
 80001a4:	f001 fa58 	bl	8001658 <puts>
	HAL_GPIO_TogglePin(GPIOB, yellow_Pin);
 80001a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <HAL_GPIO_EXTI_Callback+0x28>)
 80001ae:	f000 fd2b 	bl	8000c08 <HAL_GPIO_TogglePin>
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	08001d8c 	.word	0x08001d8c
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c8:	f000 f9ee 	bl	80005a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001cc:	f000 f80e 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d0:	f000 f852 	bl	8000278 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  ITM_SendChar('H');  // Envia o caractere 'H' para o SWO
//	  ITM_SendChar('i');
	  printf("TESTE CONSOLE \n");
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <main+0x24>)
 80001d6:	f001 fa3f 	bl	8001658 <puts>
	  HAL_Delay(500);
 80001da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001de:	f000 fa45 	bl	800066c <HAL_Delay>
	  printf("TESTE CONSOLE \n");
 80001e2:	bf00      	nop
 80001e4:	e7f6      	b.n	80001d4 <main+0x10>
 80001e6:	bf00      	nop
 80001e8:	08001d9c 	.word	0x08001d9c

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	@ 0x40
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fb0c 	bl	8001818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020e:	2301      	movs	r3, #1
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000212:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000216:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000220:	2302      	movs	r3, #2
 8000222:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000224:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000228:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800022e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fd19 	bl	8000c6c <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000240:	f000 f898 	bl	8000374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000248:	2302      	movs	r3, #2
 800024a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f000 ff86 	bl	8001170 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026a:	f000 f883 	bl	8000374 <Error_Handler>
  }
}
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	@ 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800028c:	4b28      	ldr	r3, [pc, #160]	@ (8000330 <MX_GPIO_Init+0xb8>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a27      	ldr	r2, [pc, #156]	@ (8000330 <MX_GPIO_Init+0xb8>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b25      	ldr	r3, [pc, #148]	@ (8000330 <MX_GPIO_Init+0xb8>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0320 	and.w	r3, r3, #32
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a4:	4b22      	ldr	r3, [pc, #136]	@ (8000330 <MX_GPIO_Init+0xb8>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a21      	ldr	r2, [pc, #132]	@ (8000330 <MX_GPIO_Init+0xb8>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000330 <MX_GPIO_Init+0xb8>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0308 	and.w	r3, r3, #8
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000330 <MX_GPIO_Init+0xb8>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000330 <MX_GPIO_Init+0xb8>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b19      	ldr	r3, [pc, #100]	@ (8000330 <MX_GPIO_Init+0xb8>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, blue_Pin|yellow_Pin|red_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80002da:	4816      	ldr	r0, [pc, #88]	@ (8000334 <MX_GPIO_Init+0xbc>)
 80002dc:	f000 fc7c 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80002e0:	2301      	movs	r3, #1
 80002e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002e4:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <MX_GPIO_Init+0xc0>)
 80002e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002e8:	2301      	movs	r3, #1
 80002ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80002ec:	f107 0310 	add.w	r3, r7, #16
 80002f0:	4619      	mov	r1, r3
 80002f2:	4810      	ldr	r0, [pc, #64]	@ (8000334 <MX_GPIO_Init+0xbc>)
 80002f4:	f000 faec 	bl	80008d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : blue_Pin yellow_Pin red_Pin */
  GPIO_InitStruct.Pin = blue_Pin|yellow_Pin|red_Pin;
 80002f8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80002fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fe:	2301      	movs	r3, #1
 8000300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000302:	2302      	movs	r3, #2
 8000304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000306:	2302      	movs	r3, #2
 8000308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	4619      	mov	r1, r3
 8000310:	4808      	ldr	r0, [pc, #32]	@ (8000334 <MX_GPIO_Init+0xbc>)
 8000312:	f000 fadd 	bl	80008d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 8000316:	2200      	movs	r2, #0
 8000318:	210a      	movs	r1, #10
 800031a:	2006      	movs	r0, #6
 800031c:	f000 faa1 	bl	8000862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000320:	2006      	movs	r0, #6
 8000322:	f000 faba 	bl	800089a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000326:	bf00      	nop
 8000328:	3720      	adds	r7, #32
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000
 8000334:	40010c00 	.word	0x40010c00
 8000338:	10110000 	.word	0x10110000

0800033c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000348:	2300      	movs	r3, #0
 800034a:	617b      	str	r3, [r7, #20]
 800034c:	e009      	b.n	8000362 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	1c5a      	adds	r2, r3, #1
 8000352:	60ba      	str	r2, [r7, #8]
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff fef8 	bl	800014c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	3301      	adds	r3, #1
 8000360:	617b      	str	r3, [r7, #20]
 8000362:	697a      	ldr	r2, [r7, #20]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	429a      	cmp	r2, r3
 8000368:	dbf1      	blt.n	800034e <_write+0x12>
  }
  return len;
 800036a:	687b      	ldr	r3, [r7, #4]
}
 800036c:	4618      	mov	r0, r3
 800036e:	3718      	adds	r7, #24
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <Error_Handler+0x8>

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <HAL_MspInit+0x5c>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a14      	ldr	r2, [pc, #80]	@ (80003dc <HAL_MspInit+0x5c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <HAL_MspInit+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a0e      	ldr	r2, [pc, #56]	@ (80003dc <HAL_MspInit+0x5c>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003b6:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <HAL_MspInit+0x60>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	4a04      	ldr	r2, [pc, #16]	@ (80003e0 <HAL_MspInit+0x60>)
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d2:	bf00      	nop
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010000 	.word	0x40010000

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <NMI_Handler+0x4>

080003ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <HardFault_Handler+0x4>

080003f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <MemManage_Handler+0x4>

080003fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <UsageFault_Handler+0x4>

0800040c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000434:	f000 f8fe 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000440:	2001      	movs	r0, #1
 8000442:	f000 fbfb 	bl	8000c3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}

0800044a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b086      	sub	sp, #24
 800044e:	af00      	add	r7, sp, #0
 8000450:	60f8      	str	r0, [r7, #12]
 8000452:	60b9      	str	r1, [r7, #8]
 8000454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	e00a      	b.n	8000472 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800045c:	f3af 8000 	nop.w
 8000460:	4601      	mov	r1, r0
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	60ba      	str	r2, [r7, #8]
 8000468:	b2ca      	uxtb	r2, r1
 800046a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	3301      	adds	r3, #1
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	697a      	ldr	r2, [r7, #20]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	429a      	cmp	r2, r3
 8000478:	dbf0      	blt.n	800045c <_read+0x12>
  }

  return len;
 800047a:	687b      	ldr	r3, [r7, #4]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800048c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004aa:	605a      	str	r2, [r3, #4]
  return 0;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <_isatty>:

int _isatty(int file)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004c0:	2301      	movs	r3, #1
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ec:	4a14      	ldr	r2, [pc, #80]	@ (8000540 <_sbrk+0x5c>)
 80004ee:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <_sbrk+0x60>)
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f8:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000500:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <_sbrk+0x64>)
 8000502:	4a12      	ldr	r2, [pc, #72]	@ (800054c <_sbrk+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000506:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <_sbrk+0x64>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	429a      	cmp	r2, r3
 8000512:	d207      	bcs.n	8000524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000514:	f001 f9ce 	bl	80018b4 <__errno>
 8000518:	4603      	mov	r3, r0
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	e009      	b.n	8000538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000524:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <_sbrk+0x64>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052a:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <_sbrk+0x64>)
 8000534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20005000 	.word	0x20005000
 8000544:	00000400 	.word	0x00000400
 8000548:	20000084 	.word	0x20000084
 800054c:	200001d8 	.word	0x200001d8

08000550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800055c:	f7ff fff8 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480b      	ldr	r0, [pc, #44]	@ (8000590 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000562:	490c      	ldr	r1, [pc, #48]	@ (8000594 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000564:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a09      	ldr	r2, [pc, #36]	@ (800059c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000578:	4c09      	ldr	r4, [pc, #36]	@ (80005a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000586:	f001 f99b 	bl	80018c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058a:	f7ff fe1b 	bl	80001c4 <main>
  bx lr
 800058e:	4770      	bx	lr
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000598:	08001dd8 	.word	0x08001dd8
  ldr r2, =_sbss
 800059c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80005a0:	200001d8 	.word	0x200001d8

080005a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC1_2_IRQHandler>
	...

080005a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <HAL_Init+0x28>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <HAL_Init+0x28>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f947 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	200f      	movs	r0, #15
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f7ff fedc 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40022000 	.word	0x40022000

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f95f 	bl	80008b6 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f927 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	@ (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000000 	.word	0x20000000
 800062c:	20000008 	.word	0x20000008
 8000630:	20000004 	.word	0x20000004

08000634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <HAL_IncTick+0x1c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <HAL_IncTick+0x20>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a03      	ldr	r2, [pc, #12]	@ (8000654 <HAL_IncTick+0x20>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	20000008 	.word	0x20000008
 8000654:	20000088 	.word	0x20000088

08000658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;
 800065c:	4b02      	ldr	r3, [pc, #8]	@ (8000668 <HAL_GetTick+0x10>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	20000088 	.word	0x20000088

0800066c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000674:	f7ff fff0 	bl	8000658 <HAL_GetTick>
 8000678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000684:	d005      	beq.n	8000692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <HAL_Delay+0x44>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	bf00      	nop
 8000694:	f7ff ffe0 	bl	8000658 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8f7      	bhi.n	8000694 <HAL_Delay+0x28>
  {
  }
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000008 	.word	0x20000008

080006b4 <__NVIC_SetPriorityGrouping>:
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e6:	4a04      	ldr	r2, [pc, #16]	@ (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_GetPriorityGrouping>:
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <__NVIC_GetPriorityGrouping+0x18>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	f003 0307 	and.w	r3, r3, #7
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_EnableIRQ>:
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	db0b      	blt.n	8000742 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 021f 	and.w	r2, r3, #31
 8000730:	4906      	ldr	r1, [pc, #24]	@ (800074c <__NVIC_EnableIRQ+0x34>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	095b      	lsrs	r3, r3, #5
 8000738:	2001      	movs	r0, #1
 800073a:	fa00 f202 	lsl.w	r2, r0, r2
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	@ (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	@ (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	@ 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	@ 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SysTick_Config>:
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff90 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff2d 	bl	80006b4 <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff42 	bl	80006fc <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff90 	bl	80007a4 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5f 	bl	8000750 <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff35 	bl	8000718 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b08b      	sub	sp, #44	@ 0x2c
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008e2:	e169      	b.n	8000bb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008e4:	2201      	movs	r2, #1
 80008e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	f040 8158 	bne.w	8000bb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	4a9a      	ldr	r2, [pc, #616]	@ (8000b70 <HAL_GPIO_Init+0x2a0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d05e      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 800090c:	4a98      	ldr	r2, [pc, #608]	@ (8000b70 <HAL_GPIO_Init+0x2a0>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d875      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 8000912:	4a98      	ldr	r2, [pc, #608]	@ (8000b74 <HAL_GPIO_Init+0x2a4>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d058      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 8000918:	4a96      	ldr	r2, [pc, #600]	@ (8000b74 <HAL_GPIO_Init+0x2a4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d86f      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 800091e:	4a96      	ldr	r2, [pc, #600]	@ (8000b78 <HAL_GPIO_Init+0x2a8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d052      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 8000924:	4a94      	ldr	r2, [pc, #592]	@ (8000b78 <HAL_GPIO_Init+0x2a8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d869      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 800092a:	4a94      	ldr	r2, [pc, #592]	@ (8000b7c <HAL_GPIO_Init+0x2ac>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d04c      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 8000930:	4a92      	ldr	r2, [pc, #584]	@ (8000b7c <HAL_GPIO_Init+0x2ac>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d863      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 8000936:	4a92      	ldr	r2, [pc, #584]	@ (8000b80 <HAL_GPIO_Init+0x2b0>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d046      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 800093c:	4a90      	ldr	r2, [pc, #576]	@ (8000b80 <HAL_GPIO_Init+0x2b0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d85d      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 8000942:	2b12      	cmp	r3, #18
 8000944:	d82a      	bhi.n	800099c <HAL_GPIO_Init+0xcc>
 8000946:	2b12      	cmp	r3, #18
 8000948:	d859      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 800094a:	a201      	add	r2, pc, #4	@ (adr r2, 8000950 <HAL_GPIO_Init+0x80>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	080009cb 	.word	0x080009cb
 8000954:	080009a5 	.word	0x080009a5
 8000958:	080009b7 	.word	0x080009b7
 800095c:	080009f9 	.word	0x080009f9
 8000960:	080009ff 	.word	0x080009ff
 8000964:	080009ff 	.word	0x080009ff
 8000968:	080009ff 	.word	0x080009ff
 800096c:	080009ff 	.word	0x080009ff
 8000970:	080009ff 	.word	0x080009ff
 8000974:	080009ff 	.word	0x080009ff
 8000978:	080009ff 	.word	0x080009ff
 800097c:	080009ff 	.word	0x080009ff
 8000980:	080009ff 	.word	0x080009ff
 8000984:	080009ff 	.word	0x080009ff
 8000988:	080009ff 	.word	0x080009ff
 800098c:	080009ff 	.word	0x080009ff
 8000990:	080009ff 	.word	0x080009ff
 8000994:	080009ad 	.word	0x080009ad
 8000998:	080009c1 	.word	0x080009c1
 800099c:	4a79      	ldr	r2, [pc, #484]	@ (8000b84 <HAL_GPIO_Init+0x2b4>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d013      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009a2:	e02c      	b.n	80009fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	623b      	str	r3, [r7, #32]
          break;
 80009aa:	e029      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	3304      	adds	r3, #4
 80009b2:	623b      	str	r3, [r7, #32]
          break;
 80009b4:	e024      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	3308      	adds	r3, #8
 80009bc:	623b      	str	r3, [r7, #32]
          break;
 80009be:	e01f      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	330c      	adds	r3, #12
 80009c6:	623b      	str	r3, [r7, #32]
          break;
 80009c8:	e01a      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d102      	bne.n	80009d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009d2:	2304      	movs	r3, #4
 80009d4:	623b      	str	r3, [r7, #32]
          break;
 80009d6:	e013      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d105      	bne.n	80009ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e0:	2308      	movs	r3, #8
 80009e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69fa      	ldr	r2, [r7, #28]
 80009e8:	611a      	str	r2, [r3, #16]
          break;
 80009ea:	e009      	b.n	8000a00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ec:	2308      	movs	r3, #8
 80009ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	615a      	str	r2, [r3, #20]
          break;
 80009f6:	e003      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
          break;
 80009fc:	e000      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          break;
 80009fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	2bff      	cmp	r3, #255	@ 0xff
 8000a04:	d801      	bhi.n	8000a0a <HAL_GPIO_Init+0x13a>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	e001      	b.n	8000a0e <HAL_GPIO_Init+0x13e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	2bff      	cmp	r3, #255	@ 0xff
 8000a14:	d802      	bhi.n	8000a1c <HAL_GPIO_Init+0x14c>
 8000a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	e002      	b.n	8000a22 <HAL_GPIO_Init+0x152>
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1e:	3b08      	subs	r3, #8
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	210f      	movs	r1, #15
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	401a      	ands	r2, r3
 8000a34:	6a39      	ldr	r1, [r7, #32]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 80b1 	beq.w	8000bb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a50:	4b4d      	ldr	r3, [pc, #308]	@ (8000b88 <HAL_GPIO_Init+0x2b8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a4c      	ldr	r2, [pc, #304]	@ (8000b88 <HAL_GPIO_Init+0x2b8>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000b88 <HAL_GPIO_Init+0x2b8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a68:	4a48      	ldr	r2, [pc, #288]	@ (8000b8c <HAL_GPIO_Init+0x2bc>)
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	3302      	adds	r3, #2
 8000a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	220f      	movs	r2, #15
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a40      	ldr	r2, [pc, #256]	@ (8000b90 <HAL_GPIO_Init+0x2c0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d013      	beq.n	8000abc <HAL_GPIO_Init+0x1ec>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a3f      	ldr	r2, [pc, #252]	@ (8000b94 <HAL_GPIO_Init+0x2c4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d00d      	beq.n	8000ab8 <HAL_GPIO_Init+0x1e8>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b98 <HAL_GPIO_Init+0x2c8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d007      	beq.n	8000ab4 <HAL_GPIO_Init+0x1e4>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8000b9c <HAL_GPIO_Init+0x2cc>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d101      	bne.n	8000ab0 <HAL_GPIO_Init+0x1e0>
 8000aac:	2303      	movs	r3, #3
 8000aae:	e006      	b.n	8000abe <HAL_GPIO_Init+0x1ee>
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	e004      	b.n	8000abe <HAL_GPIO_Init+0x1ee>
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	e002      	b.n	8000abe <HAL_GPIO_Init+0x1ee>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e000      	b.n	8000abe <HAL_GPIO_Init+0x1ee>
 8000abc:	2300      	movs	r3, #0
 8000abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ac0:	f002 0203 	and.w	r2, r2, #3
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	4093      	lsls	r3, r2
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ace:	492f      	ldr	r1, [pc, #188]	@ (8000b8c <HAL_GPIO_Init+0x2bc>)
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	492c      	ldr	r1, [pc, #176]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	608b      	str	r3, [r1, #8]
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000af6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4928      	ldr	r1, [pc, #160]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d006      	beq.n	8000b1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b10:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	4922      	ldr	r1, [pc, #136]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60cb      	str	r3, [r1, #12]
 8000b1c:	e006      	b.n	8000b2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b20:	68da      	ldr	r2, [r3, #12]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	491e      	ldr	r1, [pc, #120]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d006      	beq.n	8000b46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b38:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	4918      	ldr	r1, [pc, #96]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	604b      	str	r3, [r1, #4]
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4914      	ldr	r1, [pc, #80]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d021      	beq.n	8000ba4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	490e      	ldr	r1, [pc, #56]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	600b      	str	r3, [r1, #0]
 8000b6c:	e021      	b.n	8000bb2 <HAL_GPIO_Init+0x2e2>
 8000b6e:	bf00      	nop
 8000b70:	10320000 	.word	0x10320000
 8000b74:	10310000 	.word	0x10310000
 8000b78:	10220000 	.word	0x10220000
 8000b7c:	10210000 	.word	0x10210000
 8000b80:	10120000 	.word	0x10120000
 8000b84:	10110000 	.word	0x10110000
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	40011400 	.word	0x40011400
 8000ba0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <HAL_GPIO_Init+0x304>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	4909      	ldr	r1, [pc, #36]	@ (8000bd4 <HAL_GPIO_Init+0x304>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f47f ae8e 	bne.w	80008e4 <HAL_GPIO_Init+0x14>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	372c      	adds	r7, #44	@ 0x2c
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	40010400 	.word	0x40010400

08000bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
 8000be4:	4613      	mov	r3, r2
 8000be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000be8:	787b      	ldrb	r3, [r7, #1]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bf4:	e003      	b.n	8000bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bf6:	887b      	ldrh	r3, [r7, #2]
 8000bf8:	041a      	lsls	r2, r3, #16
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	611a      	str	r2, [r3, #16]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	041a      	lsls	r2, r3, #16
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43d9      	mvns	r1, r3
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	400b      	ands	r3, r1
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	611a      	str	r2, [r3, #16]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
	...

08000c3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c48:	695a      	ldr	r2, [r3, #20]
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d006      	beq.n	8000c60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fa9c 	bl	8000198 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40010400 	.word	0x40010400

08000c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e272      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 8087 	beq.w	8000d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c8c:	4b92      	ldr	r3, [pc, #584]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 030c 	and.w	r3, r3, #12
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d00c      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c98:	4b8f      	ldr	r3, [pc, #572]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 030c 	and.w	r3, r3, #12
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d112      	bne.n	8000cca <HAL_RCC_OscConfig+0x5e>
 8000ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cb0:	d10b      	bne.n	8000cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb2:	4b89      	ldr	r3, [pc, #548]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d06c      	beq.n	8000d98 <HAL_RCC_OscConfig+0x12c>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d168      	bne.n	8000d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e24c      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd2:	d106      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x76>
 8000cd4:	4b80      	ldr	r3, [pc, #512]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a7f      	ldr	r2, [pc, #508]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e02e      	b.n	8000d40 <HAL_RCC_OscConfig+0xd4>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x98>
 8000cea:	4b7b      	ldr	r3, [pc, #492]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a7a      	ldr	r2, [pc, #488]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b78      	ldr	r3, [pc, #480]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a77      	ldr	r2, [pc, #476]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e01d      	b.n	8000d40 <HAL_RCC_OscConfig+0xd4>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d0c:	d10c      	bne.n	8000d28 <HAL_RCC_OscConfig+0xbc>
 8000d0e:	4b72      	ldr	r3, [pc, #456]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a71      	ldr	r2, [pc, #452]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	e00b      	b.n	8000d40 <HAL_RCC_OscConfig+0xd4>
 8000d28:	4b6b      	ldr	r3, [pc, #428]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b68      	ldr	r3, [pc, #416]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a67      	ldr	r2, [pc, #412]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d013      	beq.n	8000d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d48:	f7ff fc86 	bl	8000658 <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d50:	f7ff fc82 	bl	8000658 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b64      	cmp	r3, #100	@ 0x64
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e200      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d62:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f0      	beq.n	8000d50 <HAL_RCC_OscConfig+0xe4>
 8000d6e:	e014      	b.n	8000d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc72 	bl	8000658 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fc6e 	bl	8000658 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b64      	cmp	r3, #100	@ 0x64
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e1ec      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8a:	4b53      	ldr	r3, [pc, #332]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f0      	bne.n	8000d78 <HAL_RCC_OscConfig+0x10c>
 8000d96:	e000      	b.n	8000d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d063      	beq.n	8000e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000da6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 030c 	and.w	r3, r3, #12
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00b      	beq.n	8000dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000db2:	4b49      	ldr	r3, [pc, #292]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 030c 	and.w	r3, r3, #12
 8000dba:	2b08      	cmp	r3, #8
 8000dbc:	d11c      	bne.n	8000df8 <HAL_RCC_OscConfig+0x18c>
 8000dbe:	4b46      	ldr	r3, [pc, #280]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d116      	bne.n	8000df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dca:	4b43      	ldr	r3, [pc, #268]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <HAL_RCC_OscConfig+0x176>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d001      	beq.n	8000de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e1c0      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4939      	ldr	r1, [pc, #228]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	4313      	orrs	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df6:	e03a      	b.n	8000e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d020      	beq.n	8000e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e00:	4b36      	ldr	r3, [pc, #216]	@ (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e06:	f7ff fc27 	bl	8000658 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fc23 	bl	8000658 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e1a1      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	4927      	ldr	r1, [pc, #156]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	600b      	str	r3, [r1, #0]
 8000e40:	e015      	b.n	8000e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e42:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fc06 	bl	8000658 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e50:	f7ff fc02 	bl	8000658 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e180      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f0      	bne.n	8000e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d03a      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d019      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <HAL_RCC_OscConfig+0x274>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e88:	f7ff fbe6 	bl	8000658 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e90:	f7ff fbe2 	bl	8000658 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e160      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f0      	beq.n	8000e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f000 fa9c 	bl	80013ec <RCC_Delay>
 8000eb4:	e01c      	b.n	8000ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <HAL_RCC_OscConfig+0x274>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ebc:	f7ff fbcc 	bl	8000658 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec2:	e00f      	b.n	8000ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec4:	f7ff fbc8 	bl	8000658 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d908      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e146      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	42420000 	.word	0x42420000
 8000ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee4:	4b92      	ldr	r3, [pc, #584]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1e9      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a6 	beq.w	800104a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f02:	4b8b      	ldr	r3, [pc, #556]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10d      	bne.n	8000f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b88      	ldr	r3, [pc, #544]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a87      	ldr	r2, [pc, #540]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b85      	ldr	r3, [pc, #532]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f26:	2301      	movs	r3, #1
 8000f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2a:	4b82      	ldr	r3, [pc, #520]	@ (8001134 <HAL_RCC_OscConfig+0x4c8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d118      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f36:	4b7f      	ldr	r3, [pc, #508]	@ (8001134 <HAL_RCC_OscConfig+0x4c8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8001134 <HAL_RCC_OscConfig+0x4c8>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fb89 	bl	8000658 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4a:	f7ff fb85 	bl	8000658 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b64      	cmp	r3, #100	@ 0x64
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e103      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5c:	4b75      	ldr	r3, [pc, #468]	@ (8001134 <HAL_RCC_OscConfig+0x4c8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d106      	bne.n	8000f7e <HAL_RCC_OscConfig+0x312>
 8000f70:	4b6f      	ldr	r3, [pc, #444]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4a6e      	ldr	r2, [pc, #440]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6213      	str	r3, [r2, #32]
 8000f7c:	e02d      	b.n	8000fda <HAL_RCC_OscConfig+0x36e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x334>
 8000f86:	4b6a      	ldr	r3, [pc, #424]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a69      	ldr	r2, [pc, #420]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	6213      	str	r3, [r2, #32]
 8000f92:	4b67      	ldr	r3, [pc, #412]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4a66      	ldr	r2, [pc, #408]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	f023 0304 	bic.w	r3, r3, #4
 8000f9c:	6213      	str	r3, [r2, #32]
 8000f9e:	e01c      	b.n	8000fda <HAL_RCC_OscConfig+0x36e>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d10c      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x356>
 8000fa8:	4b61      	ldr	r3, [pc, #388]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	4a60      	ldr	r2, [pc, #384]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6213      	str	r3, [r2, #32]
 8000fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6213      	str	r3, [r2, #32]
 8000fc0:	e00b      	b.n	8000fda <HAL_RCC_OscConfig+0x36e>
 8000fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	f023 0301 	bic.w	r3, r3, #1
 8000fcc:	6213      	str	r3, [r2, #32]
 8000fce:	4b58      	ldr	r3, [pc, #352]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4a57      	ldr	r2, [pc, #348]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	f023 0304 	bic.w	r3, r3, #4
 8000fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d015      	beq.n	800100e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fb39 	bl	8000658 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe8:	e00a      	b.n	8001000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fea:	f7ff fb35 	bl	8000658 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e0b1      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001000:	4b4b      	ldr	r3, [pc, #300]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0ee      	beq.n	8000fea <HAL_RCC_OscConfig+0x37e>
 800100c:	e014      	b.n	8001038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100e:	f7ff fb23 	bl	8000658 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001014:	e00a      	b.n	800102c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001016:	f7ff fb1f 	bl	8000658 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001024:	4293      	cmp	r3, r2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e09b      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800102c:	4b40      	ldr	r3, [pc, #256]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1ee      	bne.n	8001016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d105      	bne.n	800104a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103e:	4b3c      	ldr	r3, [pc, #240]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a3b      	ldr	r2, [pc, #236]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8087 	beq.w	8001162 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001054:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	d061      	beq.n	8001124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d146      	bne.n	80010f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001068:	4b33      	ldr	r3, [pc, #204]	@ (8001138 <HAL_RCC_OscConfig+0x4cc>)
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106e:	f7ff faf3 	bl	8000658 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001076:	f7ff faef 	bl	8000658 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e06d      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f0      	bne.n	8001076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800109c:	d108      	bne.n	80010b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800109e:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4921      	ldr	r1, [pc, #132]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a19      	ldr	r1, [r3, #32]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c0:	430b      	orrs	r3, r1
 80010c2:	491b      	ldr	r1, [pc, #108]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <HAL_RCC_OscConfig+0x4cc>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fac3 	bl	8000658 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff fabf 	bl	8000658 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e03d      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x46a>
 80010f4:	e035      	b.n	8001162 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <HAL_RCC_OscConfig+0x4cc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff faac 	bl	8000658 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001104:	f7ff faa8 	bl	8000658 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e026      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x498>
 8001122:	e01e      	b.n	8001162 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d107      	bne.n	800113c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e019      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
 8001130:	40021000 	.word	0x40021000
 8001134:	40007000 	.word	0x40007000
 8001138:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_RCC_OscConfig+0x500>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	429a      	cmp	r2, r3
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115a:	429a      	cmp	r2, r3
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e0d0      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001184:	4b6a      	ldr	r3, [pc, #424]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d910      	bls.n	80011b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001192:	4b67      	ldr	r3, [pc, #412]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 0207 	bic.w	r2, r3, #7
 800119a:	4965      	ldr	r1, [pc, #404]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a2:	4b63      	ldr	r3, [pc, #396]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e0b8      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d020      	beq.n	8001202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011cc:	4b59      	ldr	r3, [pc, #356]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a58      	ldr	r2, [pc, #352]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e4:	4b53      	ldr	r3, [pc, #332]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a52      	ldr	r2, [pc, #328]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f0:	4b50      	ldr	r3, [pc, #320]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	494d      	ldr	r1, [pc, #308]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d040      	beq.n	8001290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	4b47      	ldr	r3, [pc, #284]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d115      	bne.n	800124e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e07f      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122e:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d109      	bne.n	800124e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e073      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123e:	4b3d      	ldr	r3, [pc, #244]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e06b      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800124e:	4b39      	ldr	r3, [pc, #228]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f023 0203 	bic.w	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4936      	ldr	r1, [pc, #216]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001260:	f7ff f9fa 	bl	8000658 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001266:	e00a      	b.n	800127e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001268:	f7ff f9f6 	bl	8000658 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001276:	4293      	cmp	r3, r2
 8001278:	d901      	bls.n	800127e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e053      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 020c 	and.w	r2, r3, #12
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	429a      	cmp	r2, r3
 800128e:	d1eb      	bne.n	8001268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d210      	bcs.n	80012c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 0207 	bic.w	r2, r3, #7
 80012a6:	4922      	ldr	r1, [pc, #136]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e032      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012cc:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	4916      	ldr	r1, [pc, #88]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d009      	beq.n	80012fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	490e      	ldr	r1, [pc, #56]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012fe:	f000 f821 	bl	8001344 <HAL_RCC_GetSysClockFreq>
 8001302:	4602      	mov	r2, r0
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	490a      	ldr	r1, [pc, #40]	@ (8001338 <HAL_RCC_ClockConfig+0x1c8>)
 8001310:	5ccb      	ldrb	r3, [r1, r3]
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	4a09      	ldr	r2, [pc, #36]	@ (800133c <HAL_RCC_ClockConfig+0x1cc>)
 8001318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_RCC_ClockConfig+0x1d0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f958 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40022000 	.word	0x40022000
 8001334:	40021000 	.word	0x40021000
 8001338:	08001dac 	.word	0x08001dac
 800133c:	20000000 	.word	0x20000000
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800135e:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b04      	cmp	r3, #4
 800136c:	d002      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x30>
 800136e:	2b08      	cmp	r3, #8
 8001370:	d003      	beq.n	800137a <HAL_RCC_GetSysClockFreq+0x36>
 8001372:	e027      	b.n	80013c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x98>)
 8001376:	613b      	str	r3, [r7, #16]
      break;
 8001378:	e027      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	4a17      	ldr	r2, [pc, #92]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d010      	beq.n	80013b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	0c5b      	lsrs	r3, r3, #17
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	4a11      	ldr	r2, [pc, #68]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x98>)
 80013a6:	fb03 f202 	mul.w	r2, r3, r2
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e004      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a0c      	ldr	r2, [pc, #48]	@ (80013e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	613b      	str	r3, [r7, #16]
      break;
 80013c2:	e002      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x98>)
 80013c6:	613b      	str	r3, [r7, #16]
      break;
 80013c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ca:	693b      	ldr	r3, [r7, #16]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	007a1200 	.word	0x007a1200
 80013e0:	08001dbc 	.word	0x08001dbc
 80013e4:	08001dcc 	.word	0x08001dcc
 80013e8:	003d0900 	.word	0x003d0900

080013ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <RCC_Delay+0x34>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <RCC_Delay+0x38>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	0a5b      	lsrs	r3, r3, #9
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001408:	bf00      	nop
  }
  while (Delay --);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e5a      	subs	r2, r3, #1
 800140e:	60fa      	str	r2, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f9      	bne.n	8001408 <RCC_Delay+0x1c>
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000000 	.word	0x20000000
 8001424:	10624dd3 	.word	0x10624dd3

08001428 <std>:
 8001428:	2300      	movs	r3, #0
 800142a:	b510      	push	{r4, lr}
 800142c:	4604      	mov	r4, r0
 800142e:	e9c0 3300 	strd	r3, r3, [r0]
 8001432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001436:	6083      	str	r3, [r0, #8]
 8001438:	8181      	strh	r1, [r0, #12]
 800143a:	6643      	str	r3, [r0, #100]	@ 0x64
 800143c:	81c2      	strh	r2, [r0, #14]
 800143e:	6183      	str	r3, [r0, #24]
 8001440:	4619      	mov	r1, r3
 8001442:	2208      	movs	r2, #8
 8001444:	305c      	adds	r0, #92	@ 0x5c
 8001446:	f000 f9e7 	bl	8001818 <memset>
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <std+0x58>)
 800144c:	6224      	str	r4, [r4, #32]
 800144e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <std+0x5c>)
 8001452:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <std+0x60>)
 8001456:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <std+0x64>)
 800145a:	6323      	str	r3, [r4, #48]	@ 0x30
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <std+0x68>)
 800145e:	429c      	cmp	r4, r3
 8001460:	d006      	beq.n	8001470 <std+0x48>
 8001462:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001466:	4294      	cmp	r4, r2
 8001468:	d002      	beq.n	8001470 <std+0x48>
 800146a:	33d0      	adds	r3, #208	@ 0xd0
 800146c:	429c      	cmp	r4, r3
 800146e:	d105      	bne.n	800147c <std+0x54>
 8001470:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001478:	f000 ba46 	b.w	8001908 <__retarget_lock_init_recursive>
 800147c:	bd10      	pop	{r4, pc}
 800147e:	bf00      	nop
 8001480:	08001669 	.word	0x08001669
 8001484:	0800168b 	.word	0x0800168b
 8001488:	080016c3 	.word	0x080016c3
 800148c:	080016e7 	.word	0x080016e7
 8001490:	2000008c 	.word	0x2000008c

08001494 <stdio_exit_handler>:
 8001494:	4a02      	ldr	r2, [pc, #8]	@ (80014a0 <stdio_exit_handler+0xc>)
 8001496:	4903      	ldr	r1, [pc, #12]	@ (80014a4 <stdio_exit_handler+0x10>)
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <stdio_exit_handler+0x14>)
 800149a:	f000 b869 	b.w	8001570 <_fwalk_sglue>
 800149e:	bf00      	nop
 80014a0:	2000000c 	.word	0x2000000c
 80014a4:	08001bfd 	.word	0x08001bfd
 80014a8:	2000001c 	.word	0x2000001c

080014ac <cleanup_stdio>:
 80014ac:	6841      	ldr	r1, [r0, #4]
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <cleanup_stdio+0x34>)
 80014b0:	b510      	push	{r4, lr}
 80014b2:	4299      	cmp	r1, r3
 80014b4:	4604      	mov	r4, r0
 80014b6:	d001      	beq.n	80014bc <cleanup_stdio+0x10>
 80014b8:	f000 fba0 	bl	8001bfc <_fflush_r>
 80014bc:	68a1      	ldr	r1, [r4, #8]
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <cleanup_stdio+0x38>)
 80014c0:	4299      	cmp	r1, r3
 80014c2:	d002      	beq.n	80014ca <cleanup_stdio+0x1e>
 80014c4:	4620      	mov	r0, r4
 80014c6:	f000 fb99 	bl	8001bfc <_fflush_r>
 80014ca:	68e1      	ldr	r1, [r4, #12]
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <cleanup_stdio+0x3c>)
 80014ce:	4299      	cmp	r1, r3
 80014d0:	d004      	beq.n	80014dc <cleanup_stdio+0x30>
 80014d2:	4620      	mov	r0, r4
 80014d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014d8:	f000 bb90 	b.w	8001bfc <_fflush_r>
 80014dc:	bd10      	pop	{r4, pc}
 80014de:	bf00      	nop
 80014e0:	2000008c 	.word	0x2000008c
 80014e4:	200000f4 	.word	0x200000f4
 80014e8:	2000015c 	.word	0x2000015c

080014ec <global_stdio_init.part.0>:
 80014ec:	b510      	push	{r4, lr}
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <global_stdio_init.part.0+0x30>)
 80014f0:	4c0b      	ldr	r4, [pc, #44]	@ (8001520 <global_stdio_init.part.0+0x34>)
 80014f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001524 <global_stdio_init.part.0+0x38>)
 80014f4:	4620      	mov	r0, r4
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	2104      	movs	r1, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	f7ff ff94 	bl	8001428 <std>
 8001500:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001504:	2201      	movs	r2, #1
 8001506:	2109      	movs	r1, #9
 8001508:	f7ff ff8e 	bl	8001428 <std>
 800150c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001510:	2202      	movs	r2, #2
 8001512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001516:	2112      	movs	r1, #18
 8001518:	f7ff bf86 	b.w	8001428 <std>
 800151c:	200001c4 	.word	0x200001c4
 8001520:	2000008c 	.word	0x2000008c
 8001524:	08001495 	.word	0x08001495

08001528 <__sfp_lock_acquire>:
 8001528:	4801      	ldr	r0, [pc, #4]	@ (8001530 <__sfp_lock_acquire+0x8>)
 800152a:	f000 b9ee 	b.w	800190a <__retarget_lock_acquire_recursive>
 800152e:	bf00      	nop
 8001530:	200001cd 	.word	0x200001cd

08001534 <__sfp_lock_release>:
 8001534:	4801      	ldr	r0, [pc, #4]	@ (800153c <__sfp_lock_release+0x8>)
 8001536:	f000 b9e9 	b.w	800190c <__retarget_lock_release_recursive>
 800153a:	bf00      	nop
 800153c:	200001cd 	.word	0x200001cd

08001540 <__sinit>:
 8001540:	b510      	push	{r4, lr}
 8001542:	4604      	mov	r4, r0
 8001544:	f7ff fff0 	bl	8001528 <__sfp_lock_acquire>
 8001548:	6a23      	ldr	r3, [r4, #32]
 800154a:	b11b      	cbz	r3, 8001554 <__sinit+0x14>
 800154c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001550:	f7ff bff0 	b.w	8001534 <__sfp_lock_release>
 8001554:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <__sinit+0x28>)
 8001556:	6223      	str	r3, [r4, #32]
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <__sinit+0x2c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f5      	bne.n	800154c <__sinit+0xc>
 8001560:	f7ff ffc4 	bl	80014ec <global_stdio_init.part.0>
 8001564:	e7f2      	b.n	800154c <__sinit+0xc>
 8001566:	bf00      	nop
 8001568:	080014ad 	.word	0x080014ad
 800156c:	200001c4 	.word	0x200001c4

08001570 <_fwalk_sglue>:
 8001570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001574:	4607      	mov	r7, r0
 8001576:	4688      	mov	r8, r1
 8001578:	4614      	mov	r4, r2
 800157a:	2600      	movs	r6, #0
 800157c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001580:	f1b9 0901 	subs.w	r9, r9, #1
 8001584:	d505      	bpl.n	8001592 <_fwalk_sglue+0x22>
 8001586:	6824      	ldr	r4, [r4, #0]
 8001588:	2c00      	cmp	r4, #0
 800158a:	d1f7      	bne.n	800157c <_fwalk_sglue+0xc>
 800158c:	4630      	mov	r0, r6
 800158e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001592:	89ab      	ldrh	r3, [r5, #12]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d907      	bls.n	80015a8 <_fwalk_sglue+0x38>
 8001598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800159c:	3301      	adds	r3, #1
 800159e:	d003      	beq.n	80015a8 <_fwalk_sglue+0x38>
 80015a0:	4629      	mov	r1, r5
 80015a2:	4638      	mov	r0, r7
 80015a4:	47c0      	blx	r8
 80015a6:	4306      	orrs	r6, r0
 80015a8:	3568      	adds	r5, #104	@ 0x68
 80015aa:	e7e9      	b.n	8001580 <_fwalk_sglue+0x10>

080015ac <_puts_r>:
 80015ac:	6a03      	ldr	r3, [r0, #32]
 80015ae:	b570      	push	{r4, r5, r6, lr}
 80015b0:	4605      	mov	r5, r0
 80015b2:	460e      	mov	r6, r1
 80015b4:	6884      	ldr	r4, [r0, #8]
 80015b6:	b90b      	cbnz	r3, 80015bc <_puts_r+0x10>
 80015b8:	f7ff ffc2 	bl	8001540 <__sinit>
 80015bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015be:	07db      	lsls	r3, r3, #31
 80015c0:	d405      	bmi.n	80015ce <_puts_r+0x22>
 80015c2:	89a3      	ldrh	r3, [r4, #12]
 80015c4:	0598      	lsls	r0, r3, #22
 80015c6:	d402      	bmi.n	80015ce <_puts_r+0x22>
 80015c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015ca:	f000 f99e 	bl	800190a <__retarget_lock_acquire_recursive>
 80015ce:	89a3      	ldrh	r3, [r4, #12]
 80015d0:	0719      	lsls	r1, r3, #28
 80015d2:	d502      	bpl.n	80015da <_puts_r+0x2e>
 80015d4:	6923      	ldr	r3, [r4, #16]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d135      	bne.n	8001646 <_puts_r+0x9a>
 80015da:	4621      	mov	r1, r4
 80015dc:	4628      	mov	r0, r5
 80015de:	f000 f8c5 	bl	800176c <__swsetup_r>
 80015e2:	b380      	cbz	r0, 8001646 <_puts_r+0x9a>
 80015e4:	f04f 35ff 	mov.w	r5, #4294967295
 80015e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015ea:	07da      	lsls	r2, r3, #31
 80015ec:	d405      	bmi.n	80015fa <_puts_r+0x4e>
 80015ee:	89a3      	ldrh	r3, [r4, #12]
 80015f0:	059b      	lsls	r3, r3, #22
 80015f2:	d402      	bmi.n	80015fa <_puts_r+0x4e>
 80015f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015f6:	f000 f989 	bl	800190c <__retarget_lock_release_recursive>
 80015fa:	4628      	mov	r0, r5
 80015fc:	bd70      	pop	{r4, r5, r6, pc}
 80015fe:	2b00      	cmp	r3, #0
 8001600:	da04      	bge.n	800160c <_puts_r+0x60>
 8001602:	69a2      	ldr	r2, [r4, #24]
 8001604:	429a      	cmp	r2, r3
 8001606:	dc17      	bgt.n	8001638 <_puts_r+0x8c>
 8001608:	290a      	cmp	r1, #10
 800160a:	d015      	beq.n	8001638 <_puts_r+0x8c>
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	6022      	str	r2, [r4, #0]
 8001612:	7019      	strb	r1, [r3, #0]
 8001614:	68a3      	ldr	r3, [r4, #8]
 8001616:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800161a:	3b01      	subs	r3, #1
 800161c:	60a3      	str	r3, [r4, #8]
 800161e:	2900      	cmp	r1, #0
 8001620:	d1ed      	bne.n	80015fe <_puts_r+0x52>
 8001622:	2b00      	cmp	r3, #0
 8001624:	da11      	bge.n	800164a <_puts_r+0x9e>
 8001626:	4622      	mov	r2, r4
 8001628:	210a      	movs	r1, #10
 800162a:	4628      	mov	r0, r5
 800162c:	f000 f85f 	bl	80016ee <__swbuf_r>
 8001630:	3001      	adds	r0, #1
 8001632:	d0d7      	beq.n	80015e4 <_puts_r+0x38>
 8001634:	250a      	movs	r5, #10
 8001636:	e7d7      	b.n	80015e8 <_puts_r+0x3c>
 8001638:	4622      	mov	r2, r4
 800163a:	4628      	mov	r0, r5
 800163c:	f000 f857 	bl	80016ee <__swbuf_r>
 8001640:	3001      	adds	r0, #1
 8001642:	d1e7      	bne.n	8001614 <_puts_r+0x68>
 8001644:	e7ce      	b.n	80015e4 <_puts_r+0x38>
 8001646:	3e01      	subs	r6, #1
 8001648:	e7e4      	b.n	8001614 <_puts_r+0x68>
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	6022      	str	r2, [r4, #0]
 8001650:	220a      	movs	r2, #10
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e7ee      	b.n	8001634 <_puts_r+0x88>
	...

08001658 <puts>:
 8001658:	4b02      	ldr	r3, [pc, #8]	@ (8001664 <puts+0xc>)
 800165a:	4601      	mov	r1, r0
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	f7ff bfa5 	b.w	80015ac <_puts_r>
 8001662:	bf00      	nop
 8001664:	20000018 	.word	0x20000018

08001668 <__sread>:
 8001668:	b510      	push	{r4, lr}
 800166a:	460c      	mov	r4, r1
 800166c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001670:	f000 f8fc 	bl	800186c <_read_r>
 8001674:	2800      	cmp	r0, #0
 8001676:	bfab      	itete	ge
 8001678:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800167a:	89a3      	ldrhlt	r3, [r4, #12]
 800167c:	181b      	addge	r3, r3, r0
 800167e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001682:	bfac      	ite	ge
 8001684:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001686:	81a3      	strhlt	r3, [r4, #12]
 8001688:	bd10      	pop	{r4, pc}

0800168a <__swrite>:
 800168a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800168e:	461f      	mov	r7, r3
 8001690:	898b      	ldrh	r3, [r1, #12]
 8001692:	4605      	mov	r5, r0
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	460c      	mov	r4, r1
 8001698:	4616      	mov	r6, r2
 800169a:	d505      	bpl.n	80016a8 <__swrite+0x1e>
 800169c:	2302      	movs	r3, #2
 800169e:	2200      	movs	r2, #0
 80016a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016a4:	f000 f8d0 	bl	8001848 <_lseek_r>
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	4632      	mov	r2, r6
 80016ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016b0:	81a3      	strh	r3, [r4, #12]
 80016b2:	4628      	mov	r0, r5
 80016b4:	463b      	mov	r3, r7
 80016b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016be:	f000 b8e7 	b.w	8001890 <_write_r>

080016c2 <__sseek>:
 80016c2:	b510      	push	{r4, lr}
 80016c4:	460c      	mov	r4, r1
 80016c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016ca:	f000 f8bd 	bl	8001848 <_lseek_r>
 80016ce:	1c43      	adds	r3, r0, #1
 80016d0:	89a3      	ldrh	r3, [r4, #12]
 80016d2:	bf15      	itete	ne
 80016d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80016d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80016da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80016de:	81a3      	strheq	r3, [r4, #12]
 80016e0:	bf18      	it	ne
 80016e2:	81a3      	strhne	r3, [r4, #12]
 80016e4:	bd10      	pop	{r4, pc}

080016e6 <__sclose>:
 80016e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016ea:	f000 b89d 	b.w	8001828 <_close_r>

080016ee <__swbuf_r>:
 80016ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f0:	460e      	mov	r6, r1
 80016f2:	4614      	mov	r4, r2
 80016f4:	4605      	mov	r5, r0
 80016f6:	b118      	cbz	r0, 8001700 <__swbuf_r+0x12>
 80016f8:	6a03      	ldr	r3, [r0, #32]
 80016fa:	b90b      	cbnz	r3, 8001700 <__swbuf_r+0x12>
 80016fc:	f7ff ff20 	bl	8001540 <__sinit>
 8001700:	69a3      	ldr	r3, [r4, #24]
 8001702:	60a3      	str	r3, [r4, #8]
 8001704:	89a3      	ldrh	r3, [r4, #12]
 8001706:	071a      	lsls	r2, r3, #28
 8001708:	d501      	bpl.n	800170e <__swbuf_r+0x20>
 800170a:	6923      	ldr	r3, [r4, #16]
 800170c:	b943      	cbnz	r3, 8001720 <__swbuf_r+0x32>
 800170e:	4621      	mov	r1, r4
 8001710:	4628      	mov	r0, r5
 8001712:	f000 f82b 	bl	800176c <__swsetup_r>
 8001716:	b118      	cbz	r0, 8001720 <__swbuf_r+0x32>
 8001718:	f04f 37ff 	mov.w	r7, #4294967295
 800171c:	4638      	mov	r0, r7
 800171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	6922      	ldr	r2, [r4, #16]
 8001724:	b2f6      	uxtb	r6, r6
 8001726:	1a98      	subs	r0, r3, r2
 8001728:	6963      	ldr	r3, [r4, #20]
 800172a:	4637      	mov	r7, r6
 800172c:	4283      	cmp	r3, r0
 800172e:	dc05      	bgt.n	800173c <__swbuf_r+0x4e>
 8001730:	4621      	mov	r1, r4
 8001732:	4628      	mov	r0, r5
 8001734:	f000 fa62 	bl	8001bfc <_fflush_r>
 8001738:	2800      	cmp	r0, #0
 800173a:	d1ed      	bne.n	8001718 <__swbuf_r+0x2a>
 800173c:	68a3      	ldr	r3, [r4, #8]
 800173e:	3b01      	subs	r3, #1
 8001740:	60a3      	str	r3, [r4, #8]
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	6022      	str	r2, [r4, #0]
 8001748:	701e      	strb	r6, [r3, #0]
 800174a:	6962      	ldr	r2, [r4, #20]
 800174c:	1c43      	adds	r3, r0, #1
 800174e:	429a      	cmp	r2, r3
 8001750:	d004      	beq.n	800175c <__swbuf_r+0x6e>
 8001752:	89a3      	ldrh	r3, [r4, #12]
 8001754:	07db      	lsls	r3, r3, #31
 8001756:	d5e1      	bpl.n	800171c <__swbuf_r+0x2e>
 8001758:	2e0a      	cmp	r6, #10
 800175a:	d1df      	bne.n	800171c <__swbuf_r+0x2e>
 800175c:	4621      	mov	r1, r4
 800175e:	4628      	mov	r0, r5
 8001760:	f000 fa4c 	bl	8001bfc <_fflush_r>
 8001764:	2800      	cmp	r0, #0
 8001766:	d0d9      	beq.n	800171c <__swbuf_r+0x2e>
 8001768:	e7d6      	b.n	8001718 <__swbuf_r+0x2a>
	...

0800176c <__swsetup_r>:
 800176c:	b538      	push	{r3, r4, r5, lr}
 800176e:	4b29      	ldr	r3, [pc, #164]	@ (8001814 <__swsetup_r+0xa8>)
 8001770:	4605      	mov	r5, r0
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	460c      	mov	r4, r1
 8001776:	b118      	cbz	r0, 8001780 <__swsetup_r+0x14>
 8001778:	6a03      	ldr	r3, [r0, #32]
 800177a:	b90b      	cbnz	r3, 8001780 <__swsetup_r+0x14>
 800177c:	f7ff fee0 	bl	8001540 <__sinit>
 8001780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001784:	0719      	lsls	r1, r3, #28
 8001786:	d422      	bmi.n	80017ce <__swsetup_r+0x62>
 8001788:	06da      	lsls	r2, r3, #27
 800178a:	d407      	bmi.n	800179c <__swsetup_r+0x30>
 800178c:	2209      	movs	r2, #9
 800178e:	602a      	str	r2, [r5, #0]
 8001790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	81a3      	strh	r3, [r4, #12]
 800179a:	e033      	b.n	8001804 <__swsetup_r+0x98>
 800179c:	0758      	lsls	r0, r3, #29
 800179e:	d512      	bpl.n	80017c6 <__swsetup_r+0x5a>
 80017a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80017a2:	b141      	cbz	r1, 80017b6 <__swsetup_r+0x4a>
 80017a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80017a8:	4299      	cmp	r1, r3
 80017aa:	d002      	beq.n	80017b2 <__swsetup_r+0x46>
 80017ac:	4628      	mov	r0, r5
 80017ae:	f000 f8af 	bl	8001910 <_free_r>
 80017b2:	2300      	movs	r3, #0
 80017b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80017b6:	89a3      	ldrh	r3, [r4, #12]
 80017b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80017bc:	81a3      	strh	r3, [r4, #12]
 80017be:	2300      	movs	r3, #0
 80017c0:	6063      	str	r3, [r4, #4]
 80017c2:	6923      	ldr	r3, [r4, #16]
 80017c4:	6023      	str	r3, [r4, #0]
 80017c6:	89a3      	ldrh	r3, [r4, #12]
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	81a3      	strh	r3, [r4, #12]
 80017ce:	6923      	ldr	r3, [r4, #16]
 80017d0:	b94b      	cbnz	r3, 80017e6 <__swsetup_r+0x7a>
 80017d2:	89a3      	ldrh	r3, [r4, #12]
 80017d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80017d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017dc:	d003      	beq.n	80017e6 <__swsetup_r+0x7a>
 80017de:	4621      	mov	r1, r4
 80017e0:	4628      	mov	r0, r5
 80017e2:	f000 fa58 	bl	8001c96 <__smakebuf_r>
 80017e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017ea:	f013 0201 	ands.w	r2, r3, #1
 80017ee:	d00a      	beq.n	8001806 <__swsetup_r+0x9a>
 80017f0:	2200      	movs	r2, #0
 80017f2:	60a2      	str	r2, [r4, #8]
 80017f4:	6962      	ldr	r2, [r4, #20]
 80017f6:	4252      	negs	r2, r2
 80017f8:	61a2      	str	r2, [r4, #24]
 80017fa:	6922      	ldr	r2, [r4, #16]
 80017fc:	b942      	cbnz	r2, 8001810 <__swsetup_r+0xa4>
 80017fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001802:	d1c5      	bne.n	8001790 <__swsetup_r+0x24>
 8001804:	bd38      	pop	{r3, r4, r5, pc}
 8001806:	0799      	lsls	r1, r3, #30
 8001808:	bf58      	it	pl
 800180a:	6962      	ldrpl	r2, [r4, #20]
 800180c:	60a2      	str	r2, [r4, #8]
 800180e:	e7f4      	b.n	80017fa <__swsetup_r+0x8e>
 8001810:	2000      	movs	r0, #0
 8001812:	e7f7      	b.n	8001804 <__swsetup_r+0x98>
 8001814:	20000018 	.word	0x20000018

08001818 <memset>:
 8001818:	4603      	mov	r3, r0
 800181a:	4402      	add	r2, r0
 800181c:	4293      	cmp	r3, r2
 800181e:	d100      	bne.n	8001822 <memset+0xa>
 8001820:	4770      	bx	lr
 8001822:	f803 1b01 	strb.w	r1, [r3], #1
 8001826:	e7f9      	b.n	800181c <memset+0x4>

08001828 <_close_r>:
 8001828:	b538      	push	{r3, r4, r5, lr}
 800182a:	2300      	movs	r3, #0
 800182c:	4d05      	ldr	r5, [pc, #20]	@ (8001844 <_close_r+0x1c>)
 800182e:	4604      	mov	r4, r0
 8001830:	4608      	mov	r0, r1
 8001832:	602b      	str	r3, [r5, #0]
 8001834:	f7fe fe26 	bl	8000484 <_close>
 8001838:	1c43      	adds	r3, r0, #1
 800183a:	d102      	bne.n	8001842 <_close_r+0x1a>
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	b103      	cbz	r3, 8001842 <_close_r+0x1a>
 8001840:	6023      	str	r3, [r4, #0]
 8001842:	bd38      	pop	{r3, r4, r5, pc}
 8001844:	200001c8 	.word	0x200001c8

08001848 <_lseek_r>:
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4604      	mov	r4, r0
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	2200      	movs	r2, #0
 8001852:	4d05      	ldr	r5, [pc, #20]	@ (8001868 <_lseek_r+0x20>)
 8001854:	602a      	str	r2, [r5, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	f7fe fe38 	bl	80004cc <_lseek>
 800185c:	1c43      	adds	r3, r0, #1
 800185e:	d102      	bne.n	8001866 <_lseek_r+0x1e>
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	b103      	cbz	r3, 8001866 <_lseek_r+0x1e>
 8001864:	6023      	str	r3, [r4, #0]
 8001866:	bd38      	pop	{r3, r4, r5, pc}
 8001868:	200001c8 	.word	0x200001c8

0800186c <_read_r>:
 800186c:	b538      	push	{r3, r4, r5, lr}
 800186e:	4604      	mov	r4, r0
 8001870:	4608      	mov	r0, r1
 8001872:	4611      	mov	r1, r2
 8001874:	2200      	movs	r2, #0
 8001876:	4d05      	ldr	r5, [pc, #20]	@ (800188c <_read_r+0x20>)
 8001878:	602a      	str	r2, [r5, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	f7fe fde5 	bl	800044a <_read>
 8001880:	1c43      	adds	r3, r0, #1
 8001882:	d102      	bne.n	800188a <_read_r+0x1e>
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	b103      	cbz	r3, 800188a <_read_r+0x1e>
 8001888:	6023      	str	r3, [r4, #0]
 800188a:	bd38      	pop	{r3, r4, r5, pc}
 800188c:	200001c8 	.word	0x200001c8

08001890 <_write_r>:
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	2200      	movs	r2, #0
 800189a:	4d05      	ldr	r5, [pc, #20]	@ (80018b0 <_write_r+0x20>)
 800189c:	602a      	str	r2, [r5, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	f7fe fd4c 	bl	800033c <_write>
 80018a4:	1c43      	adds	r3, r0, #1
 80018a6:	d102      	bne.n	80018ae <_write_r+0x1e>
 80018a8:	682b      	ldr	r3, [r5, #0]
 80018aa:	b103      	cbz	r3, 80018ae <_write_r+0x1e>
 80018ac:	6023      	str	r3, [r4, #0]
 80018ae:	bd38      	pop	{r3, r4, r5, pc}
 80018b0:	200001c8 	.word	0x200001c8

080018b4 <__errno>:
 80018b4:	4b01      	ldr	r3, [pc, #4]	@ (80018bc <__errno+0x8>)
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000018 	.word	0x20000018

080018c0 <__libc_init_array>:
 80018c0:	b570      	push	{r4, r5, r6, lr}
 80018c2:	2600      	movs	r6, #0
 80018c4:	4d0c      	ldr	r5, [pc, #48]	@ (80018f8 <__libc_init_array+0x38>)
 80018c6:	4c0d      	ldr	r4, [pc, #52]	@ (80018fc <__libc_init_array+0x3c>)
 80018c8:	1b64      	subs	r4, r4, r5
 80018ca:	10a4      	asrs	r4, r4, #2
 80018cc:	42a6      	cmp	r6, r4
 80018ce:	d109      	bne.n	80018e4 <__libc_init_array+0x24>
 80018d0:	f000 fa50 	bl	8001d74 <_init>
 80018d4:	2600      	movs	r6, #0
 80018d6:	4d0a      	ldr	r5, [pc, #40]	@ (8001900 <__libc_init_array+0x40>)
 80018d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001904 <__libc_init_array+0x44>)
 80018da:	1b64      	subs	r4, r4, r5
 80018dc:	10a4      	asrs	r4, r4, #2
 80018de:	42a6      	cmp	r6, r4
 80018e0:	d105      	bne.n	80018ee <__libc_init_array+0x2e>
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
 80018e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e8:	4798      	blx	r3
 80018ea:	3601      	adds	r6, #1
 80018ec:	e7ee      	b.n	80018cc <__libc_init_array+0xc>
 80018ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80018f2:	4798      	blx	r3
 80018f4:	3601      	adds	r6, #1
 80018f6:	e7f2      	b.n	80018de <__libc_init_array+0x1e>
 80018f8:	08001dd0 	.word	0x08001dd0
 80018fc:	08001dd0 	.word	0x08001dd0
 8001900:	08001dd0 	.word	0x08001dd0
 8001904:	08001dd4 	.word	0x08001dd4

08001908 <__retarget_lock_init_recursive>:
 8001908:	4770      	bx	lr

0800190a <__retarget_lock_acquire_recursive>:
 800190a:	4770      	bx	lr

0800190c <__retarget_lock_release_recursive>:
 800190c:	4770      	bx	lr
	...

08001910 <_free_r>:
 8001910:	b538      	push	{r3, r4, r5, lr}
 8001912:	4605      	mov	r5, r0
 8001914:	2900      	cmp	r1, #0
 8001916:	d040      	beq.n	800199a <_free_r+0x8a>
 8001918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800191c:	1f0c      	subs	r4, r1, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	bfb8      	it	lt
 8001922:	18e4      	addlt	r4, r4, r3
 8001924:	f000 f8de 	bl	8001ae4 <__malloc_lock>
 8001928:	4a1c      	ldr	r2, [pc, #112]	@ (800199c <_free_r+0x8c>)
 800192a:	6813      	ldr	r3, [r2, #0]
 800192c:	b933      	cbnz	r3, 800193c <_free_r+0x2c>
 800192e:	6063      	str	r3, [r4, #4]
 8001930:	6014      	str	r4, [r2, #0]
 8001932:	4628      	mov	r0, r5
 8001934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001938:	f000 b8da 	b.w	8001af0 <__malloc_unlock>
 800193c:	42a3      	cmp	r3, r4
 800193e:	d908      	bls.n	8001952 <_free_r+0x42>
 8001940:	6820      	ldr	r0, [r4, #0]
 8001942:	1821      	adds	r1, r4, r0
 8001944:	428b      	cmp	r3, r1
 8001946:	bf01      	itttt	eq
 8001948:	6819      	ldreq	r1, [r3, #0]
 800194a:	685b      	ldreq	r3, [r3, #4]
 800194c:	1809      	addeq	r1, r1, r0
 800194e:	6021      	streq	r1, [r4, #0]
 8001950:	e7ed      	b.n	800192e <_free_r+0x1e>
 8001952:	461a      	mov	r2, r3
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	b10b      	cbz	r3, 800195c <_free_r+0x4c>
 8001958:	42a3      	cmp	r3, r4
 800195a:	d9fa      	bls.n	8001952 <_free_r+0x42>
 800195c:	6811      	ldr	r1, [r2, #0]
 800195e:	1850      	adds	r0, r2, r1
 8001960:	42a0      	cmp	r0, r4
 8001962:	d10b      	bne.n	800197c <_free_r+0x6c>
 8001964:	6820      	ldr	r0, [r4, #0]
 8001966:	4401      	add	r1, r0
 8001968:	1850      	adds	r0, r2, r1
 800196a:	4283      	cmp	r3, r0
 800196c:	6011      	str	r1, [r2, #0]
 800196e:	d1e0      	bne.n	8001932 <_free_r+0x22>
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4408      	add	r0, r1
 8001976:	6010      	str	r0, [r2, #0]
 8001978:	6053      	str	r3, [r2, #4]
 800197a:	e7da      	b.n	8001932 <_free_r+0x22>
 800197c:	d902      	bls.n	8001984 <_free_r+0x74>
 800197e:	230c      	movs	r3, #12
 8001980:	602b      	str	r3, [r5, #0]
 8001982:	e7d6      	b.n	8001932 <_free_r+0x22>
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	1821      	adds	r1, r4, r0
 8001988:	428b      	cmp	r3, r1
 800198a:	bf01      	itttt	eq
 800198c:	6819      	ldreq	r1, [r3, #0]
 800198e:	685b      	ldreq	r3, [r3, #4]
 8001990:	1809      	addeq	r1, r1, r0
 8001992:	6021      	streq	r1, [r4, #0]
 8001994:	6063      	str	r3, [r4, #4]
 8001996:	6054      	str	r4, [r2, #4]
 8001998:	e7cb      	b.n	8001932 <_free_r+0x22>
 800199a:	bd38      	pop	{r3, r4, r5, pc}
 800199c:	200001d4 	.word	0x200001d4

080019a0 <sbrk_aligned>:
 80019a0:	b570      	push	{r4, r5, r6, lr}
 80019a2:	4e0f      	ldr	r6, [pc, #60]	@ (80019e0 <sbrk_aligned+0x40>)
 80019a4:	460c      	mov	r4, r1
 80019a6:	6831      	ldr	r1, [r6, #0]
 80019a8:	4605      	mov	r5, r0
 80019aa:	b911      	cbnz	r1, 80019b2 <sbrk_aligned+0x12>
 80019ac:	f000 f9d2 	bl	8001d54 <_sbrk_r>
 80019b0:	6030      	str	r0, [r6, #0]
 80019b2:	4621      	mov	r1, r4
 80019b4:	4628      	mov	r0, r5
 80019b6:	f000 f9cd 	bl	8001d54 <_sbrk_r>
 80019ba:	1c43      	adds	r3, r0, #1
 80019bc:	d103      	bne.n	80019c6 <sbrk_aligned+0x26>
 80019be:	f04f 34ff 	mov.w	r4, #4294967295
 80019c2:	4620      	mov	r0, r4
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
 80019c6:	1cc4      	adds	r4, r0, #3
 80019c8:	f024 0403 	bic.w	r4, r4, #3
 80019cc:	42a0      	cmp	r0, r4
 80019ce:	d0f8      	beq.n	80019c2 <sbrk_aligned+0x22>
 80019d0:	1a21      	subs	r1, r4, r0
 80019d2:	4628      	mov	r0, r5
 80019d4:	f000 f9be 	bl	8001d54 <_sbrk_r>
 80019d8:	3001      	adds	r0, #1
 80019da:	d1f2      	bne.n	80019c2 <sbrk_aligned+0x22>
 80019dc:	e7ef      	b.n	80019be <sbrk_aligned+0x1e>
 80019de:	bf00      	nop
 80019e0:	200001d0 	.word	0x200001d0

080019e4 <_malloc_r>:
 80019e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019e8:	1ccd      	adds	r5, r1, #3
 80019ea:	f025 0503 	bic.w	r5, r5, #3
 80019ee:	3508      	adds	r5, #8
 80019f0:	2d0c      	cmp	r5, #12
 80019f2:	bf38      	it	cc
 80019f4:	250c      	movcc	r5, #12
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	4606      	mov	r6, r0
 80019fa:	db01      	blt.n	8001a00 <_malloc_r+0x1c>
 80019fc:	42a9      	cmp	r1, r5
 80019fe:	d904      	bls.n	8001a0a <_malloc_r+0x26>
 8001a00:	230c      	movs	r3, #12
 8001a02:	6033      	str	r3, [r6, #0]
 8001a04:	2000      	movs	r0, #0
 8001a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ae0 <_malloc_r+0xfc>
 8001a0e:	f000 f869 	bl	8001ae4 <__malloc_lock>
 8001a12:	f8d8 3000 	ldr.w	r3, [r8]
 8001a16:	461c      	mov	r4, r3
 8001a18:	bb44      	cbnz	r4, 8001a6c <_malloc_r+0x88>
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	f7ff ffbf 	bl	80019a0 <sbrk_aligned>
 8001a22:	1c43      	adds	r3, r0, #1
 8001a24:	4604      	mov	r4, r0
 8001a26:	d158      	bne.n	8001ada <_malloc_r+0xf6>
 8001a28:	f8d8 4000 	ldr.w	r4, [r8]
 8001a2c:	4627      	mov	r7, r4
 8001a2e:	2f00      	cmp	r7, #0
 8001a30:	d143      	bne.n	8001aba <_malloc_r+0xd6>
 8001a32:	2c00      	cmp	r4, #0
 8001a34:	d04b      	beq.n	8001ace <_malloc_r+0xea>
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	4639      	mov	r1, r7
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	eb04 0903 	add.w	r9, r4, r3
 8001a40:	f000 f988 	bl	8001d54 <_sbrk_r>
 8001a44:	4581      	cmp	r9, r0
 8001a46:	d142      	bne.n	8001ace <_malloc_r+0xea>
 8001a48:	6821      	ldr	r1, [r4, #0]
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	1a6d      	subs	r5, r5, r1
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f7ff ffa6 	bl	80019a0 <sbrk_aligned>
 8001a54:	3001      	adds	r0, #1
 8001a56:	d03a      	beq.n	8001ace <_malloc_r+0xea>
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	442b      	add	r3, r5
 8001a5c:	6023      	str	r3, [r4, #0]
 8001a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	bb62      	cbnz	r2, 8001ac0 <_malloc_r+0xdc>
 8001a66:	f8c8 7000 	str.w	r7, [r8]
 8001a6a:	e00f      	b.n	8001a8c <_malloc_r+0xa8>
 8001a6c:	6822      	ldr	r2, [r4, #0]
 8001a6e:	1b52      	subs	r2, r2, r5
 8001a70:	d420      	bmi.n	8001ab4 <_malloc_r+0xd0>
 8001a72:	2a0b      	cmp	r2, #11
 8001a74:	d917      	bls.n	8001aa6 <_malloc_r+0xc2>
 8001a76:	1961      	adds	r1, r4, r5
 8001a78:	42a3      	cmp	r3, r4
 8001a7a:	6025      	str	r5, [r4, #0]
 8001a7c:	bf18      	it	ne
 8001a7e:	6059      	strne	r1, [r3, #4]
 8001a80:	6863      	ldr	r3, [r4, #4]
 8001a82:	bf08      	it	eq
 8001a84:	f8c8 1000 	streq.w	r1, [r8]
 8001a88:	5162      	str	r2, [r4, r5]
 8001a8a:	604b      	str	r3, [r1, #4]
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f000 f82f 	bl	8001af0 <__malloc_unlock>
 8001a92:	f104 000b 	add.w	r0, r4, #11
 8001a96:	1d23      	adds	r3, r4, #4
 8001a98:	f020 0007 	bic.w	r0, r0, #7
 8001a9c:	1ac2      	subs	r2, r0, r3
 8001a9e:	bf1c      	itt	ne
 8001aa0:	1a1b      	subne	r3, r3, r0
 8001aa2:	50a3      	strne	r3, [r4, r2]
 8001aa4:	e7af      	b.n	8001a06 <_malloc_r+0x22>
 8001aa6:	6862      	ldr	r2, [r4, #4]
 8001aa8:	42a3      	cmp	r3, r4
 8001aaa:	bf0c      	ite	eq
 8001aac:	f8c8 2000 	streq.w	r2, [r8]
 8001ab0:	605a      	strne	r2, [r3, #4]
 8001ab2:	e7eb      	b.n	8001a8c <_malloc_r+0xa8>
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	6864      	ldr	r4, [r4, #4]
 8001ab8:	e7ae      	b.n	8001a18 <_malloc_r+0x34>
 8001aba:	463c      	mov	r4, r7
 8001abc:	687f      	ldr	r7, [r7, #4]
 8001abe:	e7b6      	b.n	8001a2e <_malloc_r+0x4a>
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	42a3      	cmp	r3, r4
 8001ac6:	d1fb      	bne.n	8001ac0 <_malloc_r+0xdc>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	6053      	str	r3, [r2, #4]
 8001acc:	e7de      	b.n	8001a8c <_malloc_r+0xa8>
 8001ace:	230c      	movs	r3, #12
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	6033      	str	r3, [r6, #0]
 8001ad4:	f000 f80c 	bl	8001af0 <__malloc_unlock>
 8001ad8:	e794      	b.n	8001a04 <_malloc_r+0x20>
 8001ada:	6005      	str	r5, [r0, #0]
 8001adc:	e7d6      	b.n	8001a8c <_malloc_r+0xa8>
 8001ade:	bf00      	nop
 8001ae0:	200001d4 	.word	0x200001d4

08001ae4 <__malloc_lock>:
 8001ae4:	4801      	ldr	r0, [pc, #4]	@ (8001aec <__malloc_lock+0x8>)
 8001ae6:	f7ff bf10 	b.w	800190a <__retarget_lock_acquire_recursive>
 8001aea:	bf00      	nop
 8001aec:	200001cc 	.word	0x200001cc

08001af0 <__malloc_unlock>:
 8001af0:	4801      	ldr	r0, [pc, #4]	@ (8001af8 <__malloc_unlock+0x8>)
 8001af2:	f7ff bf0b 	b.w	800190c <__retarget_lock_release_recursive>
 8001af6:	bf00      	nop
 8001af8:	200001cc 	.word	0x200001cc

08001afc <__sflush_r>:
 8001afc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b02:	0716      	lsls	r6, r2, #28
 8001b04:	4605      	mov	r5, r0
 8001b06:	460c      	mov	r4, r1
 8001b08:	d454      	bmi.n	8001bb4 <__sflush_r+0xb8>
 8001b0a:	684b      	ldr	r3, [r1, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	dc02      	bgt.n	8001b16 <__sflush_r+0x1a>
 8001b10:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	dd48      	ble.n	8001ba8 <__sflush_r+0xac>
 8001b16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d045      	beq.n	8001ba8 <__sflush_r+0xac>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001b22:	682f      	ldr	r7, [r5, #0]
 8001b24:	6a21      	ldr	r1, [r4, #32]
 8001b26:	602b      	str	r3, [r5, #0]
 8001b28:	d030      	beq.n	8001b8c <__sflush_r+0x90>
 8001b2a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	0759      	lsls	r1, r3, #29
 8001b30:	d505      	bpl.n	8001b3e <__sflush_r+0x42>
 8001b32:	6863      	ldr	r3, [r4, #4]
 8001b34:	1ad2      	subs	r2, r2, r3
 8001b36:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001b38:	b10b      	cbz	r3, 8001b3e <__sflush_r+0x42>
 8001b3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b3c:	1ad2      	subs	r2, r2, r3
 8001b3e:	2300      	movs	r3, #0
 8001b40:	4628      	mov	r0, r5
 8001b42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b44:	6a21      	ldr	r1, [r4, #32]
 8001b46:	47b0      	blx	r6
 8001b48:	1c43      	adds	r3, r0, #1
 8001b4a:	89a3      	ldrh	r3, [r4, #12]
 8001b4c:	d106      	bne.n	8001b5c <__sflush_r+0x60>
 8001b4e:	6829      	ldr	r1, [r5, #0]
 8001b50:	291d      	cmp	r1, #29
 8001b52:	d82b      	bhi.n	8001bac <__sflush_r+0xb0>
 8001b54:	4a28      	ldr	r2, [pc, #160]	@ (8001bf8 <__sflush_r+0xfc>)
 8001b56:	410a      	asrs	r2, r1
 8001b58:	07d6      	lsls	r6, r2, #31
 8001b5a:	d427      	bmi.n	8001bac <__sflush_r+0xb0>
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6062      	str	r2, [r4, #4]
 8001b60:	6922      	ldr	r2, [r4, #16]
 8001b62:	04d9      	lsls	r1, r3, #19
 8001b64:	6022      	str	r2, [r4, #0]
 8001b66:	d504      	bpl.n	8001b72 <__sflush_r+0x76>
 8001b68:	1c42      	adds	r2, r0, #1
 8001b6a:	d101      	bne.n	8001b70 <__sflush_r+0x74>
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	b903      	cbnz	r3, 8001b72 <__sflush_r+0x76>
 8001b70:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b74:	602f      	str	r7, [r5, #0]
 8001b76:	b1b9      	cbz	r1, 8001ba8 <__sflush_r+0xac>
 8001b78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b7c:	4299      	cmp	r1, r3
 8001b7e:	d002      	beq.n	8001b86 <__sflush_r+0x8a>
 8001b80:	4628      	mov	r0, r5
 8001b82:	f7ff fec5 	bl	8001910 <_free_r>
 8001b86:	2300      	movs	r3, #0
 8001b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b8a:	e00d      	b.n	8001ba8 <__sflush_r+0xac>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	4628      	mov	r0, r5
 8001b90:	47b0      	blx	r6
 8001b92:	4602      	mov	r2, r0
 8001b94:	1c50      	adds	r0, r2, #1
 8001b96:	d1c9      	bne.n	8001b2c <__sflush_r+0x30>
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0c6      	beq.n	8001b2c <__sflush_r+0x30>
 8001b9e:	2b1d      	cmp	r3, #29
 8001ba0:	d001      	beq.n	8001ba6 <__sflush_r+0xaa>
 8001ba2:	2b16      	cmp	r3, #22
 8001ba4:	d11d      	bne.n	8001be2 <__sflush_r+0xe6>
 8001ba6:	602f      	str	r7, [r5, #0]
 8001ba8:	2000      	movs	r0, #0
 8001baa:	e021      	b.n	8001bf0 <__sflush_r+0xf4>
 8001bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	e01a      	b.n	8001bea <__sflush_r+0xee>
 8001bb4:	690f      	ldr	r7, [r1, #16]
 8001bb6:	2f00      	cmp	r7, #0
 8001bb8:	d0f6      	beq.n	8001ba8 <__sflush_r+0xac>
 8001bba:	0793      	lsls	r3, r2, #30
 8001bbc:	bf18      	it	ne
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	680e      	ldr	r6, [r1, #0]
 8001bc2:	bf08      	it	eq
 8001bc4:	694b      	ldreq	r3, [r1, #20]
 8001bc6:	1bf6      	subs	r6, r6, r7
 8001bc8:	600f      	str	r7, [r1, #0]
 8001bca:	608b      	str	r3, [r1, #8]
 8001bcc:	2e00      	cmp	r6, #0
 8001bce:	ddeb      	ble.n	8001ba8 <__sflush_r+0xac>
 8001bd0:	4633      	mov	r3, r6
 8001bd2:	463a      	mov	r2, r7
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	6a21      	ldr	r1, [r4, #32]
 8001bd8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001bdc:	47e0      	blx	ip
 8001bde:	2800      	cmp	r0, #0
 8001be0:	dc07      	bgt.n	8001bf2 <__sflush_r+0xf6>
 8001be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bea:	f04f 30ff 	mov.w	r0, #4294967295
 8001bee:	81a3      	strh	r3, [r4, #12]
 8001bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf2:	4407      	add	r7, r0
 8001bf4:	1a36      	subs	r6, r6, r0
 8001bf6:	e7e9      	b.n	8001bcc <__sflush_r+0xd0>
 8001bf8:	dfbffffe 	.word	0xdfbffffe

08001bfc <_fflush_r>:
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	690b      	ldr	r3, [r1, #16]
 8001c00:	4605      	mov	r5, r0
 8001c02:	460c      	mov	r4, r1
 8001c04:	b913      	cbnz	r3, 8001c0c <_fflush_r+0x10>
 8001c06:	2500      	movs	r5, #0
 8001c08:	4628      	mov	r0, r5
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
 8001c0c:	b118      	cbz	r0, 8001c16 <_fflush_r+0x1a>
 8001c0e:	6a03      	ldr	r3, [r0, #32]
 8001c10:	b90b      	cbnz	r3, 8001c16 <_fflush_r+0x1a>
 8001c12:	f7ff fc95 	bl	8001540 <__sinit>
 8001c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f3      	beq.n	8001c06 <_fflush_r+0xa>
 8001c1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c20:	07d0      	lsls	r0, r2, #31
 8001c22:	d404      	bmi.n	8001c2e <_fflush_r+0x32>
 8001c24:	0599      	lsls	r1, r3, #22
 8001c26:	d402      	bmi.n	8001c2e <_fflush_r+0x32>
 8001c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c2a:	f7ff fe6e 	bl	800190a <__retarget_lock_acquire_recursive>
 8001c2e:	4628      	mov	r0, r5
 8001c30:	4621      	mov	r1, r4
 8001c32:	f7ff ff63 	bl	8001afc <__sflush_r>
 8001c36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001c38:	4605      	mov	r5, r0
 8001c3a:	07da      	lsls	r2, r3, #31
 8001c3c:	d4e4      	bmi.n	8001c08 <_fflush_r+0xc>
 8001c3e:	89a3      	ldrh	r3, [r4, #12]
 8001c40:	059b      	lsls	r3, r3, #22
 8001c42:	d4e1      	bmi.n	8001c08 <_fflush_r+0xc>
 8001c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c46:	f7ff fe61 	bl	800190c <__retarget_lock_release_recursive>
 8001c4a:	e7dd      	b.n	8001c08 <_fflush_r+0xc>

08001c4c <__swhatbuf_r>:
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	460c      	mov	r4, r1
 8001c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c54:	4615      	mov	r5, r2
 8001c56:	2900      	cmp	r1, #0
 8001c58:	461e      	mov	r6, r3
 8001c5a:	b096      	sub	sp, #88	@ 0x58
 8001c5c:	da0c      	bge.n	8001c78 <__swhatbuf_r+0x2c>
 8001c5e:	89a3      	ldrh	r3, [r4, #12]
 8001c60:	2100      	movs	r1, #0
 8001c62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c66:	bf14      	ite	ne
 8001c68:	2340      	movne	r3, #64	@ 0x40
 8001c6a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c6e:	2000      	movs	r0, #0
 8001c70:	6031      	str	r1, [r6, #0]
 8001c72:	602b      	str	r3, [r5, #0]
 8001c74:	b016      	add	sp, #88	@ 0x58
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
 8001c78:	466a      	mov	r2, sp
 8001c7a:	f000 f849 	bl	8001d10 <_fstat_r>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	dbed      	blt.n	8001c5e <__swhatbuf_r+0x12>
 8001c82:	9901      	ldr	r1, [sp, #4]
 8001c84:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c88:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c8c:	4259      	negs	r1, r3
 8001c8e:	4159      	adcs	r1, r3
 8001c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c94:	e7eb      	b.n	8001c6e <__swhatbuf_r+0x22>

08001c96 <__smakebuf_r>:
 8001c96:	898b      	ldrh	r3, [r1, #12]
 8001c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c9a:	079d      	lsls	r5, r3, #30
 8001c9c:	4606      	mov	r6, r0
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	d507      	bpl.n	8001cb2 <__smakebuf_r+0x1c>
 8001ca2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ca6:	6023      	str	r3, [r4, #0]
 8001ca8:	6123      	str	r3, [r4, #16]
 8001caa:	2301      	movs	r3, #1
 8001cac:	6163      	str	r3, [r4, #20]
 8001cae:	b003      	add	sp, #12
 8001cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb2:	466a      	mov	r2, sp
 8001cb4:	ab01      	add	r3, sp, #4
 8001cb6:	f7ff ffc9 	bl	8001c4c <__swhatbuf_r>
 8001cba:	9f00      	ldr	r7, [sp, #0]
 8001cbc:	4605      	mov	r5, r0
 8001cbe:	4639      	mov	r1, r7
 8001cc0:	4630      	mov	r0, r6
 8001cc2:	f7ff fe8f 	bl	80019e4 <_malloc_r>
 8001cc6:	b948      	cbnz	r0, 8001cdc <__smakebuf_r+0x46>
 8001cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ccc:	059a      	lsls	r2, r3, #22
 8001cce:	d4ee      	bmi.n	8001cae <__smakebuf_r+0x18>
 8001cd0:	f023 0303 	bic.w	r3, r3, #3
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	81a3      	strh	r3, [r4, #12]
 8001cda:	e7e2      	b.n	8001ca2 <__smakebuf_r+0xc>
 8001cdc:	89a3      	ldrh	r3, [r4, #12]
 8001cde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce6:	81a3      	strh	r3, [r4, #12]
 8001ce8:	9b01      	ldr	r3, [sp, #4]
 8001cea:	6020      	str	r0, [r4, #0]
 8001cec:	b15b      	cbz	r3, 8001d06 <__smakebuf_r+0x70>
 8001cee:	4630      	mov	r0, r6
 8001cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cf4:	f000 f81e 	bl	8001d34 <_isatty_r>
 8001cf8:	b128      	cbz	r0, 8001d06 <__smakebuf_r+0x70>
 8001cfa:	89a3      	ldrh	r3, [r4, #12]
 8001cfc:	f023 0303 	bic.w	r3, r3, #3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	81a3      	strh	r3, [r4, #12]
 8001d06:	89a3      	ldrh	r3, [r4, #12]
 8001d08:	431d      	orrs	r5, r3
 8001d0a:	81a5      	strh	r5, [r4, #12]
 8001d0c:	e7cf      	b.n	8001cae <__smakebuf_r+0x18>
	...

08001d10 <_fstat_r>:
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	2300      	movs	r3, #0
 8001d14:	4d06      	ldr	r5, [pc, #24]	@ (8001d30 <_fstat_r+0x20>)
 8001d16:	4604      	mov	r4, r0
 8001d18:	4608      	mov	r0, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	602b      	str	r3, [r5, #0]
 8001d1e:	f7fe fbbc 	bl	800049a <_fstat>
 8001d22:	1c43      	adds	r3, r0, #1
 8001d24:	d102      	bne.n	8001d2c <_fstat_r+0x1c>
 8001d26:	682b      	ldr	r3, [r5, #0]
 8001d28:	b103      	cbz	r3, 8001d2c <_fstat_r+0x1c>
 8001d2a:	6023      	str	r3, [r4, #0]
 8001d2c:	bd38      	pop	{r3, r4, r5, pc}
 8001d2e:	bf00      	nop
 8001d30:	200001c8 	.word	0x200001c8

08001d34 <_isatty_r>:
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	2300      	movs	r3, #0
 8001d38:	4d05      	ldr	r5, [pc, #20]	@ (8001d50 <_isatty_r+0x1c>)
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	4608      	mov	r0, r1
 8001d3e:	602b      	str	r3, [r5, #0]
 8001d40:	f7fe fbba 	bl	80004b8 <_isatty>
 8001d44:	1c43      	adds	r3, r0, #1
 8001d46:	d102      	bne.n	8001d4e <_isatty_r+0x1a>
 8001d48:	682b      	ldr	r3, [r5, #0]
 8001d4a:	b103      	cbz	r3, 8001d4e <_isatty_r+0x1a>
 8001d4c:	6023      	str	r3, [r4, #0]
 8001d4e:	bd38      	pop	{r3, r4, r5, pc}
 8001d50:	200001c8 	.word	0x200001c8

08001d54 <_sbrk_r>:
 8001d54:	b538      	push	{r3, r4, r5, lr}
 8001d56:	2300      	movs	r3, #0
 8001d58:	4d05      	ldr	r5, [pc, #20]	@ (8001d70 <_sbrk_r+0x1c>)
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	602b      	str	r3, [r5, #0]
 8001d60:	f7fe fbc0 	bl	80004e4 <_sbrk>
 8001d64:	1c43      	adds	r3, r0, #1
 8001d66:	d102      	bne.n	8001d6e <_sbrk_r+0x1a>
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	b103      	cbz	r3, 8001d6e <_sbrk_r+0x1a>
 8001d6c:	6023      	str	r3, [r4, #0]
 8001d6e:	bd38      	pop	{r3, r4, r5, pc}
 8001d70:	200001c8 	.word	0x200001c8

08001d74 <_init>:
 8001d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d76:	bf00      	nop
 8001d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d7a:	bc08      	pop	{r3}
 8001d7c:	469e      	mov	lr, r3
 8001d7e:	4770      	bx	lr

08001d80 <_fini>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	bf00      	nop
 8001d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d86:	bc08      	pop	{r3}
 8001d88:	469e      	mov	lr, r3
 8001d8a:	4770      	bx	lr
