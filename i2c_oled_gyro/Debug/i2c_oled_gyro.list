
i2c_oled_gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070ec  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d78  08007200  08007200  00008200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f78  08008f78  0000a288  2**0
                  CONTENTS
  4 .ARM          00000008  08008f78  08008f78  00009f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f80  08008f80  0000a288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f80  08008f80  00009f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f84  08008f84  00009f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000288  20000000  08008f88  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000288  08009210  0000a288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  08009210  0000a8b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008095  00000000  00000000  0000a2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af7  00000000  00000000  00012346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  00013e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000675  00000000  00000000  000146d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b745  00000000  00000000  00014d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b678  00000000  00000000  00030492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f57  00000000  00000000  0003bb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1a61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  000c1aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c4f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000288 	.word	0x20000288
 800012c:	00000000 	.word	0x00000000
 8000130:	080071e4 	.word	0x080071e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000028c 	.word	0x2000028c
 800014c:	080071e4 	.word	0x080071e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fe0d 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f859 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 f8c1 	bl	80010d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f56:	f000 f891 	bl	800107c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000f5a:	f002 fd8d 	bl	8003a78 <ssd1306_Init>
  ssd1306_WriteString("Aula 10", Font_16x24, White);
 8000f5e:	4a21      	ldr	r2, [pc, #132]	@ (8000fe4 <main+0xa0>)
 8000f60:	2301      	movs	r3, #1
 8000f62:	ca06      	ldmia	r2, {r1, r2}
 8000f64:	4820      	ldr	r0, [pc, #128]	@ (8000fe8 <main+0xa4>)
 8000f66:	f002 ff15 	bl	8003d94 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 26);
 8000f6a:	211a      	movs	r1, #26
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f002 ff37 	bl	8003de0 <ssd1306_SetCursor>
  ssd1306_WriteString("MPU6050", Font_7x10, White);
 8000f72:	4a1e      	ldr	r2, [pc, #120]	@ (8000fec <main+0xa8>)
 8000f74:	2301      	movs	r3, #1
 8000f76:	ca06      	ldmia	r2, {r1, r2}
 8000f78:	481d      	ldr	r0, [pc, #116]	@ (8000ff0 <main+0xac>)
 8000f7a:	f002 ff0b 	bl	8003d94 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000f7e:	f002 fe07 	bl	8003b90 <ssd1306_UpdateScreen>

  MPU6050_Init(&hi2c1);
 8000f82:	481c      	ldr	r0, [pc, #112]	@ (8000ff4 <main+0xb0>)
 8000f84:	f000 f8dc 	bl	8001140 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(&hi2c1,  &MPU6050);
 8000f88:	491b      	ldr	r1, [pc, #108]	@ (8000ff8 <main+0xb4>)
 8000f8a:	481a      	ldr	r0, [pc, #104]	@ (8000ff4 <main+0xb0>)
 8000f8c:	f000 f930 	bl	80011f0 <MPU6050_Read_All>

	  sprintf(texto, "Angle X: %.2f°", MPU6050.KalmanAngleX);
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <main+0xb4>)
 8000f92:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000f96:	1d38      	adds	r0, r7, #4
 8000f98:	4918      	ldr	r1, [pc, #96]	@ (8000ffc <main+0xb8>)
 8000f9a:	f003 fc89 	bl	80048b0 <siprintf>
//	  sprintf(texto, "Angle X: %d", 2);
	  ssd1306_SetCursor(10, 38);
 8000f9e:	2126      	movs	r1, #38	@ 0x26
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f002 ff1d 	bl	8003de0 <ssd1306_SetCursor>
	  ssd1306_WriteString(texto, Font_7x10, White);
 8000fa6:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <main+0xa8>)
 8000fa8:	1d38      	adds	r0, r7, #4
 8000faa:	2301      	movs	r3, #1
 8000fac:	ca06      	ldmia	r2, {r1, r2}
 8000fae:	f002 fef1 	bl	8003d94 <ssd1306_WriteString>

	  sprintf(texto, "Angle Y: %.2f°", MPU6050.KalmanAngleY);
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <main+0xb4>)
 8000fb4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8000fb8:	1d38      	adds	r0, r7, #4
 8000fba:	4911      	ldr	r1, [pc, #68]	@ (8001000 <main+0xbc>)
 8000fbc:	f003 fc78 	bl	80048b0 <siprintf>
	  ssd1306_SetCursor(10, 38 + 12);
 8000fc0:	2132      	movs	r1, #50	@ 0x32
 8000fc2:	200a      	movs	r0, #10
 8000fc4:	f002 ff0c 	bl	8003de0 <ssd1306_SetCursor>
	  ssd1306_WriteString(texto, Font_7x10, White);
 8000fc8:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <main+0xa8>)
 8000fca:	1d38      	adds	r0, r7, #4
 8000fcc:	2301      	movs	r3, #1
 8000fce:	ca06      	ldmia	r2, {r1, r2}
 8000fd0:	f002 fee0 	bl	8003d94 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 8000fd4:	f002 fddc 	bl	8003b90 <ssd1306_UpdateScreen>

	  HAL_Delay(50);
 8000fd8:	2032      	movs	r0, #50	@ 0x32
 8000fda:	f000 fe27 	bl	8001c2c <HAL_Delay>
	  MPU6050_Read_All(&hi2c1,  &MPU6050);
 8000fde:	bf00      	nop
 8000fe0:	e7d2      	b.n	8000f88 <main+0x44>
 8000fe2:	bf00      	nop
 8000fe4:	200000a4 	.word	0x200000a4
 8000fe8:	08007200 	.word	0x08007200
 8000fec:	2000009c 	.word	0x2000009c
 8000ff0:	08007208 	.word	0x08007208
 8000ff4:	200002a4 	.word	0x200002a4
 8000ff8:	200002f8 	.word	0x200002f8
 8000ffc:	08007210 	.word	0x08007210
 8001000:	08007220 	.word	0x08007220

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b090      	sub	sp, #64	@ 0x40
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	2228      	movs	r2, #40	@ 0x28
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f003 fcc9 	bl	80049aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102a:	2301      	movs	r3, #1
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102e:	2310      	movs	r3, #16
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001032:	2300      	movs	r3, #0
 8001034:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	4618      	mov	r0, r3
 800103c:	f002 f8e8 	bl	8003210 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001046:	f000 f875 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fb56 	bl	8003714 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800106e:	f000 f861 	bl	8001134 <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3740      	adds	r7, #64	@ 0x40
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <MX_I2C1_Init+0x50>)
 8001082:	4a13      	ldr	r2, [pc, #76]	@ (80010d0 <MX_I2C1_Init+0x54>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_I2C1_Init+0x50>)
 8001088:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <MX_I2C1_Init+0x58>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <MX_I2C1_Init+0x50>)
 800109a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800109e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010ba:	f001 f843 	bl	8002144 <HAL_I2C_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c4:	f000 f836 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200002a4 	.word	0x200002a4
 80010d0:	40005400 	.word	0x40005400
 80010d4:	00061a80 	.word	0x00061a80

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <MX_GPIO_Init+0x58>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <MX_GPIO_Init+0x58>)
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_GPIO_Init+0x58>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f003 0320 	and.w	r3, r3, #32
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_GPIO_Init+0x58>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <MX_GPIO_Init+0x58>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	6193      	str	r3, [r2, #24]
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_GPIO_Init+0x58>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_GPIO_Init+0x58>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <MX_GPIO_Init+0x58>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <MX_GPIO_Init+0x58>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <Error_Handler+0x8>

08001140 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af04      	add	r7, sp, #16
 8001146:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001148:	2364      	movs	r3, #100	@ 0x64
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2301      	movs	r3, #1
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	f107 030f 	add.w	r3, r7, #15
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	2275      	movs	r2, #117	@ 0x75
 800115a:	21d0      	movs	r1, #208	@ 0xd0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fa2f 	bl	80025c0 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b68      	cmp	r3, #104	@ 0x68
 8001166:	d13d      	bne.n	80011e4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2301      	movs	r3, #1
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f107 030e 	add.w	r3, r7, #14
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	226b      	movs	r2, #107	@ 0x6b
 800117e:	21d0      	movs	r1, #208	@ 0xd0
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f001 f923 	bl	80023cc <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001186:	2307      	movs	r3, #7
 8001188:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800118a:	2364      	movs	r3, #100	@ 0x64
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030e 	add.w	r3, r7, #14
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2219      	movs	r2, #25
 800119c:	21d0      	movs	r1, #208	@ 0xd0
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f001 f914 	bl	80023cc <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80011a8:	2364      	movs	r3, #100	@ 0x64
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	2301      	movs	r3, #1
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	f107 030e 	add.w	r3, r7, #14
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	221c      	movs	r2, #28
 80011ba:	21d0      	movs	r1, #208	@ 0xd0
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f001 f905 	bl	80023cc <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80011c6:	2364      	movs	r3, #100	@ 0x64
 80011c8:	9302      	str	r3, [sp, #8]
 80011ca:	2301      	movs	r3, #1
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	f107 030e 	add.w	r3, r7, #14
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	221b      	movs	r2, #27
 80011d8:	21d0      	movs	r1, #208	@ 0xd0
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f001 f8f6 	bl	80023cc <HAL_I2C_Mem_Write>
        return 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e000      	b.n	80011e6 <MPU6050_Init+0xa6>
    }
    return 1;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80011f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f4:	b094      	sub	sp, #80	@ 0x50
 80011f6:	af04      	add	r7, sp, #16
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80011fc:	2364      	movs	r3, #100	@ 0x64
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	230e      	movs	r3, #14
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	223b      	movs	r2, #59	@ 0x3b
 800120e:	21d0      	movs	r1, #208	@ 0xd0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f001 f9d5 	bl	80025c0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001216:	7a3b      	ldrb	r3, [r7, #8]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	7a7b      	ldrb	r3, [r7, #9]
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b21a      	sxth	r2, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001228:	7abb      	ldrb	r3, [r7, #10]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b21a      	sxth	r2, r3
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	b21b      	sxth	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b21a      	sxth	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800123a:	7b3b      	ldrb	r3, [r7, #12]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7b7b      	ldrb	r3, [r7, #13]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21a      	sxth	r2, r3
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800125a:	7c3b      	ldrb	r3, [r7, #16]
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	7c7b      	ldrb	r3, [r7, #17]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21a      	sxth	r2, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800126c:	7cbb      	ldrb	r3, [r7, #18]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21a      	sxth	r2, r3
 8001272:	7cfb      	ldrb	r3, [r7, #19]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21a      	sxth	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800127e:	7d3b      	ldrb	r3, [r7, #20]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21a      	sxth	r2, r3
 8001284:	7d7b      	ldrb	r3, [r7, #21]
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21a      	sxth	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f8b4 	bl	8000404 <__aeabi_i2d>
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b95      	ldr	r3, [pc, #596]	@ (80014f8 <MPU6050_Read_All+0x308>)
 80012a2:	f7ff fa43 	bl	800072c <__aeabi_ddiv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f8a4 	bl	8000404 <__aeabi_i2d>
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b8d      	ldr	r3, [pc, #564]	@ (80014f8 <MPU6050_Read_All+0x308>)
 80012c2:	f7ff fa33 	bl	800072c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f894 	bl	8000404 <__aeabi_i2d>
 80012dc:	a380      	add	r3, pc, #512	@ (adr r3, 80014e0 <MPU6050_Read_All+0x2f0>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff fa23 	bl	800072c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	6839      	ldr	r1, [r7, #0]
 80012ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80012f0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fc81 	bl	8000bfc <__aeabi_i2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	497f      	ldr	r1, [pc, #508]	@ (80014fc <MPU6050_Read_All+0x30c>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fd84 	bl	8000e0c <__aeabi_fdiv>
 8001304:	4603      	mov	r3, r0
 8001306:	497e      	ldr	r1, [pc, #504]	@ (8001500 <MPU6050_Read_All+0x310>)
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fbc3 	bl	8000a94 <__addsf3>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f871 	bl	8000404 <__aeabi_i2d>
 8001322:	a371      	add	r3, pc, #452	@ (adr r3, 80014e8 <MPU6050_Read_All+0x2f8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff fa00 	bl	800072c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f861 	bl	8000404 <__aeabi_i2d>
 8001342:	a369      	add	r3, pc, #420	@ (adr r3, 80014e8 <MPU6050_Read_All+0x2f8>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f9f0 	bl	800072c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	6839      	ldr	r1, [r7, #0]
 8001352:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f851 	bl	8000404 <__aeabi_i2d>
 8001362:	a361      	add	r3, pc, #388	@ (adr r3, 80014e8 <MPU6050_Read_All+0x2f8>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f9e0 	bl	800072c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001376:	f000 fc4f 	bl	8001c18 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	4b61      	ldr	r3, [pc, #388]	@ (8001504 <MPU6050_Read_All+0x314>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f82e 	bl	80003e4 <__aeabi_ui2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b5e      	ldr	r3, [pc, #376]	@ (8001508 <MPU6050_Read_All+0x318>)
 800138e:	f7ff f9cd 	bl	800072c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800139a:	f000 fc3d 	bl	8001c18 <HAL_GetTick>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a58      	ldr	r2, [pc, #352]	@ (8001504 <MPU6050_Read_All+0x314>)
 80013a2:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	461a      	mov	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	fb03 f202 	mul.w	r2, r3, r2
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013bc:	4619      	mov	r1, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f81a 	bl	8000404 <__aeabi_i2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f005 fba2 	bl	8006b20 <sqrt>
 80013dc:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013ec:	f7ff fadc 	bl	80009a8 <__aeabi_dcmpeq>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d119      	bne.n	800142a <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f801 	bl	8000404 <__aeabi_i2d>
 8001402:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001406:	f7ff f991 	bl	800072c <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f005 fba9 	bl	8006b68 <atan>
 8001416:	a336      	add	r3, pc, #216	@ (adr r3, 80014f0 <MPU6050_Read_All+0x300>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f85c 	bl	80004d8 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001428:	e005      	b.n	8001436 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	425b      	negs	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ffe0 	bl	8000404 <__aeabi_i2d>
 8001444:	4682      	mov	sl, r0
 8001446:	468b      	mov	fp, r1
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ffd8 	bl	8000404 <__aeabi_i2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4650      	mov	r0, sl
 800145a:	4659      	mov	r1, fp
 800145c:	f005 fb5e 	bl	8006b1c <atan2>
 8001460:	a323      	add	r3, pc, #140	@ (adr r3, 80014f0 <MPU6050_Read_All+0x300>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7ff f837 	bl	80004d8 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	4b25      	ldr	r3, [pc, #148]	@ (800150c <MPU6050_Read_All+0x31c>)
 8001478:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800147c:	f7ff fa9e 	bl	80009bc <__aeabi_dcmplt>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00a      	beq.n	800149c <MPU6050_Read_All+0x2ac>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <MPU6050_Read_All+0x320>)
 8001492:	f7ff fab1 	bl	80009f8 <__aeabi_dcmpgt>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d114      	bne.n	80014c6 <MPU6050_Read_All+0x2d6>
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <MPU6050_Read_All+0x320>)
 80014a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014a6:	f7ff faa7 	bl	80009f8 <__aeabi_dcmpgt>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d033      	beq.n	8001518 <MPU6050_Read_All+0x328>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <MPU6050_Read_All+0x31c>)
 80014bc:	f7ff fa7e 	bl	80009bc <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d028      	beq.n	8001518 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 80014c6:	4913      	ldr	r1, [pc, #76]	@ (8001514 <MPU6050_Read_All+0x324>)
 80014c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80014d0:	6839      	ldr	r1, [r7, #0]
 80014d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014d6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80014da:	e030      	b.n	800153e <MPU6050_Read_All+0x34e>
 80014dc:	f3af 8000 	nop.w
 80014e0:	00000000 	.word	0x00000000
 80014e4:	40cc2900 	.word	0x40cc2900
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40606000 	.word	0x40606000
 80014f0:	1a63c1f8 	.word	0x1a63c1f8
 80014f4:	404ca5dc 	.word	0x404ca5dc
 80014f8:	40d00000 	.word	0x40d00000
 80014fc:	43aa0000 	.word	0x43aa0000
 8001500:	42121eb8 	.word	0x42121eb8
 8001504:	20000350 	.word	0x20000350
 8001508:	408f4000 	.word	0x408f4000
 800150c:	c0568000 	.word	0xc0568000
 8001510:	40568000 	.word	0x40568000
 8001514:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800151e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001526:	e9cd 2300 	strd	r2, r3, [sp]
 800152a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800152e:	481c      	ldr	r0, [pc, #112]	@ (80015a0 <MPU6050_Read_All+0x3b0>)
 8001530:	f000 f83c 	bl	80015ac <Kalman_getAngle>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	6839      	ldr	r1, [r7, #0]
 800153a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001544:	4690      	mov	r8, r2
 8001546:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <MPU6050_Read_All+0x3b4>)
 8001550:	4640      	mov	r0, r8
 8001552:	4649      	mov	r1, r9
 8001554:	f7ff fa50 	bl	80009f8 <__aeabi_dcmpgt>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d008      	beq.n	8001570 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001564:	4614      	mov	r4, r2
 8001566:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800157a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800157e:	e9cd 2300 	strd	r2, r3, [sp]
 8001582:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001586:	4808      	ldr	r0, [pc, #32]	@ (80015a8 <MPU6050_Read_All+0x3b8>)
 8001588:	f000 f810 	bl	80015ac <Kalman_getAngle>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8001596:	bf00      	nop
 8001598:	3740      	adds	r7, #64	@ 0x40
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015a0:	20000048 	.word	0x20000048
 80015a4:	40568000 	.word	0x40568000
 80015a8:	20000000 	.word	0x20000000

080015ac <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b092      	sub	sp, #72	@ 0x48
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80015c2:	f7fe fdd1 	bl	8000168 <__aeabi_dsub>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80015d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80015dc:	f7fe ff7c 	bl	80004d8 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4620      	mov	r0, r4
 80015e6:	4629      	mov	r1, r5
 80015e8:	f7fe fdc0 	bl	800016c <__adddf3>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	68f9      	ldr	r1, [r7, #12]
 80015f2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001602:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001606:	f7fe ff67 	bl	80004d8 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001618:	f7fe fda6 	bl	8000168 <__aeabi_dsub>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800162a:	f7fe fd9d 	bl	8000168 <__aeabi_dsub>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7fe fd96 	bl	800016c <__adddf3>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800164c:	f7fe ff44 	bl	80004d8 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7fe fd88 	bl	800016c <__adddf3>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	68f9      	ldr	r1, [r7, #12]
 8001662:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001672:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001676:	f7fe ff2f 	bl	80004d8 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4620      	mov	r0, r4
 8001680:	4629      	mov	r1, r5
 8001682:	f7fe fd71 	bl	8000168 <__aeabi_dsub>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800169c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80016a0:	f7fe ff1a 	bl	80004d8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4620      	mov	r0, r4
 80016aa:	4629      	mov	r1, r5
 80016ac:	f7fe fd5c 	bl	8000168 <__aeabi_dsub>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	68f9      	ldr	r1, [r7, #12]
 80016b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80016ca:	f7fe ff05 	bl	80004d8 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4620      	mov	r0, r4
 80016d4:	4629      	mov	r1, r5
 80016d6:	f7fe fd49 	bl	800016c <__adddf3>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	68f9      	ldr	r1, [r7, #12]
 80016e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016f0:	f7fe fd3c 	bl	800016c <__adddf3>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001702:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001706:	f7ff f811 	bl	800072c <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800171c:	f7ff f806 	bl	800072c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f7fe fd19 	bl	8000168 <__aeabi_dsub>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001748:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800174c:	f7fe fec4 	bl	80004d8 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	f7fe fd08 	bl	800016c <__adddf3>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800176c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001770:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001774:	f7fe feb0 	bl	80004d8 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe fcf4 	bl	800016c <__adddf3>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	68f9      	ldr	r1, [r7, #12]
 800178a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001794:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800179e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80017a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017b0:	f7fe fe92 	bl	80004d8 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7fe fcd4 	bl	8000168 <__aeabi_dsub>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	68f9      	ldr	r1, [r7, #12]
 80017c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80017d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017d8:	f7fe fe7e 	bl	80004d8 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe fcc0 	bl	8000168 <__aeabi_dsub>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80017f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001800:	f7fe fe6a 	bl	80004d8 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7fe fcac 	bl	8000168 <__aeabi_dsub>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	68f9      	ldr	r1, [r7, #12]
 8001816:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001820:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001824:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001828:	f7fe fe56 	bl	80004d8 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fc98 	bl	8000168 <__aeabi_dsub>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	68f9      	ldr	r1, [r7, #12]
 800183e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	3748      	adds	r7, #72	@ 0x48
 800184e:	46bd      	mov	sp, r7
 8001850:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_MspInit+0x5c>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	4a14      	ldr	r2, [pc, #80]	@ (80018b0 <HAL_MspInit+0x5c>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6193      	str	r3, [r2, #24]
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_MspInit+0x5c>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_MspInit+0x5c>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <HAL_MspInit+0x5c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <HAL_MspInit+0x5c>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <HAL_MspInit+0x60>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_MspInit+0x60>)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000

080018b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a15      	ldr	r2, [pc, #84]	@ (8001928 <HAL_I2C_MspInit+0x70>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d123      	bne.n	8001920 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <HAL_I2C_MspInit+0x74>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a13      	ldr	r2, [pc, #76]	@ (800192c <HAL_I2C_MspInit+0x74>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_I2C_MspInit+0x74>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f0:	23c0      	movs	r3, #192	@ 0xc0
 80018f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f4:	2312      	movs	r3, #18
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4619      	mov	r1, r3
 8001902:	480b      	ldr	r0, [pc, #44]	@ (8001930 <HAL_I2C_MspInit+0x78>)
 8001904:	f000 fa9a 	bl	8001e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <HAL_I2C_MspInit+0x74>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4a07      	ldr	r2, [pc, #28]	@ (800192c <HAL_I2C_MspInit+0x74>)
 800190e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001912:	61d3      	str	r3, [r2, #28]
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <HAL_I2C_MspInit+0x74>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40005400 	.word	0x40005400
 800192c:	40021000 	.word	0x40021000
 8001930:	40010c00 	.word	0x40010c00

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <NMI_Handler+0x4>

0800193c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <MemManage_Handler+0x4>

0800194c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <UsageFault_Handler+0x4>

0800195c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 f936 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return 1;
 8001990:	2301      	movs	r3, #1
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <_kill>:

int _kill(int pid, int sig)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019a4:	f003 f854 	bl	8004a50 <__errno>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2216      	movs	r2, #22
 80019ac:	601a      	str	r2, [r3, #0]
  return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_exit>:

void _exit (int status)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019c2:	f04f 31ff 	mov.w	r1, #4294967295
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffe7 	bl	800199a <_kill>
  while (1) {}    /* Make sure we hang here */
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <_exit+0x12>

080019d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e00a      	b.n	80019f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e2:	f3af 8000 	nop.w
 80019e6:	4601      	mov	r1, r0
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	b2ca      	uxtb	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf0      	blt.n	80019e2 <_read+0x12>
  }

  return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e009      	b.n	8001a30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbf1      	blt.n	8001a1c <_write+0x12>
  }
  return len;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_close>:

int _close(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a68:	605a      	str	r2, [r3, #4]
  return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <_isatty>:

int _isatty(int file)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
	...

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	@ (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f002 ffbc 	bl	8004a50 <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	@ (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20005000 	.word	0x20005000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	20000354 	.word	0x20000354
 8001b0c:	200008b0 	.word	0x200008b0

08001b10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b1c:	f7ff fff8 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	480b      	ldr	r0, [pc, #44]	@ (8001b50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b22:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b24:	4a0c      	ldr	r2, [pc, #48]	@ (8001b58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a09      	ldr	r2, [pc, #36]	@ (8001b5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b38:	4c09      	ldr	r4, [pc, #36]	@ (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b46:	f002 ff89 	bl	8004a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4a:	f7ff f9fb 	bl	8000f44 <main>
  bx lr
 8001b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8001b58:	08008f88 	.word	0x08008f88
  ldr r2, =_sbss
 8001b5c:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8001b60:	200008b0 	.word	0x200008b0

08001b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC1_2_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <HAL_Init+0x28>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <HAL_Init+0x28>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f92b 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	200f      	movs	r0, #15
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fe66 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40022000 	.word	0x40022000

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f935 	bl	8001e22 <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f90b 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	@ (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000090 	.word	0x20000090
 8001bec:	20000098 	.word	0x20000098
 8001bf0:	20000094 	.word	0x20000094

08001bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_IncTick+0x1c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_IncTick+0x20>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a03      	ldr	r2, [pc, #12]	@ (8001c14 <HAL_IncTick+0x20>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000098 	.word	0x20000098
 8001c14:	20000358 	.word	0x20000358

08001c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	@ (8001c28 <HAL_GetTick+0x10>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000358 	.word	0x20000358

08001c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff fff0 	bl	8001c18 <HAL_GetTick>
 8001c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d005      	beq.n	8001c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c46:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <HAL_Delay+0x44>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c52:	bf00      	nop
 8001c54:	f7ff ffe0 	bl	8001c18 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d8f7      	bhi.n	8001c54 <HAL_Delay+0x28>
  {
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000098 	.word	0x20000098

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	@ (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	@ (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	@ 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff90 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff49 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff5e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff90 	bl	8001d2c <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5f 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffb0 	bl	8001d90 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b08b      	sub	sp, #44	@ 0x2c
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e169      	b.n	8002124 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e50:	2201      	movs	r2, #1
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8158 	bne.w	800211e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a9a      	ldr	r2, [pc, #616]	@ (80020dc <HAL_GPIO_Init+0x2a0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d05e      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e78:	4a98      	ldr	r2, [pc, #608]	@ (80020dc <HAL_GPIO_Init+0x2a0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d875      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e7e:	4a98      	ldr	r2, [pc, #608]	@ (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d058      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e84:	4a96      	ldr	r2, [pc, #600]	@ (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d86f      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e8a:	4a96      	ldr	r2, [pc, #600]	@ (80020e4 <HAL_GPIO_Init+0x2a8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d052      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e90:	4a94      	ldr	r2, [pc, #592]	@ (80020e4 <HAL_GPIO_Init+0x2a8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d869      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e96:	4a94      	ldr	r2, [pc, #592]	@ (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d04c      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a92      	ldr	r2, [pc, #584]	@ (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d863      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001ea2:	4a92      	ldr	r2, [pc, #584]	@ (80020ec <HAL_GPIO_Init+0x2b0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d046      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a90      	ldr	r2, [pc, #576]	@ (80020ec <HAL_GPIO_Init+0x2b0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d85d      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d82a      	bhi.n	8001f08 <HAL_GPIO_Init+0xcc>
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d859      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ebc <HAL_GPIO_Init+0x80>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001f37 	.word	0x08001f37
 8001ec0:	08001f11 	.word	0x08001f11
 8001ec4:	08001f23 	.word	0x08001f23
 8001ec8:	08001f65 	.word	0x08001f65
 8001ecc:	08001f6b 	.word	0x08001f6b
 8001ed0:	08001f6b 	.word	0x08001f6b
 8001ed4:	08001f6b 	.word	0x08001f6b
 8001ed8:	08001f6b 	.word	0x08001f6b
 8001edc:	08001f6b 	.word	0x08001f6b
 8001ee0:	08001f6b 	.word	0x08001f6b
 8001ee4:	08001f6b 	.word	0x08001f6b
 8001ee8:	08001f6b 	.word	0x08001f6b
 8001eec:	08001f6b 	.word	0x08001f6b
 8001ef0:	08001f6b 	.word	0x08001f6b
 8001ef4:	08001f6b 	.word	0x08001f6b
 8001ef8:	08001f6b 	.word	0x08001f6b
 8001efc:	08001f6b 	.word	0x08001f6b
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	08001f2d 	.word	0x08001f2d
 8001f08:	4a79      	ldr	r2, [pc, #484]	@ (80020f0 <HAL_GPIO_Init+0x2b4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f0e:	e02c      	b.n	8001f6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	623b      	str	r3, [r7, #32]
          break;
 8001f16:	e029      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	623b      	str	r3, [r7, #32]
          break;
 8001f20:	e024      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	3308      	adds	r3, #8
 8001f28:	623b      	str	r3, [r7, #32]
          break;
 8001f2a:	e01f      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	330c      	adds	r3, #12
 8001f32:	623b      	str	r3, [r7, #32]
          break;
 8001f34:	e01a      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e013      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	611a      	str	r2, [r3, #16]
          break;
 8001f56:	e009      	b.n	8001f6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	615a      	str	r2, [r3, #20]
          break;
 8001f62:	e003      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          break;
 8001f6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2bff      	cmp	r3, #255	@ 0xff
 8001f70:	d801      	bhi.n	8001f76 <HAL_GPIO_Init+0x13a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	e001      	b.n	8001f7a <HAL_GPIO_Init+0x13e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2bff      	cmp	r3, #255	@ 0xff
 8001f80:	d802      	bhi.n	8001f88 <HAL_GPIO_Init+0x14c>
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	e002      	b.n	8001f8e <HAL_GPIO_Init+0x152>
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	3b08      	subs	r3, #8
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	210f      	movs	r1, #15
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	6a39      	ldr	r1, [r7, #32]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80b1 	beq.w	800211e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a4c      	ldr	r2, [pc, #304]	@ (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd4:	4a48      	ldr	r2, [pc, #288]	@ (80020f8 <HAL_GPIO_Init+0x2bc>)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a40      	ldr	r2, [pc, #256]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <HAL_GPIO_Init+0x1ec>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3f      	ldr	r2, [pc, #252]	@ (8002100 <HAL_GPIO_Init+0x2c4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00d      	beq.n	8002024 <HAL_GPIO_Init+0x1e8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3e      	ldr	r2, [pc, #248]	@ (8002104 <HAL_GPIO_Init+0x2c8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d007      	beq.n	8002020 <HAL_GPIO_Init+0x1e4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3d      	ldr	r2, [pc, #244]	@ (8002108 <HAL_GPIO_Init+0x2cc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_GPIO_Init+0x1e0>
 8002018:	2303      	movs	r3, #3
 800201a:	e006      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 800201c:	2304      	movs	r3, #4
 800201e:	e004      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002020:	2302      	movs	r3, #2
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002028:	2300      	movs	r3, #0
 800202a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800203a:	492f      	ldr	r1, [pc, #188]	@ (80020f8 <HAL_GPIO_Init+0x2bc>)
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002054:	4b2d      	ldr	r3, [pc, #180]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	492c      	ldr	r1, [pc, #176]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002062:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4928      	ldr	r1, [pc, #160]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 800206c:	4013      	ands	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800207c:	4b23      	ldr	r3, [pc, #140]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4922      	ldr	r1, [pc, #136]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800208a:	4b20      	ldr	r3, [pc, #128]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	491e      	ldr	r1, [pc, #120]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a4:	4b19      	ldr	r3, [pc, #100]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4918      	ldr	r1, [pc, #96]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4914      	ldr	r1, [pc, #80]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d021      	beq.n	8002110 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	490e      	ldr	r1, [pc, #56]	@ (800210c <HAL_GPIO_Init+0x2d0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
 80020d8:	e021      	b.n	800211e <HAL_GPIO_Init+0x2e2>
 80020da:	bf00      	nop
 80020dc:	10320000 	.word	0x10320000
 80020e0:	10310000 	.word	0x10310000
 80020e4:	10220000 	.word	0x10220000
 80020e8:	10210000 	.word	0x10210000
 80020ec:	10120000 	.word	0x10120000
 80020f0:	10110000 	.word	0x10110000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40010800 	.word	0x40010800
 8002100:	40010c00 	.word	0x40010c00
 8002104:	40011000 	.word	0x40011000
 8002108:	40011400 	.word	0x40011400
 800210c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002110:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <HAL_GPIO_Init+0x304>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	43db      	mvns	r3, r3
 8002118:	4909      	ldr	r1, [pc, #36]	@ (8002140 <HAL_GPIO_Init+0x304>)
 800211a:	4013      	ands	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	3301      	adds	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	f47f ae8e 	bne.w	8001e50 <HAL_GPIO_Init+0x14>
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	372c      	adds	r7, #44	@ 0x2c
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40010400 	.word	0x40010400

08002144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e12b      	b.n	80023ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fba4 	bl	80018b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	@ 0x24
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a8:	f001 fbfc 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 80021ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a81      	ldr	r2, [pc, #516]	@ (80023b8 <HAL_I2C_Init+0x274>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d807      	bhi.n	80021c8 <HAL_I2C_Init+0x84>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a80      	ldr	r2, [pc, #512]	@ (80023bc <HAL_I2C_Init+0x278>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	bf94      	ite	ls
 80021c0:	2301      	movls	r3, #1
 80021c2:	2300      	movhi	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e006      	b.n	80021d6 <HAL_I2C_Init+0x92>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a7d      	ldr	r2, [pc, #500]	@ (80023c0 <HAL_I2C_Init+0x27c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	bf94      	ite	ls
 80021d0:	2301      	movls	r3, #1
 80021d2:	2300      	movhi	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0e7      	b.n	80023ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4a78      	ldr	r2, [pc, #480]	@ (80023c4 <HAL_I2C_Init+0x280>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0c9b      	lsrs	r3, r3, #18
 80021e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a6a      	ldr	r2, [pc, #424]	@ (80023b8 <HAL_I2C_Init+0x274>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d802      	bhi.n	8002218 <HAL_I2C_Init+0xd4>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3301      	adds	r3, #1
 8002216:	e009      	b.n	800222c <HAL_I2C_Init+0xe8>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	4a69      	ldr	r2, [pc, #420]	@ (80023c8 <HAL_I2C_Init+0x284>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	3301      	adds	r3, #1
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	430b      	orrs	r3, r1
 8002232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800223e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	495c      	ldr	r1, [pc, #368]	@ (80023b8 <HAL_I2C_Init+0x274>)
 8002248:	428b      	cmp	r3, r1
 800224a:	d819      	bhi.n	8002280 <HAL_I2C_Init+0x13c>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1e59      	subs	r1, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fbb1 f3f3 	udiv	r3, r1, r3
 800225a:	1c59      	adds	r1, r3, #1
 800225c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002260:	400b      	ands	r3, r1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_I2C_Init+0x138>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1e59      	subs	r1, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fbb1 f3f3 	udiv	r3, r1, r3
 8002274:	3301      	adds	r3, #1
 8002276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227a:	e051      	b.n	8002320 <HAL_I2C_Init+0x1dc>
 800227c:	2304      	movs	r3, #4
 800227e:	e04f      	b.n	8002320 <HAL_I2C_Init+0x1dc>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d111      	bne.n	80022ac <HAL_I2C_Init+0x168>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e58      	subs	r0, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	440b      	add	r3, r1
 8002296:	fbb0 f3f3 	udiv	r3, r0, r3
 800229a:	3301      	adds	r3, #1
 800229c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	e012      	b.n	80022d2 <HAL_I2C_Init+0x18e>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1e58      	subs	r0, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	0099      	lsls	r1, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Init+0x196>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e022      	b.n	8002320 <HAL_I2C_Init+0x1dc>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10e      	bne.n	8002300 <HAL_I2C_Init+0x1bc>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1e58      	subs	r0, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	440b      	add	r3, r1
 80022f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022fe:	e00f      	b.n	8002320 <HAL_I2C_Init+0x1dc>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	0099      	lsls	r1, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	fbb0 f3f3 	udiv	r3, r0, r3
 8002316:	3301      	adds	r3, #1
 8002318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	6809      	ldr	r1, [r1, #0]
 8002324:	4313      	orrs	r3, r2
 8002326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800234e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6911      	ldr	r1, [r2, #16]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68d2      	ldr	r2, [r2, #12]
 800235a:	4311      	orrs	r1, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	430b      	orrs	r3, r1
 8002362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	000186a0 	.word	0x000186a0
 80023bc:	001e847f 	.word	0x001e847f
 80023c0:	003d08ff 	.word	0x003d08ff
 80023c4:	431bde83 	.word	0x431bde83
 80023c8:	10624dd3 	.word	0x10624dd3

080023cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	817b      	strh	r3, [r7, #10]
 80023de:	460b      	mov	r3, r1
 80023e0:	813b      	strh	r3, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023e6:	f7ff fc17 	bl	8001c18 <HAL_GetTick>
 80023ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	f040 80d9 	bne.w	80025ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2319      	movs	r3, #25
 8002400:	2201      	movs	r2, #1
 8002402:	496d      	ldr	r1, [pc, #436]	@ (80025b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fccd 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
 8002412:	e0cc      	b.n	80025ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_I2C_Mem_Write+0x56>
 800241e:	2302      	movs	r3, #2
 8002420:	e0c5      	b.n	80025ae <HAL_I2C_Mem_Write+0x1e2>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d007      	beq.n	8002448 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002456:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2221      	movs	r2, #33	@ 0x21
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2240      	movs	r2, #64	@ 0x40
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002478:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a4d      	ldr	r2, [pc, #308]	@ (80025bc <HAL_I2C_Mem_Write+0x1f0>)
 8002488:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800248a:	88f8      	ldrh	r0, [r7, #6]
 800248c:	893a      	ldrh	r2, [r7, #8]
 800248e:	8979      	ldrh	r1, [r7, #10]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	4603      	mov	r3, r0
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fb04 	bl	8002aa8 <I2C_RequestMemoryWrite>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d052      	beq.n	800254c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e081      	b.n	80025ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fd92 	bl	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d107      	bne.n	80024d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b04      	cmp	r3, #4
 8002512:	d11b      	bne.n	800254c <HAL_I2C_Mem_Write+0x180>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d017      	beq.n	800254c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1aa      	bne.n	80024aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fd85 	bl	8003068 <I2C_WaitOnBTFFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00d      	beq.n	8002580 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	2b04      	cmp	r3, #4
 800256a:	d107      	bne.n	800257c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e016      	b.n	80025ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800258e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	00100002 	.word	0x00100002
 80025bc:	ffff0000 	.word	0xffff0000

080025c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	@ 0x30
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	817b      	strh	r3, [r7, #10]
 80025d2:	460b      	mov	r3, r1
 80025d4:	813b      	strh	r3, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025de:	f7ff fb1b 	bl	8001c18 <HAL_GetTick>
 80025e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	f040 8250 	bne.w	8002a92 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2319      	movs	r3, #25
 80025f8:	2201      	movs	r2, #1
 80025fa:	4982      	ldr	r1, [pc, #520]	@ (8002804 <HAL_I2C_Mem_Read+0x244>)
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 fbd1 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
 800260a:	e243      	b.n	8002a94 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_I2C_Mem_Read+0x5a>
 8002616:	2302      	movs	r3, #2
 8002618:	e23c      	b.n	8002a94 <HAL_I2C_Mem_Read+0x4d4>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d007      	beq.n	8002640 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800264e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2222      	movs	r2, #34	@ 0x22
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2240      	movs	r2, #64	@ 0x40
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800266a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002670:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a62      	ldr	r2, [pc, #392]	@ (8002808 <HAL_I2C_Mem_Read+0x248>)
 8002680:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002682:	88f8      	ldrh	r0, [r7, #6]
 8002684:	893a      	ldrh	r2, [r7, #8]
 8002686:	8979      	ldrh	r1, [r7, #10]
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	4603      	mov	r3, r0
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fa9e 	bl	8002bd4 <I2C_RequestMemoryRead>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e1f8      	b.n	8002a94 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d113      	bne.n	80026d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e1cc      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d11e      	bne.n	8002718 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026ea:	b672      	cpsid	i
}
 80026ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002712:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002714:	b662      	cpsie	i
}
 8002716:	e035      	b.n	8002784 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271c:	2b02      	cmp	r3, #2
 800271e:	d11e      	bne.n	800275e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800272e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002730:	b672      	cpsid	i
}
 8002732:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002758:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800275a:	b662      	cpsie	i
}
 800275c:	e012      	b.n	8002784 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800276c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002784:	e172      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278a:	2b03      	cmp	r3, #3
 800278c:	f200 811f 	bhi.w	80029ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002794:	2b01      	cmp	r3, #1
 8002796:	d123      	bne.n	80027e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fcab 	bl	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e173      	b.n	8002a94 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027de:	e145      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d152      	bne.n	800288e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ee:	2200      	movs	r2, #0
 80027f0:	4906      	ldr	r1, [pc, #24]	@ (800280c <HAL_I2C_Mem_Read+0x24c>)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fad6 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e148      	b.n	8002a94 <HAL_I2C_Mem_Read+0x4d4>
 8002802:	bf00      	nop
 8002804:	00100002 	.word	0x00100002
 8002808:	ffff0000 	.word	0xffff0000
 800280c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
}
 8002812:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002856:	b662      	cpsie	i
}
 8002858:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800288c:	e0ee      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002894:	2200      	movs	r2, #0
 8002896:	4981      	ldr	r1, [pc, #516]	@ (8002a9c <HAL_I2C_Mem_Read+0x4dc>)
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fa83 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0f5      	b.n	8002a94 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i
}
 80028ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80028ee:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa0 <HAL_I2C_Mem_Read+0x4e0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	08db      	lsrs	r3, r3, #3
 80028f4:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa4 <HAL_I2C_Mem_Read+0x4e4>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	0a1a      	lsrs	r2, r3, #8
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00da      	lsls	r2, r3, #3
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	3b01      	subs	r3, #1
 800290c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d118      	bne.n	8002946 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	f043 0220 	orr.w	r2, r3, #32
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002936:	b662      	cpsie	i
}
 8002938:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0a6      	b.n	8002a94 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b04      	cmp	r3, #4
 8002952:	d1d9      	bne.n	8002908 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002996:	b662      	cpsie	i
}
 8002998:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029cc:	e04e      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fb90 	bl	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e058      	b.n	8002a94 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d124      	bne.n	8002a6c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d107      	bne.n	8002a3a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a38:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f47f ae88 	bne.w	8002786 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002a92:	2302      	movs	r3, #2
  }
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3728      	adds	r7, #40	@ 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	00010004 	.word	0x00010004
 8002aa0:	20000090 	.word	0x20000090
 8002aa4:	14f8b589 	.word	0x14f8b589

08002aa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	4608      	mov	r0, r1
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	817b      	strh	r3, [r7, #10]
 8002aba:	460b      	mov	r3, r1
 8002abc:	813b      	strh	r3, [r7, #8]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f960 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002af8:	d103      	bne.n	8002b02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e05f      	b.n	8002bc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b06:	897b      	ldrh	r3, [r7, #10]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	6a3a      	ldr	r2, [r7, #32]
 8002b1a:	492d      	ldr	r1, [pc, #180]	@ (8002bd0 <I2C_RequestMemoryWrite+0x128>)
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f9bb 	bl	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e04c      	b.n	8002bc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b44:	6a39      	ldr	r1, [r7, #32]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fa46 	bl	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00d      	beq.n	8002b6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d107      	bne.n	8002b6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e02b      	b.n	8002bc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b74:	893b      	ldrh	r3, [r7, #8]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	611a      	str	r2, [r3, #16]
 8002b7e:	e021      	b.n	8002bc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b80:	893b      	ldrh	r3, [r7, #8]
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b90:	6a39      	ldr	r1, [r7, #32]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fa20 	bl	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d107      	bne.n	8002bb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e005      	b.n	8002bc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bba:	893b      	ldrh	r3, [r7, #8]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	00010002 	.word	0x00010002

08002bd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	4608      	mov	r0, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	461a      	mov	r2, r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	817b      	strh	r3, [r7, #10]
 8002be6:	460b      	mov	r3, r1
 8002be8:	813b      	strh	r3, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f8c2 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00d      	beq.n	8002c42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c34:	d103      	bne.n	8002c3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e0aa      	b.n	8002d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c42:	897b      	ldrh	r3, [r7, #10]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	6a3a      	ldr	r2, [r7, #32]
 8002c56:	4952      	ldr	r1, [pc, #328]	@ (8002da0 <I2C_RequestMemoryRead+0x1cc>)
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f91d 	bl	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e097      	b.n	8002d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c80:	6a39      	ldr	r1, [r7, #32]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f9a8 	bl	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d107      	bne.n	8002ca6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e076      	b.n	8002d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb0:	893b      	ldrh	r3, [r7, #8]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	611a      	str	r2, [r3, #16]
 8002cba:	e021      	b.n	8002d00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cbc:	893b      	ldrh	r3, [r7, #8]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ccc:	6a39      	ldr	r1, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f982 	bl	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d107      	bne.n	8002cf2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e050      	b.n	8002d98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf6:	893b      	ldrh	r3, [r7, #8]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d02:	6a39      	ldr	r1, [r7, #32]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f967 	bl	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d107      	bne.n	8002d28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e035      	b.n	8002d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f82b 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00d      	beq.n	8002d70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d62:	d103      	bne.n	8002d6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e013      	b.n	8002d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d70:	897b      	ldrh	r3, [r7, #10]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	6a3a      	ldr	r2, [r7, #32]
 8002d84:	4906      	ldr	r1, [pc, #24]	@ (8002da0 <I2C_RequestMemoryRead+0x1cc>)
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f886 	bl	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	00010002 	.word	0x00010002

08002da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	4613      	mov	r3, r2
 8002db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db4:	e048      	b.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d044      	beq.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbe:	f7fe ff2b 	bl	8001c18 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d302      	bcc.n	8002dd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d139      	bne.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	0c1b      	lsrs	r3, r3, #16
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d10d      	bne.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	43da      	mvns	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4013      	ands	r3, r2
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	e00c      	b.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	43da      	mvns	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4013      	ands	r3, r2
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d116      	bne.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e023      	b.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10d      	bne.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	e00c      	b.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d093      	beq.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ea6:	e071      	b.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb6:	d123      	bne.n	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	f043 0204 	orr.w	r2, r3, #4
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e067      	b.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d041      	beq.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f08:	f7fe fe86 	bl	8001c18 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d302      	bcc.n	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d136      	bne.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10c      	bne.n	8002f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4013      	ands	r3, r2
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bf14      	ite	ne
 8002f3a:	2301      	movne	r3, #1
 8002f3c:	2300      	moveq	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e00b      	b.n	8002f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	f043 0220 	orr.w	r2, r3, #32
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e021      	b.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	0c1b      	lsrs	r3, r3, #16
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10c      	bne.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e00b      	b.n	8002fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf14      	ite	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	2300      	moveq	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f47f af6d 	bne.w	8002ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe4:	e034      	b.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f8e3 	bl	80031b2 <I2C_IsAcknowledgeFailed>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e034      	b.n	8003060 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d028      	beq.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffe:	f7fe fe0b 	bl	8001c18 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	d302      	bcc.n	8003014 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d11d      	bne.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301e:	2b80      	cmp	r3, #128	@ 0x80
 8003020:	d016      	beq.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e007      	b.n	8003060 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305a:	2b80      	cmp	r3, #128	@ 0x80
 800305c:	d1c3      	bne.n	8002fe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003074:	e034      	b.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f89b 	bl	80031b2 <I2C_IsAcknowledgeFailed>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e034      	b.n	80030f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d028      	beq.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7fe fdc3 	bl	8001c18 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d11d      	bne.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d016      	beq.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d1c3      	bne.n	8003076 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003104:	e049      	b.n	800319a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b10      	cmp	r3, #16
 8003112:	d119      	bne.n	8003148 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0210 	mvn.w	r2, #16
 800311c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e030      	b.n	80031aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003148:	f7fe fd66 	bl	8001c18 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	429a      	cmp	r2, r3
 8003156:	d302      	bcc.n	800315e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11d      	bne.n	800319a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003168:	2b40      	cmp	r3, #64	@ 0x40
 800316a:	d016      	beq.n	800319a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e007      	b.n	80031aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a4:	2b40      	cmp	r3, #64	@ 0x40
 80031a6:	d1ae      	bne.n	8003106 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c8:	d11b      	bne.n	8003202 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	f043 0204 	orr.w	r2, r3, #4
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
	...

08003210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e272      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8087 	beq.w	800333e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003230:	4b92      	ldr	r3, [pc, #584]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b04      	cmp	r3, #4
 800323a:	d00c      	beq.n	8003256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800323c:	4b8f      	ldr	r3, [pc, #572]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d112      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
 8003248:	4b8c      	ldr	r3, [pc, #560]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003254:	d10b      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003256:	4b89      	ldr	r3, [pc, #548]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d06c      	beq.n	800333c <HAL_RCC_OscConfig+0x12c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d168      	bne.n	800333c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e24c      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x76>
 8003278:	4b80      	ldr	r3, [pc, #512]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7f      	ldr	r2, [pc, #508]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e02e      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x98>
 800328e:	4b7b      	ldr	r3, [pc, #492]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7a      	ldr	r2, [pc, #488]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b78      	ldr	r3, [pc, #480]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a77      	ldr	r2, [pc, #476]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0xbc>
 80032b2:	4b72      	ldr	r3, [pc, #456]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a71      	ldr	r2, [pc, #452]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b6f      	ldr	r3, [pc, #444]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6e      	ldr	r2, [pc, #440]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032cc:	4b6b      	ldr	r3, [pc, #428]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6a      	ldr	r2, [pc, #424]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b68      	ldr	r3, [pc, #416]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a67      	ldr	r2, [pc, #412]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fc94 	bl	8001c18 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fe fc90 	bl	8001c18 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	@ 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e200      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b5d      	ldr	r3, [pc, #372]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe4>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fe fc80 	bl	8001c18 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7fe fc7c 	bl	8001c18 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	@ 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1ec      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b53      	ldr	r3, [pc, #332]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x10c>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334a:	4b4c      	ldr	r3, [pc, #304]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003356:	4b49      	ldr	r3, [pc, #292]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
 8003362:	4b46      	ldr	r3, [pc, #280]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b43      	ldr	r3, [pc, #268]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1c0      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3d      	ldr	r3, [pc, #244]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4939      	ldr	r1, [pc, #228]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b36      	ldr	r3, [pc, #216]	@ (8003480 <HAL_RCC_OscConfig+0x270>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7fe fc35 	bl	8001c18 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b2:	f7fe fc31 	bl	8001c18 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1a1      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b2d      	ldr	r3, [pc, #180]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b2a      	ldr	r3, [pc, #168]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4927      	ldr	r1, [pc, #156]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b26      	ldr	r3, [pc, #152]	@ (8003480 <HAL_RCC_OscConfig+0x270>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fe fc14 	bl	8001c18 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fe fc10 	bl	8001c18 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e180      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b1d      	ldr	r3, [pc, #116]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03a      	beq.n	8003494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d019      	beq.n	800345a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b17      	ldr	r3, [pc, #92]	@ (8003484 <HAL_RCC_OscConfig+0x274>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7fe fbf4 	bl	8001c18 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7fe fbf0 	bl	8001c18 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e160      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b0d      	ldr	r3, [pc, #52]	@ (800347c <HAL_RCC_OscConfig+0x26c>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003452:	2001      	movs	r0, #1
 8003454:	f000 faba 	bl	80039cc <RCC_Delay>
 8003458:	e01c      	b.n	8003494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345a:	4b0a      	ldr	r3, [pc, #40]	@ (8003484 <HAL_RCC_OscConfig+0x274>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7fe fbda 	bl	8001c18 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003466:	e00f      	b.n	8003488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7fe fbd6 	bl	8001c18 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d908      	bls.n	8003488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e146      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	42420000 	.word	0x42420000
 8003484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b92      	ldr	r3, [pc, #584]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e9      	bne.n	8003468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a6 	beq.w	80035ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a6:	4b8b      	ldr	r3, [pc, #556]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b88      	ldr	r3, [pc, #544]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4a87      	ldr	r2, [pc, #540]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034bc:	61d3      	str	r3, [r2, #28]
 80034be:	4b85      	ldr	r3, [pc, #532]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ce:	4b82      	ldr	r3, [pc, #520]	@ (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d118      	bne.n	800350c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034da:	4b7f      	ldr	r3, [pc, #508]	@ (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7e      	ldr	r2, [pc, #504]	@ (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7fe fb97 	bl	8001c18 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ee:	f7fe fb93 	bl	8001c18 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	@ 0x64
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e103      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b75      	ldr	r3, [pc, #468]	@ (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x312>
 8003514:	4b6f      	ldr	r3, [pc, #444]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a6e      	ldr	r2, [pc, #440]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e02d      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x334>
 800352a:	4b6a      	ldr	r3, [pc, #424]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a69      	ldr	r2, [pc, #420]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	4b67      	ldr	r3, [pc, #412]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a66      	ldr	r2, [pc, #408]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	e01c      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d10c      	bne.n	8003566 <HAL_RCC_OscConfig+0x356>
 800354c:	4b61      	ldr	r3, [pc, #388]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a60      	ldr	r2, [pc, #384]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	4b5e      	ldr	r3, [pc, #376]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a5d      	ldr	r2, [pc, #372]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6213      	str	r3, [r2, #32]
 8003564:	e00b      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003566:	4b5b      	ldr	r3, [pc, #364]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a5a      	ldr	r2, [pc, #360]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6213      	str	r3, [r2, #32]
 8003572:	4b58      	ldr	r3, [pc, #352]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a57      	ldr	r2, [pc, #348]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d015      	beq.n	80035b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7fe fb47 	bl	8001c18 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fe fb43 	bl	8001c18 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0b1      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a4:	4b4b      	ldr	r3, [pc, #300]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ee      	beq.n	800358e <HAL_RCC_OscConfig+0x37e>
 80035b0:	e014      	b.n	80035dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fb31 	bl	8001c18 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fe fb2d 	bl	8001c18 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e09b      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d0:	4b40      	ldr	r3, [pc, #256]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ee      	bne.n	80035ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4b3c      	ldr	r3, [pc, #240]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a3b      	ldr	r2, [pc, #236]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8087 	beq.w	8003706 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f8:	4b36      	ldr	r3, [pc, #216]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d061      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d146      	bne.n	800369a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b33      	ldr	r3, [pc, #204]	@ (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fe fb01 	bl	8001c18 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7fe fafd 	bl	8001c18 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e06d      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	4b29      	ldr	r3, [pc, #164]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003642:	4b24      	ldr	r3, [pc, #144]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4921      	ldr	r1, [pc, #132]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	4b1f      	ldr	r3, [pc, #124]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a19      	ldr	r1, [r3, #32]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	430b      	orrs	r3, r1
 8003666:	491b      	ldr	r1, [pc, #108]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fe fad1 	bl	8001c18 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fe facd 	bl	8001c18 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e03d      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x46a>
 8003698:	e035      	b.n	8003706 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe faba 	bl	8001c18 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe fab6 	bl	8001c18 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e026      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x498>
 80036c6:	e01e      	b.n	8003706 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e019      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <HAL_RCC_OscConfig+0x500>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0d0      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b6a      	ldr	r3, [pc, #424]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b67      	ldr	r3, [pc, #412]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	4965      	ldr	r1, [pc, #404]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a58      	ldr	r2, [pc, #352]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800377a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a52      	ldr	r2, [pc, #328]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d040      	beq.n	8003834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d115      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b41      	ldr	r3, [pc, #260]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e073      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3d      	ldr	r3, [pc, #244]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06b      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b39      	ldr	r3, [pc, #228]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4936      	ldr	r1, [pc, #216]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7fe fa08 	bl	8001c18 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fe fa04 	bl	8001c18 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e053      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2d      	ldr	r3, [pc, #180]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b27      	ldr	r3, [pc, #156]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d210      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b24      	ldr	r3, [pc, #144]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4922      	ldr	r1, [pc, #136]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388e:	4b12      	ldr	r3, [pc, #72]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f821 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	@ (80038e0 <HAL_RCC_ClockConfig+0x1cc>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	@ (80038e4 <HAL_RCC_ClockConfig+0x1d0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe f966 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08007230 	.word	0x08007230
 80038e0:	20000090 	.word	0x20000090
 80038e4:	20000094 	.word	0x20000094

080038e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003902:	4b1e      	ldr	r3, [pc, #120]	@ (800397c <HAL_RCC_GetSysClockFreq+0x94>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x30>
 8003912:	2b08      	cmp	r3, #8
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x36>
 8003916:	e027      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003918:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800391a:	613b      	str	r3, [r7, #16]
      break;
 800391c:	e027      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	0c9b      	lsrs	r3, r3, #18
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	4a17      	ldr	r2, [pc, #92]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003928:	5cd3      	ldrb	r3, [r2, r3]
 800392a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d010      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003936:	4b11      	ldr	r3, [pc, #68]	@ (800397c <HAL_RCC_GetSysClockFreq+0x94>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	0c5b      	lsrs	r3, r3, #17
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	4a11      	ldr	r2, [pc, #68]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a0d      	ldr	r2, [pc, #52]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800394a:	fb03 f202 	mul.w	r2, r3, r2
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e004      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a0c      	ldr	r2, [pc, #48]	@ (800398c <HAL_RCC_GetSysClockFreq+0xa4>)
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	613b      	str	r3, [r7, #16]
      break;
 8003966:	e002      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800396a:	613b      	str	r3, [r7, #16]
      break;
 800396c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396e:	693b      	ldr	r3, [r7, #16]
}
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	08007248 	.word	0x08007248
 8003988:	08007258 	.word	0x08007258
 800398c:	003d0900 	.word	0x003d0900

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b02      	ldr	r3, [pc, #8]	@ (80039a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	20000090 	.word	0x20000090

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a8:	f7ff fff2 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	@ (80039c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	08007240 	.word	0x08007240

080039cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a00 <RCC_Delay+0x34>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003a04 <RCC_Delay+0x38>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0a5b      	lsrs	r3, r3, #9
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	fb02 f303 	mul.w	r3, r2, r3
 80039e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039e8:	bf00      	nop
  }
  while (Delay --);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e5a      	subs	r2, r3, #1
 80039ee:	60fa      	str	r2, [r7, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f9      	bne.n	80039e8 <RCC_Delay+0x1c>
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	20000090 	.word	0x20000090
 8003a04:	10624dd3 	.word	0x10624dd3

08003a08 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af04      	add	r7, sp, #16
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	9302      	str	r3, [sp, #8]
 8003a24:	2301      	movs	r3, #1
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	1dfb      	adds	r3, r7, #7
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2178      	movs	r1, #120	@ 0x78
 8003a32:	4803      	ldr	r0, [pc, #12]	@ (8003a40 <ssd1306_WriteCommand+0x2c>)
 8003a34:	f7fe fcca 	bl	80023cc <HAL_I2C_Mem_Write>
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	200002a4 	.word	0x200002a4

08003a44 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af04      	add	r7, sp, #16
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f04f 32ff 	mov.w	r2, #4294967295
 8003a56:	9202      	str	r2, [sp, #8]
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	2240      	movs	r2, #64	@ 0x40
 8003a62:	2178      	movs	r1, #120	@ 0x78
 8003a64:	4803      	ldr	r0, [pc, #12]	@ (8003a74 <ssd1306_WriteData+0x30>)
 8003a66:	f7fe fcb1 	bl	80023cc <HAL_I2C_Mem_Write>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	200002a4 	.word	0x200002a4

08003a78 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003a7c:	f7ff ffc4 	bl	8003a08 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003a80:	2064      	movs	r0, #100	@ 0x64
 8003a82:	f7fe f8d3 	bl	8001c2c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003a86:	2000      	movs	r0, #0
 8003a88:	f000 f9d6 	bl	8003e38 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003a8c:	2020      	movs	r0, #32
 8003a8e:	f7ff ffc1 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003a92:	2000      	movs	r0, #0
 8003a94:	f7ff ffbe 	bl	8003a14 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003a98:	20b0      	movs	r0, #176	@ 0xb0
 8003a9a:	f7ff ffbb 	bl	8003a14 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003a9e:	20c8      	movs	r0, #200	@ 0xc8
 8003aa0:	f7ff ffb8 	bl	8003a14 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	f7ff ffb5 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003aaa:	2010      	movs	r0, #16
 8003aac:	f7ff ffb2 	bl	8003a14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003ab0:	2040      	movs	r0, #64	@ 0x40
 8003ab2:	f7ff ffaf 	bl	8003a14 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003ab6:	20ff      	movs	r0, #255	@ 0xff
 8003ab8:	f000 f9aa 	bl	8003e10 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003abc:	20a1      	movs	r0, #161	@ 0xa1
 8003abe:	f7ff ffa9 	bl	8003a14 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003ac2:	20a6      	movs	r0, #166	@ 0xa6
 8003ac4:	f7ff ffa6 	bl	8003a14 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003ac8:	20a8      	movs	r0, #168	@ 0xa8
 8003aca:	f7ff ffa3 	bl	8003a14 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003ace:	203f      	movs	r0, #63	@ 0x3f
 8003ad0:	f7ff ffa0 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003ad4:	20a4      	movs	r0, #164	@ 0xa4
 8003ad6:	f7ff ff9d 	bl	8003a14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003ada:	20d3      	movs	r0, #211	@ 0xd3
 8003adc:	f7ff ff9a 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f7ff ff97 	bl	8003a14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003ae6:	20d5      	movs	r0, #213	@ 0xd5
 8003ae8:	f7ff ff94 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003aec:	20f0      	movs	r0, #240	@ 0xf0
 8003aee:	f7ff ff91 	bl	8003a14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003af2:	20d9      	movs	r0, #217	@ 0xd9
 8003af4:	f7ff ff8e 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003af8:	2022      	movs	r0, #34	@ 0x22
 8003afa:	f7ff ff8b 	bl	8003a14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003afe:	20da      	movs	r0, #218	@ 0xda
 8003b00:	f7ff ff88 	bl	8003a14 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003b04:	2012      	movs	r0, #18
 8003b06:	f7ff ff85 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003b0a:	20db      	movs	r0, #219	@ 0xdb
 8003b0c:	f7ff ff82 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003b10:	2020      	movs	r0, #32
 8003b12:	f7ff ff7f 	bl	8003a14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003b16:	208d      	movs	r0, #141	@ 0x8d
 8003b18:	f7ff ff7c 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003b1c:	2014      	movs	r0, #20
 8003b1e:	f7ff ff79 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003b22:	2001      	movs	r0, #1
 8003b24:	f000 f988 	bl	8003e38 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f000 f80f 	bl	8003b4c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003b2e:	f000 f82f 	bl	8003b90 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003b32:	4b05      	ldr	r3, [pc, #20]	@ (8003b48 <ssd1306_Init+0xd0>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003b38:	4b03      	ldr	r3, [pc, #12]	@ (8003b48 <ssd1306_Init+0xd0>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003b3e:	4b02      	ldr	r3, [pc, #8]	@ (8003b48 <ssd1306_Init+0xd0>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	711a      	strb	r2, [r3, #4]
}
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	2000075c 	.word	0x2000075c

08003b4c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	e00d      	b.n	8003b78 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <ssd1306_Fill+0x1a>
 8003b62:	2100      	movs	r1, #0
 8003b64:	e000      	b.n	8003b68 <ssd1306_Fill+0x1c>
 8003b66:	21ff      	movs	r1, #255	@ 0xff
 8003b68:	4a08      	ldr	r2, [pc, #32]	@ (8003b8c <ssd1306_Fill+0x40>)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	460a      	mov	r2, r1
 8003b70:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3301      	adds	r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7e:	d3ed      	bcc.n	8003b5c <ssd1306_Fill+0x10>
    }
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	2000035c 	.word	0x2000035c

08003b90 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003b96:	2300      	movs	r3, #0
 8003b98:	71fb      	strb	r3, [r7, #7]
 8003b9a:	e016      	b.n	8003bca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	3b50      	subs	r3, #80	@ 0x50
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff ff36 	bl	8003a14 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f7ff ff33 	bl	8003a14 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff30 	bl	8003a14 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	01db      	lsls	r3, r3, #7
 8003bb8:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <ssd1306_UpdateScreen+0x4c>)
 8003bba:	4413      	add	r3, r2
 8003bbc:	2180      	movs	r1, #128	@ 0x80
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ff40 	bl	8003a44 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	71fb      	strb	r3, [r7, #7]
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	2b07      	cmp	r3, #7
 8003bce:	d9e5      	bls.n	8003b9c <ssd1306_UpdateScreen+0xc>
    }
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000035c 	.word	0x2000035c

08003be0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
 8003bea:	460b      	mov	r3, r1
 8003bec:	71bb      	strb	r3, [r7, #6]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	db3d      	blt.n	8003c76 <ssd1306_DrawPixel+0x96>
 8003bfa:	79bb      	ldrb	r3, [r7, #6]
 8003bfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bfe:	d83a      	bhi.n	8003c76 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003c00:	797b      	ldrb	r3, [r7, #5]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d11a      	bne.n	8003c3c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003c06:	79fa      	ldrb	r2, [r7, #7]
 8003c08:	79bb      	ldrb	r3, [r7, #6]
 8003c0a:	08db      	lsrs	r3, r3, #3
 8003c0c:	b2d8      	uxtb	r0, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	01db      	lsls	r3, r3, #7
 8003c12:	4413      	add	r3, r2
 8003c14:	4a1a      	ldr	r2, [pc, #104]	@ (8003c80 <ssd1306_DrawPixel+0xa0>)
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	b25a      	sxtb	r2, r3
 8003c1a:	79bb      	ldrb	r3, [r7, #6]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	b259      	sxtb	r1, r3
 8003c2c:	79fa      	ldrb	r2, [r7, #7]
 8003c2e:	4603      	mov	r3, r0
 8003c30:	01db      	lsls	r3, r3, #7
 8003c32:	4413      	add	r3, r2
 8003c34:	b2c9      	uxtb	r1, r1
 8003c36:	4a12      	ldr	r2, [pc, #72]	@ (8003c80 <ssd1306_DrawPixel+0xa0>)
 8003c38:	54d1      	strb	r1, [r2, r3]
 8003c3a:	e01d      	b.n	8003c78 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003c3c:	79fa      	ldrb	r2, [r7, #7]
 8003c3e:	79bb      	ldrb	r3, [r7, #6]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	b2d8      	uxtb	r0, r3
 8003c44:	4603      	mov	r3, r0
 8003c46:	01db      	lsls	r3, r3, #7
 8003c48:	4413      	add	r3, r2
 8003c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8003c80 <ssd1306_DrawPixel+0xa0>)
 8003c4c:	5cd3      	ldrb	r3, [r2, r3]
 8003c4e:	b25a      	sxtb	r2, r3
 8003c50:	79bb      	ldrb	r3, [r7, #6]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	2101      	movs	r1, #1
 8003c58:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5c:	b25b      	sxtb	r3, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	4013      	ands	r3, r2
 8003c64:	b259      	sxtb	r1, r3
 8003c66:	79fa      	ldrb	r2, [r7, #7]
 8003c68:	4603      	mov	r3, r0
 8003c6a:	01db      	lsls	r3, r3, #7
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b2c9      	uxtb	r1, r1
 8003c70:	4a03      	ldr	r2, [pc, #12]	@ (8003c80 <ssd1306_DrawPixel+0xa0>)
 8003c72:	54d1      	strb	r1, [r2, r3]
 8003c74:	e000      	b.n	8003c78 <ssd1306_DrawPixel+0x98>
        return;
 8003c76:	bf00      	nop
    }
}
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	2000035c 	.word	0x2000035c

08003c84 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b089      	sub	sp, #36	@ 0x24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	1d38      	adds	r0, r7, #4
 8003c8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003c92:	461a      	mov	r2, r3
 8003c94:	4623      	mov	r3, r4
 8003c96:	73fb      	strb	r3, [r7, #15]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b1f      	cmp	r3, #31
 8003ca0:	d902      	bls.n	8003ca8 <ssd1306_WriteChar+0x24>
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	2b7e      	cmp	r3, #126	@ 0x7e
 8003ca6:	d901      	bls.n	8003cac <ssd1306_WriteChar+0x28>
        return 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e06c      	b.n	8003d86 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003cac:	4b38      	ldr	r3, [pc, #224]	@ (8003d90 <ssd1306_WriteChar+0x10c>)
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	793b      	ldrb	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	2b80      	cmp	r3, #128	@ 0x80
 8003cb8:	dc06      	bgt.n	8003cc8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003cba:	4b35      	ldr	r3, [pc, #212]	@ (8003d90 <ssd1306_WriteChar+0x10c>)
 8003cbc:	885b      	ldrh	r3, [r3, #2]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	797b      	ldrb	r3, [r7, #5]
 8003cc2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003cc4:	2b40      	cmp	r3, #64	@ 0x40
 8003cc6:	dd01      	ble.n	8003ccc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e05c      	b.n	8003d86 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	e04c      	b.n	8003d6c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	3b20      	subs	r3, #32
 8003cd8:	7979      	ldrb	r1, [r7, #5]
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4619      	mov	r1, r3
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	440b      	add	r3, r1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003cec:	2300      	movs	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	e034      	b.n	8003d5c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d012      	beq.n	8003d28 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003d02:	4b23      	ldr	r3, [pc, #140]	@ (8003d90 <ssd1306_WriteChar+0x10c>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	b2d8      	uxtb	r0, r3
 8003d10:	4b1f      	ldr	r3, [pc, #124]	@ (8003d90 <ssd1306_WriteChar+0x10c>)
 8003d12:	885b      	ldrh	r3, [r3, #2]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	7bba      	ldrb	r2, [r7, #14]
 8003d20:	4619      	mov	r1, r3
 8003d22:	f7ff ff5d 	bl	8003be0 <ssd1306_DrawPixel>
 8003d26:	e016      	b.n	8003d56 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003d28:	4b19      	ldr	r3, [pc, #100]	@ (8003d90 <ssd1306_WriteChar+0x10c>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	b2d8      	uxtb	r0, r3
 8003d36:	4b16      	ldr	r3, [pc, #88]	@ (8003d90 <ssd1306_WriteChar+0x10c>)
 8003d38:	885b      	ldrh	r3, [r3, #2]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	b2d9      	uxtb	r1, r3
 8003d44:	7bbb      	ldrb	r3, [r7, #14]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	f7ff ff45 	bl	8003be0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	793b      	ldrb	r3, [r7, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d3c5      	bcc.n	8003cf2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	797b      	ldrb	r3, [r7, #5]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d3ad      	bcc.n	8003cd2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003d76:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <ssd1306_WriteChar+0x10c>)
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	793a      	ldrb	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	4b03      	ldr	r3, [pc, #12]	@ (8003d90 <ssd1306_WriteChar+0x10c>)
 8003d82:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3724      	adds	r7, #36	@ 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000075c 	.word	0x2000075c

08003d94 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	1d38      	adds	r0, r7, #4
 8003d9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003da2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003da4:	e012      	b.n	8003dcc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	7818      	ldrb	r0, [r3, #0]
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	1d3a      	adds	r2, r7, #4
 8003dae:	ca06      	ldmia	r2, {r1, r2}
 8003db0:	f7ff ff68 	bl	8003c84 <ssd1306_WriteChar>
 8003db4:	4603      	mov	r3, r0
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d002      	beq.n	8003dc6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	e008      	b.n	8003dd8 <ssd1306_WriteString+0x44>
        }
        str++;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e8      	bne.n	8003da6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	460a      	mov	r2, r1
 8003dea:	71fb      	strb	r3, [r7, #7]
 8003dec:	4613      	mov	r3, r2
 8003dee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <ssd1306_SetCursor+0x2c>)
 8003df6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003df8:	79bb      	ldrb	r3, [r7, #6]
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	4b03      	ldr	r3, [pc, #12]	@ (8003e0c <ssd1306_SetCursor+0x2c>)
 8003dfe:	805a      	strh	r2, [r3, #2]
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	2000075c 	.word	0x2000075c

08003e10 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003e1a:	2381      	movs	r3, #129	@ 0x81
 8003e1c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fdf7 	bl	8003a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fdf3 	bl	8003a14 <ssd1306_WriteCommand>
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003e48:	23af      	movs	r3, #175	@ 0xaf
 8003e4a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003e4c:	4b08      	ldr	r3, [pc, #32]	@ (8003e70 <ssd1306_SetDisplayOn+0x38>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	715a      	strb	r2, [r3, #5]
 8003e52:	e004      	b.n	8003e5e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003e54:	23ae      	movs	r3, #174	@ 0xae
 8003e56:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003e58:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <ssd1306_SetDisplayOn+0x38>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fdd7 	bl	8003a14 <ssd1306_WriteCommand>
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	2000075c 	.word	0x2000075c

08003e74 <__cvt>:
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e7a:	461d      	mov	r5, r3
 8003e7c:	bfbb      	ittet	lt
 8003e7e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003e82:	461d      	movlt	r5, r3
 8003e84:	2300      	movge	r3, #0
 8003e86:	232d      	movlt	r3, #45	@ 0x2d
 8003e88:	b088      	sub	sp, #32
 8003e8a:	4614      	mov	r4, r2
 8003e8c:	bfb8      	it	lt
 8003e8e:	4614      	movlt	r4, r2
 8003e90:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003e92:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003e94:	7013      	strb	r3, [r2, #0]
 8003e96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e98:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003e9c:	f023 0820 	bic.w	r8, r3, #32
 8003ea0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ea4:	d005      	beq.n	8003eb2 <__cvt+0x3e>
 8003ea6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003eaa:	d100      	bne.n	8003eae <__cvt+0x3a>
 8003eac:	3601      	adds	r6, #1
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e000      	b.n	8003eb4 <__cvt+0x40>
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	aa07      	add	r2, sp, #28
 8003eb6:	9204      	str	r2, [sp, #16]
 8003eb8:	aa06      	add	r2, sp, #24
 8003eba:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003ebe:	e9cd 3600 	strd	r3, r6, [sp]
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	f000 fe97 	bl	8004bf8 <_dtoa_r>
 8003eca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003ece:	4607      	mov	r7, r0
 8003ed0:	d119      	bne.n	8003f06 <__cvt+0x92>
 8003ed2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ed4:	07db      	lsls	r3, r3, #31
 8003ed6:	d50e      	bpl.n	8003ef6 <__cvt+0x82>
 8003ed8:	eb00 0906 	add.w	r9, r0, r6
 8003edc:	2200      	movs	r2, #0
 8003ede:	2300      	movs	r3, #0
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	f7fc fd60 	bl	80009a8 <__aeabi_dcmpeq>
 8003ee8:	b108      	cbz	r0, 8003eee <__cvt+0x7a>
 8003eea:	f8cd 901c 	str.w	r9, [sp, #28]
 8003eee:	2230      	movs	r2, #48	@ 0x30
 8003ef0:	9b07      	ldr	r3, [sp, #28]
 8003ef2:	454b      	cmp	r3, r9
 8003ef4:	d31e      	bcc.n	8003f34 <__cvt+0xc0>
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	9b07      	ldr	r3, [sp, #28]
 8003efa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003efc:	1bdb      	subs	r3, r3, r7
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	b008      	add	sp, #32
 8003f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f06:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f0a:	eb00 0906 	add.w	r9, r0, r6
 8003f0e:	d1e5      	bne.n	8003edc <__cvt+0x68>
 8003f10:	7803      	ldrb	r3, [r0, #0]
 8003f12:	2b30      	cmp	r3, #48	@ 0x30
 8003f14:	d10a      	bne.n	8003f2c <__cvt+0xb8>
 8003f16:	2200      	movs	r2, #0
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	f7fc fd43 	bl	80009a8 <__aeabi_dcmpeq>
 8003f22:	b918      	cbnz	r0, 8003f2c <__cvt+0xb8>
 8003f24:	f1c6 0601 	rsb	r6, r6, #1
 8003f28:	f8ca 6000 	str.w	r6, [sl]
 8003f2c:	f8da 3000 	ldr.w	r3, [sl]
 8003f30:	4499      	add	r9, r3
 8003f32:	e7d3      	b.n	8003edc <__cvt+0x68>
 8003f34:	1c59      	adds	r1, r3, #1
 8003f36:	9107      	str	r1, [sp, #28]
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e7d9      	b.n	8003ef0 <__cvt+0x7c>

08003f3c <__exponent>:
 8003f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f3e:	2900      	cmp	r1, #0
 8003f40:	bfb6      	itet	lt
 8003f42:	232d      	movlt	r3, #45	@ 0x2d
 8003f44:	232b      	movge	r3, #43	@ 0x2b
 8003f46:	4249      	neglt	r1, r1
 8003f48:	2909      	cmp	r1, #9
 8003f4a:	7002      	strb	r2, [r0, #0]
 8003f4c:	7043      	strb	r3, [r0, #1]
 8003f4e:	dd29      	ble.n	8003fa4 <__exponent+0x68>
 8003f50:	f10d 0307 	add.w	r3, sp, #7
 8003f54:	461d      	mov	r5, r3
 8003f56:	270a      	movs	r7, #10
 8003f58:	fbb1 f6f7 	udiv	r6, r1, r7
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	fb07 1416 	mls	r4, r7, r6, r1
 8003f62:	3430      	adds	r4, #48	@ 0x30
 8003f64:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003f68:	460c      	mov	r4, r1
 8003f6a:	2c63      	cmp	r4, #99	@ 0x63
 8003f6c:	4631      	mov	r1, r6
 8003f6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f72:	dcf1      	bgt.n	8003f58 <__exponent+0x1c>
 8003f74:	3130      	adds	r1, #48	@ 0x30
 8003f76:	1e94      	subs	r4, r2, #2
 8003f78:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	1c41      	adds	r1, r0, #1
 8003f80:	42ab      	cmp	r3, r5
 8003f82:	d30a      	bcc.n	8003f9a <__exponent+0x5e>
 8003f84:	f10d 0309 	add.w	r3, sp, #9
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	42ac      	cmp	r4, r5
 8003f8c:	bf88      	it	hi
 8003f8e:	2300      	movhi	r3, #0
 8003f90:	3302      	adds	r3, #2
 8003f92:	4403      	add	r3, r0
 8003f94:	1a18      	subs	r0, r3, r0
 8003f96:	b003      	add	sp, #12
 8003f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f9a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003f9e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003fa2:	e7ed      	b.n	8003f80 <__exponent+0x44>
 8003fa4:	2330      	movs	r3, #48	@ 0x30
 8003fa6:	3130      	adds	r1, #48	@ 0x30
 8003fa8:	7083      	strb	r3, [r0, #2]
 8003faa:	70c1      	strb	r1, [r0, #3]
 8003fac:	1d03      	adds	r3, r0, #4
 8003fae:	e7f1      	b.n	8003f94 <__exponent+0x58>

08003fb0 <_printf_float>:
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	b091      	sub	sp, #68	@ 0x44
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003fbc:	4616      	mov	r6, r2
 8003fbe:	461f      	mov	r7, r3
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	f000 fcfb 	bl	80049bc <_localeconv_r>
 8003fc6:	6803      	ldr	r3, [r0, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	9308      	str	r3, [sp, #32]
 8003fcc:	f7fc f8c0 	bl	8000150 <strlen>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8003fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8003fda:	3307      	adds	r3, #7
 8003fdc:	f023 0307 	bic.w	r3, r3, #7
 8003fe0:	f103 0208 	add.w	r2, r3, #8
 8003fe4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003fe8:	f8d4 b000 	ldr.w	fp, [r4]
 8003fec:	f8c8 2000 	str.w	r2, [r8]
 8003ff0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ff4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003ff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ffa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8004002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004006:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800400a:	4b9c      	ldr	r3, [pc, #624]	@ (800427c <_printf_float+0x2cc>)
 800400c:	f7fc fcfe 	bl	8000a0c <__aeabi_dcmpun>
 8004010:	bb70      	cbnz	r0, 8004070 <_printf_float+0xc0>
 8004012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004016:	f04f 32ff 	mov.w	r2, #4294967295
 800401a:	4b98      	ldr	r3, [pc, #608]	@ (800427c <_printf_float+0x2cc>)
 800401c:	f7fc fcd8 	bl	80009d0 <__aeabi_dcmple>
 8004020:	bb30      	cbnz	r0, 8004070 <_printf_float+0xc0>
 8004022:	2200      	movs	r2, #0
 8004024:	2300      	movs	r3, #0
 8004026:	4640      	mov	r0, r8
 8004028:	4649      	mov	r1, r9
 800402a:	f7fc fcc7 	bl	80009bc <__aeabi_dcmplt>
 800402e:	b110      	cbz	r0, 8004036 <_printf_float+0x86>
 8004030:	232d      	movs	r3, #45	@ 0x2d
 8004032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004036:	4a92      	ldr	r2, [pc, #584]	@ (8004280 <_printf_float+0x2d0>)
 8004038:	4b92      	ldr	r3, [pc, #584]	@ (8004284 <_printf_float+0x2d4>)
 800403a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800403e:	bf94      	ite	ls
 8004040:	4690      	movls	r8, r2
 8004042:	4698      	movhi	r8, r3
 8004044:	2303      	movs	r3, #3
 8004046:	f04f 0900 	mov.w	r9, #0
 800404a:	6123      	str	r3, [r4, #16]
 800404c:	f02b 0304 	bic.w	r3, fp, #4
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	4633      	mov	r3, r6
 8004054:	4621      	mov	r1, r4
 8004056:	4628      	mov	r0, r5
 8004058:	9700      	str	r7, [sp, #0]
 800405a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800405c:	f000 f9d4 	bl	8004408 <_printf_common>
 8004060:	3001      	adds	r0, #1
 8004062:	f040 8090 	bne.w	8004186 <_printf_float+0x1d6>
 8004066:	f04f 30ff 	mov.w	r0, #4294967295
 800406a:	b011      	add	sp, #68	@ 0x44
 800406c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	4640      	mov	r0, r8
 8004076:	4649      	mov	r1, r9
 8004078:	f7fc fcc8 	bl	8000a0c <__aeabi_dcmpun>
 800407c:	b148      	cbz	r0, 8004092 <_printf_float+0xe2>
 800407e:	464b      	mov	r3, r9
 8004080:	2b00      	cmp	r3, #0
 8004082:	bfb8      	it	lt
 8004084:	232d      	movlt	r3, #45	@ 0x2d
 8004086:	4a80      	ldr	r2, [pc, #512]	@ (8004288 <_printf_float+0x2d8>)
 8004088:	bfb8      	it	lt
 800408a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800408e:	4b7f      	ldr	r3, [pc, #508]	@ (800428c <_printf_float+0x2dc>)
 8004090:	e7d3      	b.n	800403a <_printf_float+0x8a>
 8004092:	6863      	ldr	r3, [r4, #4]
 8004094:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	d13f      	bne.n	800411c <_printf_float+0x16c>
 800409c:	2306      	movs	r3, #6
 800409e:	6063      	str	r3, [r4, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	9206      	str	r2, [sp, #24]
 80040aa:	aa0e      	add	r2, sp, #56	@ 0x38
 80040ac:	e9cd a204 	strd	sl, r2, [sp, #16]
 80040b0:	aa0d      	add	r2, sp, #52	@ 0x34
 80040b2:	9203      	str	r2, [sp, #12]
 80040b4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80040b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80040bc:	6863      	ldr	r3, [r4, #4]
 80040be:	4642      	mov	r2, r8
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4628      	mov	r0, r5
 80040c4:	464b      	mov	r3, r9
 80040c6:	910a      	str	r1, [sp, #40]	@ 0x28
 80040c8:	f7ff fed4 	bl	8003e74 <__cvt>
 80040cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80040ce:	4680      	mov	r8, r0
 80040d0:	2947      	cmp	r1, #71	@ 0x47
 80040d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80040d4:	d128      	bne.n	8004128 <_printf_float+0x178>
 80040d6:	1cc8      	adds	r0, r1, #3
 80040d8:	db02      	blt.n	80040e0 <_printf_float+0x130>
 80040da:	6863      	ldr	r3, [r4, #4]
 80040dc:	4299      	cmp	r1, r3
 80040de:	dd40      	ble.n	8004162 <_printf_float+0x1b2>
 80040e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80040e4:	fa5f fa8a 	uxtb.w	sl, sl
 80040e8:	4652      	mov	r2, sl
 80040ea:	3901      	subs	r1, #1
 80040ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80040f0:	910d      	str	r1, [sp, #52]	@ 0x34
 80040f2:	f7ff ff23 	bl	8003f3c <__exponent>
 80040f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80040f8:	4681      	mov	r9, r0
 80040fa:	1813      	adds	r3, r2, r0
 80040fc:	2a01      	cmp	r2, #1
 80040fe:	6123      	str	r3, [r4, #16]
 8004100:	dc02      	bgt.n	8004108 <_printf_float+0x158>
 8004102:	6822      	ldr	r2, [r4, #0]
 8004104:	07d2      	lsls	r2, r2, #31
 8004106:	d501      	bpl.n	800410c <_printf_float+0x15c>
 8004108:	3301      	adds	r3, #1
 800410a:	6123      	str	r3, [r4, #16]
 800410c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004110:	2b00      	cmp	r3, #0
 8004112:	d09e      	beq.n	8004052 <_printf_float+0xa2>
 8004114:	232d      	movs	r3, #45	@ 0x2d
 8004116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800411a:	e79a      	b.n	8004052 <_printf_float+0xa2>
 800411c:	2947      	cmp	r1, #71	@ 0x47
 800411e:	d1bf      	bne.n	80040a0 <_printf_float+0xf0>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1bd      	bne.n	80040a0 <_printf_float+0xf0>
 8004124:	2301      	movs	r3, #1
 8004126:	e7ba      	b.n	800409e <_printf_float+0xee>
 8004128:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800412c:	d9dc      	bls.n	80040e8 <_printf_float+0x138>
 800412e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004132:	d118      	bne.n	8004166 <_printf_float+0x1b6>
 8004134:	2900      	cmp	r1, #0
 8004136:	6863      	ldr	r3, [r4, #4]
 8004138:	dd0b      	ble.n	8004152 <_printf_float+0x1a2>
 800413a:	6121      	str	r1, [r4, #16]
 800413c:	b913      	cbnz	r3, 8004144 <_printf_float+0x194>
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	07d0      	lsls	r0, r2, #31
 8004142:	d502      	bpl.n	800414a <_printf_float+0x19a>
 8004144:	3301      	adds	r3, #1
 8004146:	440b      	add	r3, r1
 8004148:	6123      	str	r3, [r4, #16]
 800414a:	f04f 0900 	mov.w	r9, #0
 800414e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004150:	e7dc      	b.n	800410c <_printf_float+0x15c>
 8004152:	b913      	cbnz	r3, 800415a <_printf_float+0x1aa>
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	07d2      	lsls	r2, r2, #31
 8004158:	d501      	bpl.n	800415e <_printf_float+0x1ae>
 800415a:	3302      	adds	r3, #2
 800415c:	e7f4      	b.n	8004148 <_printf_float+0x198>
 800415e:	2301      	movs	r3, #1
 8004160:	e7f2      	b.n	8004148 <_printf_float+0x198>
 8004162:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004168:	4299      	cmp	r1, r3
 800416a:	db05      	blt.n	8004178 <_printf_float+0x1c8>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	6121      	str	r1, [r4, #16]
 8004170:	07d8      	lsls	r0, r3, #31
 8004172:	d5ea      	bpl.n	800414a <_printf_float+0x19a>
 8004174:	1c4b      	adds	r3, r1, #1
 8004176:	e7e7      	b.n	8004148 <_printf_float+0x198>
 8004178:	2900      	cmp	r1, #0
 800417a:	bfcc      	ite	gt
 800417c:	2201      	movgt	r2, #1
 800417e:	f1c1 0202 	rsble	r2, r1, #2
 8004182:	4413      	add	r3, r2
 8004184:	e7e0      	b.n	8004148 <_printf_float+0x198>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	055a      	lsls	r2, r3, #21
 800418a:	d407      	bmi.n	800419c <_printf_float+0x1ec>
 800418c:	6923      	ldr	r3, [r4, #16]
 800418e:	4642      	mov	r2, r8
 8004190:	4631      	mov	r1, r6
 8004192:	4628      	mov	r0, r5
 8004194:	47b8      	blx	r7
 8004196:	3001      	adds	r0, #1
 8004198:	d12b      	bne.n	80041f2 <_printf_float+0x242>
 800419a:	e764      	b.n	8004066 <_printf_float+0xb6>
 800419c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80041a0:	f240 80dc 	bls.w	800435c <_printf_float+0x3ac>
 80041a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041a8:	2200      	movs	r2, #0
 80041aa:	2300      	movs	r3, #0
 80041ac:	f7fc fbfc 	bl	80009a8 <__aeabi_dcmpeq>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d033      	beq.n	800421c <_printf_float+0x26c>
 80041b4:	2301      	movs	r3, #1
 80041b6:	4631      	mov	r1, r6
 80041b8:	4628      	mov	r0, r5
 80041ba:	4a35      	ldr	r2, [pc, #212]	@ (8004290 <_printf_float+0x2e0>)
 80041bc:	47b8      	blx	r7
 80041be:	3001      	adds	r0, #1
 80041c0:	f43f af51 	beq.w	8004066 <_printf_float+0xb6>
 80041c4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80041c8:	4543      	cmp	r3, r8
 80041ca:	db02      	blt.n	80041d2 <_printf_float+0x222>
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	07d8      	lsls	r0, r3, #31
 80041d0:	d50f      	bpl.n	80041f2 <_printf_float+0x242>
 80041d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041d6:	4631      	mov	r1, r6
 80041d8:	4628      	mov	r0, r5
 80041da:	47b8      	blx	r7
 80041dc:	3001      	adds	r0, #1
 80041de:	f43f af42 	beq.w	8004066 <_printf_float+0xb6>
 80041e2:	f04f 0900 	mov.w	r9, #0
 80041e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80041ea:	f104 0a1a 	add.w	sl, r4, #26
 80041ee:	45c8      	cmp	r8, r9
 80041f0:	dc09      	bgt.n	8004206 <_printf_float+0x256>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	079b      	lsls	r3, r3, #30
 80041f6:	f100 8102 	bmi.w	80043fe <_printf_float+0x44e>
 80041fa:	68e0      	ldr	r0, [r4, #12]
 80041fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80041fe:	4298      	cmp	r0, r3
 8004200:	bfb8      	it	lt
 8004202:	4618      	movlt	r0, r3
 8004204:	e731      	b.n	800406a <_printf_float+0xba>
 8004206:	2301      	movs	r3, #1
 8004208:	4652      	mov	r2, sl
 800420a:	4631      	mov	r1, r6
 800420c:	4628      	mov	r0, r5
 800420e:	47b8      	blx	r7
 8004210:	3001      	adds	r0, #1
 8004212:	f43f af28 	beq.w	8004066 <_printf_float+0xb6>
 8004216:	f109 0901 	add.w	r9, r9, #1
 800421a:	e7e8      	b.n	80041ee <_printf_float+0x23e>
 800421c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800421e:	2b00      	cmp	r3, #0
 8004220:	dc38      	bgt.n	8004294 <_printf_float+0x2e4>
 8004222:	2301      	movs	r3, #1
 8004224:	4631      	mov	r1, r6
 8004226:	4628      	mov	r0, r5
 8004228:	4a19      	ldr	r2, [pc, #100]	@ (8004290 <_printf_float+0x2e0>)
 800422a:	47b8      	blx	r7
 800422c:	3001      	adds	r0, #1
 800422e:	f43f af1a 	beq.w	8004066 <_printf_float+0xb6>
 8004232:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004236:	ea59 0303 	orrs.w	r3, r9, r3
 800423a:	d102      	bne.n	8004242 <_printf_float+0x292>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	07d9      	lsls	r1, r3, #31
 8004240:	d5d7      	bpl.n	80041f2 <_printf_float+0x242>
 8004242:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004246:	4631      	mov	r1, r6
 8004248:	4628      	mov	r0, r5
 800424a:	47b8      	blx	r7
 800424c:	3001      	adds	r0, #1
 800424e:	f43f af0a 	beq.w	8004066 <_printf_float+0xb6>
 8004252:	f04f 0a00 	mov.w	sl, #0
 8004256:	f104 0b1a 	add.w	fp, r4, #26
 800425a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800425c:	425b      	negs	r3, r3
 800425e:	4553      	cmp	r3, sl
 8004260:	dc01      	bgt.n	8004266 <_printf_float+0x2b6>
 8004262:	464b      	mov	r3, r9
 8004264:	e793      	b.n	800418e <_printf_float+0x1de>
 8004266:	2301      	movs	r3, #1
 8004268:	465a      	mov	r2, fp
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	f43f aef8 	beq.w	8004066 <_printf_float+0xb6>
 8004276:	f10a 0a01 	add.w	sl, sl, #1
 800427a:	e7ee      	b.n	800425a <_printf_float+0x2aa>
 800427c:	7fefffff 	.word	0x7fefffff
 8004280:	08008b98 	.word	0x08008b98
 8004284:	08008b9c 	.word	0x08008b9c
 8004288:	08008ba0 	.word	0x08008ba0
 800428c:	08008ba4 	.word	0x08008ba4
 8004290:	08008ba8 	.word	0x08008ba8
 8004294:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004296:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800429a:	4553      	cmp	r3, sl
 800429c:	bfa8      	it	ge
 800429e:	4653      	movge	r3, sl
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	4699      	mov	r9, r3
 80042a4:	dc36      	bgt.n	8004314 <_printf_float+0x364>
 80042a6:	f04f 0b00 	mov.w	fp, #0
 80042aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042ae:	f104 021a 	add.w	r2, r4, #26
 80042b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80042b6:	eba3 0309 	sub.w	r3, r3, r9
 80042ba:	455b      	cmp	r3, fp
 80042bc:	dc31      	bgt.n	8004322 <_printf_float+0x372>
 80042be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042c0:	459a      	cmp	sl, r3
 80042c2:	dc3a      	bgt.n	800433a <_printf_float+0x38a>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	07da      	lsls	r2, r3, #31
 80042c8:	d437      	bmi.n	800433a <_printf_float+0x38a>
 80042ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042cc:	ebaa 0903 	sub.w	r9, sl, r3
 80042d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042d2:	ebaa 0303 	sub.w	r3, sl, r3
 80042d6:	4599      	cmp	r9, r3
 80042d8:	bfa8      	it	ge
 80042da:	4699      	movge	r9, r3
 80042dc:	f1b9 0f00 	cmp.w	r9, #0
 80042e0:	dc33      	bgt.n	800434a <_printf_float+0x39a>
 80042e2:	f04f 0800 	mov.w	r8, #0
 80042e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042ea:	f104 0b1a 	add.w	fp, r4, #26
 80042ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042f0:	ebaa 0303 	sub.w	r3, sl, r3
 80042f4:	eba3 0309 	sub.w	r3, r3, r9
 80042f8:	4543      	cmp	r3, r8
 80042fa:	f77f af7a 	ble.w	80041f2 <_printf_float+0x242>
 80042fe:	2301      	movs	r3, #1
 8004300:	465a      	mov	r2, fp
 8004302:	4631      	mov	r1, r6
 8004304:	4628      	mov	r0, r5
 8004306:	47b8      	blx	r7
 8004308:	3001      	adds	r0, #1
 800430a:	f43f aeac 	beq.w	8004066 <_printf_float+0xb6>
 800430e:	f108 0801 	add.w	r8, r8, #1
 8004312:	e7ec      	b.n	80042ee <_printf_float+0x33e>
 8004314:	4642      	mov	r2, r8
 8004316:	4631      	mov	r1, r6
 8004318:	4628      	mov	r0, r5
 800431a:	47b8      	blx	r7
 800431c:	3001      	adds	r0, #1
 800431e:	d1c2      	bne.n	80042a6 <_printf_float+0x2f6>
 8004320:	e6a1      	b.n	8004066 <_printf_float+0xb6>
 8004322:	2301      	movs	r3, #1
 8004324:	4631      	mov	r1, r6
 8004326:	4628      	mov	r0, r5
 8004328:	920a      	str	r2, [sp, #40]	@ 0x28
 800432a:	47b8      	blx	r7
 800432c:	3001      	adds	r0, #1
 800432e:	f43f ae9a 	beq.w	8004066 <_printf_float+0xb6>
 8004332:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004334:	f10b 0b01 	add.w	fp, fp, #1
 8004338:	e7bb      	b.n	80042b2 <_printf_float+0x302>
 800433a:	4631      	mov	r1, r6
 800433c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004340:	4628      	mov	r0, r5
 8004342:	47b8      	blx	r7
 8004344:	3001      	adds	r0, #1
 8004346:	d1c0      	bne.n	80042ca <_printf_float+0x31a>
 8004348:	e68d      	b.n	8004066 <_printf_float+0xb6>
 800434a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800434c:	464b      	mov	r3, r9
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
 8004352:	4442      	add	r2, r8
 8004354:	47b8      	blx	r7
 8004356:	3001      	adds	r0, #1
 8004358:	d1c3      	bne.n	80042e2 <_printf_float+0x332>
 800435a:	e684      	b.n	8004066 <_printf_float+0xb6>
 800435c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004360:	f1ba 0f01 	cmp.w	sl, #1
 8004364:	dc01      	bgt.n	800436a <_printf_float+0x3ba>
 8004366:	07db      	lsls	r3, r3, #31
 8004368:	d536      	bpl.n	80043d8 <_printf_float+0x428>
 800436a:	2301      	movs	r3, #1
 800436c:	4642      	mov	r2, r8
 800436e:	4631      	mov	r1, r6
 8004370:	4628      	mov	r0, r5
 8004372:	47b8      	blx	r7
 8004374:	3001      	adds	r0, #1
 8004376:	f43f ae76 	beq.w	8004066 <_printf_float+0xb6>
 800437a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800437e:	4631      	mov	r1, r6
 8004380:	4628      	mov	r0, r5
 8004382:	47b8      	blx	r7
 8004384:	3001      	adds	r0, #1
 8004386:	f43f ae6e 	beq.w	8004066 <_printf_float+0xb6>
 800438a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800438e:	2200      	movs	r2, #0
 8004390:	2300      	movs	r3, #0
 8004392:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004396:	f7fc fb07 	bl	80009a8 <__aeabi_dcmpeq>
 800439a:	b9c0      	cbnz	r0, 80043ce <_printf_float+0x41e>
 800439c:	4653      	mov	r3, sl
 800439e:	f108 0201 	add.w	r2, r8, #1
 80043a2:	4631      	mov	r1, r6
 80043a4:	4628      	mov	r0, r5
 80043a6:	47b8      	blx	r7
 80043a8:	3001      	adds	r0, #1
 80043aa:	d10c      	bne.n	80043c6 <_printf_float+0x416>
 80043ac:	e65b      	b.n	8004066 <_printf_float+0xb6>
 80043ae:	2301      	movs	r3, #1
 80043b0:	465a      	mov	r2, fp
 80043b2:	4631      	mov	r1, r6
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b8      	blx	r7
 80043b8:	3001      	adds	r0, #1
 80043ba:	f43f ae54 	beq.w	8004066 <_printf_float+0xb6>
 80043be:	f108 0801 	add.w	r8, r8, #1
 80043c2:	45d0      	cmp	r8, sl
 80043c4:	dbf3      	blt.n	80043ae <_printf_float+0x3fe>
 80043c6:	464b      	mov	r3, r9
 80043c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80043cc:	e6e0      	b.n	8004190 <_printf_float+0x1e0>
 80043ce:	f04f 0800 	mov.w	r8, #0
 80043d2:	f104 0b1a 	add.w	fp, r4, #26
 80043d6:	e7f4      	b.n	80043c2 <_printf_float+0x412>
 80043d8:	2301      	movs	r3, #1
 80043da:	4642      	mov	r2, r8
 80043dc:	e7e1      	b.n	80043a2 <_printf_float+0x3f2>
 80043de:	2301      	movs	r3, #1
 80043e0:	464a      	mov	r2, r9
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b8      	blx	r7
 80043e8:	3001      	adds	r0, #1
 80043ea:	f43f ae3c 	beq.w	8004066 <_printf_float+0xb6>
 80043ee:	f108 0801 	add.w	r8, r8, #1
 80043f2:	68e3      	ldr	r3, [r4, #12]
 80043f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80043f6:	1a5b      	subs	r3, r3, r1
 80043f8:	4543      	cmp	r3, r8
 80043fa:	dcf0      	bgt.n	80043de <_printf_float+0x42e>
 80043fc:	e6fd      	b.n	80041fa <_printf_float+0x24a>
 80043fe:	f04f 0800 	mov.w	r8, #0
 8004402:	f104 0919 	add.w	r9, r4, #25
 8004406:	e7f4      	b.n	80043f2 <_printf_float+0x442>

08004408 <_printf_common>:
 8004408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800440c:	4616      	mov	r6, r2
 800440e:	4698      	mov	r8, r3
 8004410:	688a      	ldr	r2, [r1, #8]
 8004412:	690b      	ldr	r3, [r1, #16]
 8004414:	4607      	mov	r7, r0
 8004416:	4293      	cmp	r3, r2
 8004418:	bfb8      	it	lt
 800441a:	4613      	movlt	r3, r2
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004422:	460c      	mov	r4, r1
 8004424:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004428:	b10a      	cbz	r2, 800442e <_printf_common+0x26>
 800442a:	3301      	adds	r3, #1
 800442c:	6033      	str	r3, [r6, #0]
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	0699      	lsls	r1, r3, #26
 8004432:	bf42      	ittt	mi
 8004434:	6833      	ldrmi	r3, [r6, #0]
 8004436:	3302      	addmi	r3, #2
 8004438:	6033      	strmi	r3, [r6, #0]
 800443a:	6825      	ldr	r5, [r4, #0]
 800443c:	f015 0506 	ands.w	r5, r5, #6
 8004440:	d106      	bne.n	8004450 <_printf_common+0x48>
 8004442:	f104 0a19 	add.w	sl, r4, #25
 8004446:	68e3      	ldr	r3, [r4, #12]
 8004448:	6832      	ldr	r2, [r6, #0]
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	42ab      	cmp	r3, r5
 800444e:	dc2b      	bgt.n	80044a8 <_printf_common+0xa0>
 8004450:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	3b00      	subs	r3, #0
 8004458:	bf18      	it	ne
 800445a:	2301      	movne	r3, #1
 800445c:	0692      	lsls	r2, r2, #26
 800445e:	d430      	bmi.n	80044c2 <_printf_common+0xba>
 8004460:	4641      	mov	r1, r8
 8004462:	4638      	mov	r0, r7
 8004464:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004468:	47c8      	blx	r9
 800446a:	3001      	adds	r0, #1
 800446c:	d023      	beq.n	80044b6 <_printf_common+0xae>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	6922      	ldr	r2, [r4, #16]
 8004472:	f003 0306 	and.w	r3, r3, #6
 8004476:	2b04      	cmp	r3, #4
 8004478:	bf14      	ite	ne
 800447a:	2500      	movne	r5, #0
 800447c:	6833      	ldreq	r3, [r6, #0]
 800447e:	f04f 0600 	mov.w	r6, #0
 8004482:	bf08      	it	eq
 8004484:	68e5      	ldreq	r5, [r4, #12]
 8004486:	f104 041a 	add.w	r4, r4, #26
 800448a:	bf08      	it	eq
 800448c:	1aed      	subeq	r5, r5, r3
 800448e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004492:	bf08      	it	eq
 8004494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004498:	4293      	cmp	r3, r2
 800449a:	bfc4      	itt	gt
 800449c:	1a9b      	subgt	r3, r3, r2
 800449e:	18ed      	addgt	r5, r5, r3
 80044a0:	42b5      	cmp	r5, r6
 80044a2:	d11a      	bne.n	80044da <_printf_common+0xd2>
 80044a4:	2000      	movs	r0, #0
 80044a6:	e008      	b.n	80044ba <_printf_common+0xb2>
 80044a8:	2301      	movs	r3, #1
 80044aa:	4652      	mov	r2, sl
 80044ac:	4641      	mov	r1, r8
 80044ae:	4638      	mov	r0, r7
 80044b0:	47c8      	blx	r9
 80044b2:	3001      	adds	r0, #1
 80044b4:	d103      	bne.n	80044be <_printf_common+0xb6>
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044be:	3501      	adds	r5, #1
 80044c0:	e7c1      	b.n	8004446 <_printf_common+0x3e>
 80044c2:	2030      	movs	r0, #48	@ 0x30
 80044c4:	18e1      	adds	r1, r4, r3
 80044c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044d0:	4422      	add	r2, r4
 80044d2:	3302      	adds	r3, #2
 80044d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044d8:	e7c2      	b.n	8004460 <_printf_common+0x58>
 80044da:	2301      	movs	r3, #1
 80044dc:	4622      	mov	r2, r4
 80044de:	4641      	mov	r1, r8
 80044e0:	4638      	mov	r0, r7
 80044e2:	47c8      	blx	r9
 80044e4:	3001      	adds	r0, #1
 80044e6:	d0e6      	beq.n	80044b6 <_printf_common+0xae>
 80044e8:	3601      	adds	r6, #1
 80044ea:	e7d9      	b.n	80044a0 <_printf_common+0x98>

080044ec <_printf_i>:
 80044ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	7e0f      	ldrb	r7, [r1, #24]
 80044f2:	4691      	mov	r9, r2
 80044f4:	2f78      	cmp	r7, #120	@ 0x78
 80044f6:	4680      	mov	r8, r0
 80044f8:	460c      	mov	r4, r1
 80044fa:	469a      	mov	sl, r3
 80044fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004502:	d807      	bhi.n	8004514 <_printf_i+0x28>
 8004504:	2f62      	cmp	r7, #98	@ 0x62
 8004506:	d80a      	bhi.n	800451e <_printf_i+0x32>
 8004508:	2f00      	cmp	r7, #0
 800450a:	f000 80d3 	beq.w	80046b4 <_printf_i+0x1c8>
 800450e:	2f58      	cmp	r7, #88	@ 0x58
 8004510:	f000 80ba 	beq.w	8004688 <_printf_i+0x19c>
 8004514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800451c:	e03a      	b.n	8004594 <_printf_i+0xa8>
 800451e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004522:	2b15      	cmp	r3, #21
 8004524:	d8f6      	bhi.n	8004514 <_printf_i+0x28>
 8004526:	a101      	add	r1, pc, #4	@ (adr r1, 800452c <_printf_i+0x40>)
 8004528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800452c:	08004585 	.word	0x08004585
 8004530:	08004599 	.word	0x08004599
 8004534:	08004515 	.word	0x08004515
 8004538:	08004515 	.word	0x08004515
 800453c:	08004515 	.word	0x08004515
 8004540:	08004515 	.word	0x08004515
 8004544:	08004599 	.word	0x08004599
 8004548:	08004515 	.word	0x08004515
 800454c:	08004515 	.word	0x08004515
 8004550:	08004515 	.word	0x08004515
 8004554:	08004515 	.word	0x08004515
 8004558:	0800469b 	.word	0x0800469b
 800455c:	080045c3 	.word	0x080045c3
 8004560:	08004655 	.word	0x08004655
 8004564:	08004515 	.word	0x08004515
 8004568:	08004515 	.word	0x08004515
 800456c:	080046bd 	.word	0x080046bd
 8004570:	08004515 	.word	0x08004515
 8004574:	080045c3 	.word	0x080045c3
 8004578:	08004515 	.word	0x08004515
 800457c:	08004515 	.word	0x08004515
 8004580:	0800465d 	.word	0x0800465d
 8004584:	6833      	ldr	r3, [r6, #0]
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6032      	str	r2, [r6, #0]
 800458c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004594:	2301      	movs	r3, #1
 8004596:	e09e      	b.n	80046d6 <_printf_i+0x1ea>
 8004598:	6833      	ldr	r3, [r6, #0]
 800459a:	6820      	ldr	r0, [r4, #0]
 800459c:	1d19      	adds	r1, r3, #4
 800459e:	6031      	str	r1, [r6, #0]
 80045a0:	0606      	lsls	r6, r0, #24
 80045a2:	d501      	bpl.n	80045a8 <_printf_i+0xbc>
 80045a4:	681d      	ldr	r5, [r3, #0]
 80045a6:	e003      	b.n	80045b0 <_printf_i+0xc4>
 80045a8:	0645      	lsls	r5, r0, #25
 80045aa:	d5fb      	bpl.n	80045a4 <_printf_i+0xb8>
 80045ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045b0:	2d00      	cmp	r5, #0
 80045b2:	da03      	bge.n	80045bc <_printf_i+0xd0>
 80045b4:	232d      	movs	r3, #45	@ 0x2d
 80045b6:	426d      	negs	r5, r5
 80045b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045bc:	230a      	movs	r3, #10
 80045be:	4859      	ldr	r0, [pc, #356]	@ (8004724 <_printf_i+0x238>)
 80045c0:	e011      	b.n	80045e6 <_printf_i+0xfa>
 80045c2:	6821      	ldr	r1, [r4, #0]
 80045c4:	6833      	ldr	r3, [r6, #0]
 80045c6:	0608      	lsls	r0, r1, #24
 80045c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80045cc:	d402      	bmi.n	80045d4 <_printf_i+0xe8>
 80045ce:	0649      	lsls	r1, r1, #25
 80045d0:	bf48      	it	mi
 80045d2:	b2ad      	uxthmi	r5, r5
 80045d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80045d6:	6033      	str	r3, [r6, #0]
 80045d8:	bf14      	ite	ne
 80045da:	230a      	movne	r3, #10
 80045dc:	2308      	moveq	r3, #8
 80045de:	4851      	ldr	r0, [pc, #324]	@ (8004724 <_printf_i+0x238>)
 80045e0:	2100      	movs	r1, #0
 80045e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045e6:	6866      	ldr	r6, [r4, #4]
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	bfa8      	it	ge
 80045ec:	6821      	ldrge	r1, [r4, #0]
 80045ee:	60a6      	str	r6, [r4, #8]
 80045f0:	bfa4      	itt	ge
 80045f2:	f021 0104 	bicge.w	r1, r1, #4
 80045f6:	6021      	strge	r1, [r4, #0]
 80045f8:	b90d      	cbnz	r5, 80045fe <_printf_i+0x112>
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	d04b      	beq.n	8004696 <_printf_i+0x1aa>
 80045fe:	4616      	mov	r6, r2
 8004600:	fbb5 f1f3 	udiv	r1, r5, r3
 8004604:	fb03 5711 	mls	r7, r3, r1, r5
 8004608:	5dc7      	ldrb	r7, [r0, r7]
 800460a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800460e:	462f      	mov	r7, r5
 8004610:	42bb      	cmp	r3, r7
 8004612:	460d      	mov	r5, r1
 8004614:	d9f4      	bls.n	8004600 <_printf_i+0x114>
 8004616:	2b08      	cmp	r3, #8
 8004618:	d10b      	bne.n	8004632 <_printf_i+0x146>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	07df      	lsls	r7, r3, #31
 800461e:	d508      	bpl.n	8004632 <_printf_i+0x146>
 8004620:	6923      	ldr	r3, [r4, #16]
 8004622:	6861      	ldr	r1, [r4, #4]
 8004624:	4299      	cmp	r1, r3
 8004626:	bfde      	ittt	le
 8004628:	2330      	movle	r3, #48	@ 0x30
 800462a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800462e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004632:	1b92      	subs	r2, r2, r6
 8004634:	6122      	str	r2, [r4, #16]
 8004636:	464b      	mov	r3, r9
 8004638:	4621      	mov	r1, r4
 800463a:	4640      	mov	r0, r8
 800463c:	f8cd a000 	str.w	sl, [sp]
 8004640:	aa03      	add	r2, sp, #12
 8004642:	f7ff fee1 	bl	8004408 <_printf_common>
 8004646:	3001      	adds	r0, #1
 8004648:	d14a      	bne.n	80046e0 <_printf_i+0x1f4>
 800464a:	f04f 30ff 	mov.w	r0, #4294967295
 800464e:	b004      	add	sp, #16
 8004650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	f043 0320 	orr.w	r3, r3, #32
 800465a:	6023      	str	r3, [r4, #0]
 800465c:	2778      	movs	r7, #120	@ 0x78
 800465e:	4832      	ldr	r0, [pc, #200]	@ (8004728 <_printf_i+0x23c>)
 8004660:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	6831      	ldr	r1, [r6, #0]
 8004668:	061f      	lsls	r7, r3, #24
 800466a:	f851 5b04 	ldr.w	r5, [r1], #4
 800466e:	d402      	bmi.n	8004676 <_printf_i+0x18a>
 8004670:	065f      	lsls	r7, r3, #25
 8004672:	bf48      	it	mi
 8004674:	b2ad      	uxthmi	r5, r5
 8004676:	6031      	str	r1, [r6, #0]
 8004678:	07d9      	lsls	r1, r3, #31
 800467a:	bf44      	itt	mi
 800467c:	f043 0320 	orrmi.w	r3, r3, #32
 8004680:	6023      	strmi	r3, [r4, #0]
 8004682:	b11d      	cbz	r5, 800468c <_printf_i+0x1a0>
 8004684:	2310      	movs	r3, #16
 8004686:	e7ab      	b.n	80045e0 <_printf_i+0xf4>
 8004688:	4826      	ldr	r0, [pc, #152]	@ (8004724 <_printf_i+0x238>)
 800468a:	e7e9      	b.n	8004660 <_printf_i+0x174>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	f023 0320 	bic.w	r3, r3, #32
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	e7f6      	b.n	8004684 <_printf_i+0x198>
 8004696:	4616      	mov	r6, r2
 8004698:	e7bd      	b.n	8004616 <_printf_i+0x12a>
 800469a:	6833      	ldr	r3, [r6, #0]
 800469c:	6825      	ldr	r5, [r4, #0]
 800469e:	1d18      	adds	r0, r3, #4
 80046a0:	6961      	ldr	r1, [r4, #20]
 80046a2:	6030      	str	r0, [r6, #0]
 80046a4:	062e      	lsls	r6, r5, #24
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	d501      	bpl.n	80046ae <_printf_i+0x1c2>
 80046aa:	6019      	str	r1, [r3, #0]
 80046ac:	e002      	b.n	80046b4 <_printf_i+0x1c8>
 80046ae:	0668      	lsls	r0, r5, #25
 80046b0:	d5fb      	bpl.n	80046aa <_printf_i+0x1be>
 80046b2:	8019      	strh	r1, [r3, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	4616      	mov	r6, r2
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	e7bc      	b.n	8004636 <_printf_i+0x14a>
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	2100      	movs	r1, #0
 80046c0:	1d1a      	adds	r2, r3, #4
 80046c2:	6032      	str	r2, [r6, #0]
 80046c4:	681e      	ldr	r6, [r3, #0]
 80046c6:	6862      	ldr	r2, [r4, #4]
 80046c8:	4630      	mov	r0, r6
 80046ca:	f000 f9ee 	bl	8004aaa <memchr>
 80046ce:	b108      	cbz	r0, 80046d4 <_printf_i+0x1e8>
 80046d0:	1b80      	subs	r0, r0, r6
 80046d2:	6060      	str	r0, [r4, #4]
 80046d4:	6863      	ldr	r3, [r4, #4]
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	2300      	movs	r3, #0
 80046da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046de:	e7aa      	b.n	8004636 <_printf_i+0x14a>
 80046e0:	4632      	mov	r2, r6
 80046e2:	4649      	mov	r1, r9
 80046e4:	4640      	mov	r0, r8
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	47d0      	blx	sl
 80046ea:	3001      	adds	r0, #1
 80046ec:	d0ad      	beq.n	800464a <_printf_i+0x15e>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	079b      	lsls	r3, r3, #30
 80046f2:	d413      	bmi.n	800471c <_printf_i+0x230>
 80046f4:	68e0      	ldr	r0, [r4, #12]
 80046f6:	9b03      	ldr	r3, [sp, #12]
 80046f8:	4298      	cmp	r0, r3
 80046fa:	bfb8      	it	lt
 80046fc:	4618      	movlt	r0, r3
 80046fe:	e7a6      	b.n	800464e <_printf_i+0x162>
 8004700:	2301      	movs	r3, #1
 8004702:	4632      	mov	r2, r6
 8004704:	4649      	mov	r1, r9
 8004706:	4640      	mov	r0, r8
 8004708:	47d0      	blx	sl
 800470a:	3001      	adds	r0, #1
 800470c:	d09d      	beq.n	800464a <_printf_i+0x15e>
 800470e:	3501      	adds	r5, #1
 8004710:	68e3      	ldr	r3, [r4, #12]
 8004712:	9903      	ldr	r1, [sp, #12]
 8004714:	1a5b      	subs	r3, r3, r1
 8004716:	42ab      	cmp	r3, r5
 8004718:	dcf2      	bgt.n	8004700 <_printf_i+0x214>
 800471a:	e7eb      	b.n	80046f4 <_printf_i+0x208>
 800471c:	2500      	movs	r5, #0
 800471e:	f104 0619 	add.w	r6, r4, #25
 8004722:	e7f5      	b.n	8004710 <_printf_i+0x224>
 8004724:	08008baa 	.word	0x08008baa
 8004728:	08008bbb 	.word	0x08008bbb

0800472c <std>:
 800472c:	2300      	movs	r3, #0
 800472e:	b510      	push	{r4, lr}
 8004730:	4604      	mov	r4, r0
 8004732:	e9c0 3300 	strd	r3, r3, [r0]
 8004736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800473a:	6083      	str	r3, [r0, #8]
 800473c:	8181      	strh	r1, [r0, #12]
 800473e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004740:	81c2      	strh	r2, [r0, #14]
 8004742:	6183      	str	r3, [r0, #24]
 8004744:	4619      	mov	r1, r3
 8004746:	2208      	movs	r2, #8
 8004748:	305c      	adds	r0, #92	@ 0x5c
 800474a:	f000 f92e 	bl	80049aa <memset>
 800474e:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <std+0x58>)
 8004750:	6224      	str	r4, [r4, #32]
 8004752:	6263      	str	r3, [r4, #36]	@ 0x24
 8004754:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <std+0x5c>)
 8004756:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004758:	4b0c      	ldr	r3, [pc, #48]	@ (800478c <std+0x60>)
 800475a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800475c:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <std+0x64>)
 800475e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <std+0x68>)
 8004762:	429c      	cmp	r4, r3
 8004764:	d006      	beq.n	8004774 <std+0x48>
 8004766:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800476a:	4294      	cmp	r4, r2
 800476c:	d002      	beq.n	8004774 <std+0x48>
 800476e:	33d0      	adds	r3, #208	@ 0xd0
 8004770:	429c      	cmp	r4, r3
 8004772:	d105      	bne.n	8004780 <std+0x54>
 8004774:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800477c:	f000 b992 	b.w	8004aa4 <__retarget_lock_init_recursive>
 8004780:	bd10      	pop	{r4, pc}
 8004782:	bf00      	nop
 8004784:	080048f1 	.word	0x080048f1
 8004788:	08004913 	.word	0x08004913
 800478c:	0800494b 	.word	0x0800494b
 8004790:	0800496f 	.word	0x0800496f
 8004794:	20000764 	.word	0x20000764

08004798 <stdio_exit_handler>:
 8004798:	4a02      	ldr	r2, [pc, #8]	@ (80047a4 <stdio_exit_handler+0xc>)
 800479a:	4903      	ldr	r1, [pc, #12]	@ (80047a8 <stdio_exit_handler+0x10>)
 800479c:	4803      	ldr	r0, [pc, #12]	@ (80047ac <stdio_exit_handler+0x14>)
 800479e:	f000 b869 	b.w	8004874 <_fwalk_sglue>
 80047a2:	bf00      	nop
 80047a4:	200000ac 	.word	0x200000ac
 80047a8:	08006435 	.word	0x08006435
 80047ac:	200000bc 	.word	0x200000bc

080047b0 <cleanup_stdio>:
 80047b0:	6841      	ldr	r1, [r0, #4]
 80047b2:	4b0c      	ldr	r3, [pc, #48]	@ (80047e4 <cleanup_stdio+0x34>)
 80047b4:	b510      	push	{r4, lr}
 80047b6:	4299      	cmp	r1, r3
 80047b8:	4604      	mov	r4, r0
 80047ba:	d001      	beq.n	80047c0 <cleanup_stdio+0x10>
 80047bc:	f001 fe3a 	bl	8006434 <_fflush_r>
 80047c0:	68a1      	ldr	r1, [r4, #8]
 80047c2:	4b09      	ldr	r3, [pc, #36]	@ (80047e8 <cleanup_stdio+0x38>)
 80047c4:	4299      	cmp	r1, r3
 80047c6:	d002      	beq.n	80047ce <cleanup_stdio+0x1e>
 80047c8:	4620      	mov	r0, r4
 80047ca:	f001 fe33 	bl	8006434 <_fflush_r>
 80047ce:	68e1      	ldr	r1, [r4, #12]
 80047d0:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <cleanup_stdio+0x3c>)
 80047d2:	4299      	cmp	r1, r3
 80047d4:	d004      	beq.n	80047e0 <cleanup_stdio+0x30>
 80047d6:	4620      	mov	r0, r4
 80047d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047dc:	f001 be2a 	b.w	8006434 <_fflush_r>
 80047e0:	bd10      	pop	{r4, pc}
 80047e2:	bf00      	nop
 80047e4:	20000764 	.word	0x20000764
 80047e8:	200007cc 	.word	0x200007cc
 80047ec:	20000834 	.word	0x20000834

080047f0 <global_stdio_init.part.0>:
 80047f0:	b510      	push	{r4, lr}
 80047f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <global_stdio_init.part.0+0x30>)
 80047f4:	4c0b      	ldr	r4, [pc, #44]	@ (8004824 <global_stdio_init.part.0+0x34>)
 80047f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004828 <global_stdio_init.part.0+0x38>)
 80047f8:	4620      	mov	r0, r4
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	2104      	movs	r1, #4
 80047fe:	2200      	movs	r2, #0
 8004800:	f7ff ff94 	bl	800472c <std>
 8004804:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004808:	2201      	movs	r2, #1
 800480a:	2109      	movs	r1, #9
 800480c:	f7ff ff8e 	bl	800472c <std>
 8004810:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004814:	2202      	movs	r2, #2
 8004816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481a:	2112      	movs	r1, #18
 800481c:	f7ff bf86 	b.w	800472c <std>
 8004820:	2000089c 	.word	0x2000089c
 8004824:	20000764 	.word	0x20000764
 8004828:	08004799 	.word	0x08004799

0800482c <__sfp_lock_acquire>:
 800482c:	4801      	ldr	r0, [pc, #4]	@ (8004834 <__sfp_lock_acquire+0x8>)
 800482e:	f000 b93a 	b.w	8004aa6 <__retarget_lock_acquire_recursive>
 8004832:	bf00      	nop
 8004834:	200008a5 	.word	0x200008a5

08004838 <__sfp_lock_release>:
 8004838:	4801      	ldr	r0, [pc, #4]	@ (8004840 <__sfp_lock_release+0x8>)
 800483a:	f000 b935 	b.w	8004aa8 <__retarget_lock_release_recursive>
 800483e:	bf00      	nop
 8004840:	200008a5 	.word	0x200008a5

08004844 <__sinit>:
 8004844:	b510      	push	{r4, lr}
 8004846:	4604      	mov	r4, r0
 8004848:	f7ff fff0 	bl	800482c <__sfp_lock_acquire>
 800484c:	6a23      	ldr	r3, [r4, #32]
 800484e:	b11b      	cbz	r3, 8004858 <__sinit+0x14>
 8004850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004854:	f7ff bff0 	b.w	8004838 <__sfp_lock_release>
 8004858:	4b04      	ldr	r3, [pc, #16]	@ (800486c <__sinit+0x28>)
 800485a:	6223      	str	r3, [r4, #32]
 800485c:	4b04      	ldr	r3, [pc, #16]	@ (8004870 <__sinit+0x2c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f5      	bne.n	8004850 <__sinit+0xc>
 8004864:	f7ff ffc4 	bl	80047f0 <global_stdio_init.part.0>
 8004868:	e7f2      	b.n	8004850 <__sinit+0xc>
 800486a:	bf00      	nop
 800486c:	080047b1 	.word	0x080047b1
 8004870:	2000089c 	.word	0x2000089c

08004874 <_fwalk_sglue>:
 8004874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004878:	4607      	mov	r7, r0
 800487a:	4688      	mov	r8, r1
 800487c:	4614      	mov	r4, r2
 800487e:	2600      	movs	r6, #0
 8004880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004884:	f1b9 0901 	subs.w	r9, r9, #1
 8004888:	d505      	bpl.n	8004896 <_fwalk_sglue+0x22>
 800488a:	6824      	ldr	r4, [r4, #0]
 800488c:	2c00      	cmp	r4, #0
 800488e:	d1f7      	bne.n	8004880 <_fwalk_sglue+0xc>
 8004890:	4630      	mov	r0, r6
 8004892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004896:	89ab      	ldrh	r3, [r5, #12]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d907      	bls.n	80048ac <_fwalk_sglue+0x38>
 800489c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048a0:	3301      	adds	r3, #1
 80048a2:	d003      	beq.n	80048ac <_fwalk_sglue+0x38>
 80048a4:	4629      	mov	r1, r5
 80048a6:	4638      	mov	r0, r7
 80048a8:	47c0      	blx	r8
 80048aa:	4306      	orrs	r6, r0
 80048ac:	3568      	adds	r5, #104	@ 0x68
 80048ae:	e7e9      	b.n	8004884 <_fwalk_sglue+0x10>

080048b0 <siprintf>:
 80048b0:	b40e      	push	{r1, r2, r3}
 80048b2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048b6:	b500      	push	{lr}
 80048b8:	b09c      	sub	sp, #112	@ 0x70
 80048ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80048bc:	9002      	str	r0, [sp, #8]
 80048be:	9006      	str	r0, [sp, #24]
 80048c0:	9107      	str	r1, [sp, #28]
 80048c2:	9104      	str	r1, [sp, #16]
 80048c4:	4808      	ldr	r0, [pc, #32]	@ (80048e8 <siprintf+0x38>)
 80048c6:	4909      	ldr	r1, [pc, #36]	@ (80048ec <siprintf+0x3c>)
 80048c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048cc:	9105      	str	r1, [sp, #20]
 80048ce:	6800      	ldr	r0, [r0, #0]
 80048d0:	a902      	add	r1, sp, #8
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	f001 fc32 	bl	800613c <_svfiprintf_r>
 80048d8:	2200      	movs	r2, #0
 80048da:	9b02      	ldr	r3, [sp, #8]
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	b01c      	add	sp, #112	@ 0x70
 80048e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e4:	b003      	add	sp, #12
 80048e6:	4770      	bx	lr
 80048e8:	200000b8 	.word	0x200000b8
 80048ec:	ffff0208 	.word	0xffff0208

080048f0 <__sread>:
 80048f0:	b510      	push	{r4, lr}
 80048f2:	460c      	mov	r4, r1
 80048f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f8:	f000 f886 	bl	8004a08 <_read_r>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	bfab      	itete	ge
 8004900:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004902:	89a3      	ldrhlt	r3, [r4, #12]
 8004904:	181b      	addge	r3, r3, r0
 8004906:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800490a:	bfac      	ite	ge
 800490c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800490e:	81a3      	strhlt	r3, [r4, #12]
 8004910:	bd10      	pop	{r4, pc}

08004912 <__swrite>:
 8004912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004916:	461f      	mov	r7, r3
 8004918:	898b      	ldrh	r3, [r1, #12]
 800491a:	4605      	mov	r5, r0
 800491c:	05db      	lsls	r3, r3, #23
 800491e:	460c      	mov	r4, r1
 8004920:	4616      	mov	r6, r2
 8004922:	d505      	bpl.n	8004930 <__swrite+0x1e>
 8004924:	2302      	movs	r3, #2
 8004926:	2200      	movs	r2, #0
 8004928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492c:	f000 f85a 	bl	80049e4 <_lseek_r>
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	4632      	mov	r2, r6
 8004934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004938:	81a3      	strh	r3, [r4, #12]
 800493a:	4628      	mov	r0, r5
 800493c:	463b      	mov	r3, r7
 800493e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004946:	f000 b871 	b.w	8004a2c <_write_r>

0800494a <__sseek>:
 800494a:	b510      	push	{r4, lr}
 800494c:	460c      	mov	r4, r1
 800494e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004952:	f000 f847 	bl	80049e4 <_lseek_r>
 8004956:	1c43      	adds	r3, r0, #1
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	bf15      	itete	ne
 800495c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800495e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004962:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004966:	81a3      	strheq	r3, [r4, #12]
 8004968:	bf18      	it	ne
 800496a:	81a3      	strhne	r3, [r4, #12]
 800496c:	bd10      	pop	{r4, pc}

0800496e <__sclose>:
 800496e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004972:	f000 b827 	b.w	80049c4 <_close_r>

08004976 <memmove>:
 8004976:	4288      	cmp	r0, r1
 8004978:	b510      	push	{r4, lr}
 800497a:	eb01 0402 	add.w	r4, r1, r2
 800497e:	d902      	bls.n	8004986 <memmove+0x10>
 8004980:	4284      	cmp	r4, r0
 8004982:	4623      	mov	r3, r4
 8004984:	d807      	bhi.n	8004996 <memmove+0x20>
 8004986:	1e43      	subs	r3, r0, #1
 8004988:	42a1      	cmp	r1, r4
 800498a:	d008      	beq.n	800499e <memmove+0x28>
 800498c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004990:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004994:	e7f8      	b.n	8004988 <memmove+0x12>
 8004996:	4601      	mov	r1, r0
 8004998:	4402      	add	r2, r0
 800499a:	428a      	cmp	r2, r1
 800499c:	d100      	bne.n	80049a0 <memmove+0x2a>
 800499e:	bd10      	pop	{r4, pc}
 80049a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049a8:	e7f7      	b.n	800499a <memmove+0x24>

080049aa <memset>:
 80049aa:	4603      	mov	r3, r0
 80049ac:	4402      	add	r2, r0
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d100      	bne.n	80049b4 <memset+0xa>
 80049b2:	4770      	bx	lr
 80049b4:	f803 1b01 	strb.w	r1, [r3], #1
 80049b8:	e7f9      	b.n	80049ae <memset+0x4>
	...

080049bc <_localeconv_r>:
 80049bc:	4800      	ldr	r0, [pc, #0]	@ (80049c0 <_localeconv_r+0x4>)
 80049be:	4770      	bx	lr
 80049c0:	200001f8 	.word	0x200001f8

080049c4 <_close_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	2300      	movs	r3, #0
 80049c8:	4d05      	ldr	r5, [pc, #20]	@ (80049e0 <_close_r+0x1c>)
 80049ca:	4604      	mov	r4, r0
 80049cc:	4608      	mov	r0, r1
 80049ce:	602b      	str	r3, [r5, #0]
 80049d0:	f7fd f837 	bl	8001a42 <_close>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	d102      	bne.n	80049de <_close_r+0x1a>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	b103      	cbz	r3, 80049de <_close_r+0x1a>
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	bd38      	pop	{r3, r4, r5, pc}
 80049e0:	200008a0 	.word	0x200008a0

080049e4 <_lseek_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	4611      	mov	r1, r2
 80049ec:	2200      	movs	r2, #0
 80049ee:	4d05      	ldr	r5, [pc, #20]	@ (8004a04 <_lseek_r+0x20>)
 80049f0:	602a      	str	r2, [r5, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f7fd f849 	bl	8001a8a <_lseek>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d102      	bne.n	8004a02 <_lseek_r+0x1e>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	b103      	cbz	r3, 8004a02 <_lseek_r+0x1e>
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
 8004a04:	200008a0 	.word	0x200008a0

08004a08 <_read_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	2200      	movs	r2, #0
 8004a12:	4d05      	ldr	r5, [pc, #20]	@ (8004a28 <_read_r+0x20>)
 8004a14:	602a      	str	r2, [r5, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f7fc ffda 	bl	80019d0 <_read>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_read_r+0x1e>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_read_r+0x1e>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	200008a0 	.word	0x200008a0

08004a2c <_write_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4604      	mov	r4, r0
 8004a30:	4608      	mov	r0, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	2200      	movs	r2, #0
 8004a36:	4d05      	ldr	r5, [pc, #20]	@ (8004a4c <_write_r+0x20>)
 8004a38:	602a      	str	r2, [r5, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f7fc ffe5 	bl	8001a0a <_write>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_write_r+0x1e>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_write_r+0x1e>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	200008a0 	.word	0x200008a0

08004a50 <__errno>:
 8004a50:	4b01      	ldr	r3, [pc, #4]	@ (8004a58 <__errno+0x8>)
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	200000b8 	.word	0x200000b8

08004a5c <__libc_init_array>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	2600      	movs	r6, #0
 8004a60:	4d0c      	ldr	r5, [pc, #48]	@ (8004a94 <__libc_init_array+0x38>)
 8004a62:	4c0d      	ldr	r4, [pc, #52]	@ (8004a98 <__libc_init_array+0x3c>)
 8004a64:	1b64      	subs	r4, r4, r5
 8004a66:	10a4      	asrs	r4, r4, #2
 8004a68:	42a6      	cmp	r6, r4
 8004a6a:	d109      	bne.n	8004a80 <__libc_init_array+0x24>
 8004a6c:	f002 fbba 	bl	80071e4 <_init>
 8004a70:	2600      	movs	r6, #0
 8004a72:	4d0a      	ldr	r5, [pc, #40]	@ (8004a9c <__libc_init_array+0x40>)
 8004a74:	4c0a      	ldr	r4, [pc, #40]	@ (8004aa0 <__libc_init_array+0x44>)
 8004a76:	1b64      	subs	r4, r4, r5
 8004a78:	10a4      	asrs	r4, r4, #2
 8004a7a:	42a6      	cmp	r6, r4
 8004a7c:	d105      	bne.n	8004a8a <__libc_init_array+0x2e>
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a84:	4798      	blx	r3
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7ee      	b.n	8004a68 <__libc_init_array+0xc>
 8004a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8e:	4798      	blx	r3
 8004a90:	3601      	adds	r6, #1
 8004a92:	e7f2      	b.n	8004a7a <__libc_init_array+0x1e>
 8004a94:	08008f80 	.word	0x08008f80
 8004a98:	08008f80 	.word	0x08008f80
 8004a9c:	08008f80 	.word	0x08008f80
 8004aa0:	08008f84 	.word	0x08008f84

08004aa4 <__retarget_lock_init_recursive>:
 8004aa4:	4770      	bx	lr

08004aa6 <__retarget_lock_acquire_recursive>:
 8004aa6:	4770      	bx	lr

08004aa8 <__retarget_lock_release_recursive>:
 8004aa8:	4770      	bx	lr

08004aaa <memchr>:
 8004aaa:	4603      	mov	r3, r0
 8004aac:	b510      	push	{r4, lr}
 8004aae:	b2c9      	uxtb	r1, r1
 8004ab0:	4402      	add	r2, r0
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	d101      	bne.n	8004abc <memchr+0x12>
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e003      	b.n	8004ac4 <memchr+0x1a>
 8004abc:	7804      	ldrb	r4, [r0, #0]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	428c      	cmp	r4, r1
 8004ac2:	d1f6      	bne.n	8004ab2 <memchr+0x8>
 8004ac4:	bd10      	pop	{r4, pc}

08004ac6 <memcpy>:
 8004ac6:	440a      	add	r2, r1
 8004ac8:	4291      	cmp	r1, r2
 8004aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ace:	d100      	bne.n	8004ad2 <memcpy+0xc>
 8004ad0:	4770      	bx	lr
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad8:	4291      	cmp	r1, r2
 8004ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ade:	d1f9      	bne.n	8004ad4 <memcpy+0xe>
 8004ae0:	bd10      	pop	{r4, pc}

08004ae2 <quorem>:
 8004ae2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae6:	6903      	ldr	r3, [r0, #16]
 8004ae8:	690c      	ldr	r4, [r1, #16]
 8004aea:	4607      	mov	r7, r0
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	db7e      	blt.n	8004bee <quorem+0x10c>
 8004af0:	3c01      	subs	r4, #1
 8004af2:	00a3      	lsls	r3, r4, #2
 8004af4:	f100 0514 	add.w	r5, r0, #20
 8004af8:	f101 0814 	add.w	r8, r1, #20
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b18:	d32e      	bcc.n	8004b78 <quorem+0x96>
 8004b1a:	f04f 0a00 	mov.w	sl, #0
 8004b1e:	46c4      	mov	ip, r8
 8004b20:	46ae      	mov	lr, r5
 8004b22:	46d3      	mov	fp, sl
 8004b24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b28:	b298      	uxth	r0, r3
 8004b2a:	fb06 a000 	mla	r0, r6, r0, sl
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	0c02      	lsrs	r2, r0, #16
 8004b32:	fb06 2303 	mla	r3, r6, r3, r2
 8004b36:	f8de 2000 	ldr.w	r2, [lr]
 8004b3a:	b280      	uxth	r0, r0
 8004b3c:	b292      	uxth	r2, r2
 8004b3e:	1a12      	subs	r2, r2, r0
 8004b40:	445a      	add	r2, fp
 8004b42:	f8de 0000 	ldr.w	r0, [lr]
 8004b46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004b50:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004b54:	b292      	uxth	r2, r2
 8004b56:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004b5a:	45e1      	cmp	r9, ip
 8004b5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004b60:	f84e 2b04 	str.w	r2, [lr], #4
 8004b64:	d2de      	bcs.n	8004b24 <quorem+0x42>
 8004b66:	9b00      	ldr	r3, [sp, #0]
 8004b68:	58eb      	ldr	r3, [r5, r3]
 8004b6a:	b92b      	cbnz	r3, 8004b78 <quorem+0x96>
 8004b6c:	9b01      	ldr	r3, [sp, #4]
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	429d      	cmp	r5, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	d32f      	bcc.n	8004bd6 <quorem+0xf4>
 8004b76:	613c      	str	r4, [r7, #16]
 8004b78:	4638      	mov	r0, r7
 8004b7a:	f001 f97b 	bl	8005e74 <__mcmp>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	db25      	blt.n	8004bce <quorem+0xec>
 8004b82:	4629      	mov	r1, r5
 8004b84:	2000      	movs	r0, #0
 8004b86:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b8a:	f8d1 c000 	ldr.w	ip, [r1]
 8004b8e:	fa1f fe82 	uxth.w	lr, r2
 8004b92:	fa1f f38c 	uxth.w	r3, ip
 8004b96:	eba3 030e 	sub.w	r3, r3, lr
 8004b9a:	4403      	add	r3, r0
 8004b9c:	0c12      	lsrs	r2, r2, #16
 8004b9e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004ba2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bac:	45c1      	cmp	r9, r8
 8004bae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004bb2:	f841 3b04 	str.w	r3, [r1], #4
 8004bb6:	d2e6      	bcs.n	8004b86 <quorem+0xa4>
 8004bb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bc0:	b922      	cbnz	r2, 8004bcc <quorem+0xea>
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	429d      	cmp	r5, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	d30b      	bcc.n	8004be2 <quorem+0x100>
 8004bca:	613c      	str	r4, [r7, #16]
 8004bcc:	3601      	adds	r6, #1
 8004bce:	4630      	mov	r0, r6
 8004bd0:	b003      	add	sp, #12
 8004bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	3b04      	subs	r3, #4
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	d1cb      	bne.n	8004b76 <quorem+0x94>
 8004bde:	3c01      	subs	r4, #1
 8004be0:	e7c6      	b.n	8004b70 <quorem+0x8e>
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	3b04      	subs	r3, #4
 8004be6:	2a00      	cmp	r2, #0
 8004be8:	d1ef      	bne.n	8004bca <quorem+0xe8>
 8004bea:	3c01      	subs	r4, #1
 8004bec:	e7ea      	b.n	8004bc4 <quorem+0xe2>
 8004bee:	2000      	movs	r0, #0
 8004bf0:	e7ee      	b.n	8004bd0 <quorem+0xee>
 8004bf2:	0000      	movs	r0, r0
 8004bf4:	0000      	movs	r0, r0
	...

08004bf8 <_dtoa_r>:
 8004bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	461d      	mov	r5, r3
 8004c00:	69c7      	ldr	r7, [r0, #28]
 8004c02:	b097      	sub	sp, #92	@ 0x5c
 8004c04:	4683      	mov	fp, r0
 8004c06:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c0a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004c0c:	b97f      	cbnz	r7, 8004c2e <_dtoa_r+0x36>
 8004c0e:	2010      	movs	r0, #16
 8004c10:	f000 fe02 	bl	8005818 <malloc>
 8004c14:	4602      	mov	r2, r0
 8004c16:	f8cb 001c 	str.w	r0, [fp, #28]
 8004c1a:	b920      	cbnz	r0, 8004c26 <_dtoa_r+0x2e>
 8004c1c:	21ef      	movs	r1, #239	@ 0xef
 8004c1e:	4ba8      	ldr	r3, [pc, #672]	@ (8004ec0 <_dtoa_r+0x2c8>)
 8004c20:	48a8      	ldr	r0, [pc, #672]	@ (8004ec4 <_dtoa_r+0x2cc>)
 8004c22:	f001 fc3f 	bl	80064a4 <__assert_func>
 8004c26:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004c2a:	6007      	str	r7, [r0, #0]
 8004c2c:	60c7      	str	r7, [r0, #12]
 8004c2e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	b159      	cbz	r1, 8004c4e <_dtoa_r+0x56>
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4093      	lsls	r3, r2
 8004c3c:	604a      	str	r2, [r1, #4]
 8004c3e:	608b      	str	r3, [r1, #8]
 8004c40:	4658      	mov	r0, fp
 8004c42:	f000 fedf 	bl	8005a04 <_Bfree>
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	1e2b      	subs	r3, r5, #0
 8004c50:	bfaf      	iteee	ge
 8004c52:	2300      	movge	r3, #0
 8004c54:	2201      	movlt	r2, #1
 8004c56:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004c5a:	9303      	strlt	r3, [sp, #12]
 8004c5c:	bfa8      	it	ge
 8004c5e:	6033      	strge	r3, [r6, #0]
 8004c60:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004c64:	4b98      	ldr	r3, [pc, #608]	@ (8004ec8 <_dtoa_r+0x2d0>)
 8004c66:	bfb8      	it	lt
 8004c68:	6032      	strlt	r2, [r6, #0]
 8004c6a:	ea33 0308 	bics.w	r3, r3, r8
 8004c6e:	d112      	bne.n	8004c96 <_dtoa_r+0x9e>
 8004c70:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004c74:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004c7c:	4323      	orrs	r3, r4
 8004c7e:	f000 8550 	beq.w	8005722 <_dtoa_r+0xb2a>
 8004c82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c84:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004ecc <_dtoa_r+0x2d4>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8552 	beq.w	8005732 <_dtoa_r+0xb3a>
 8004c8e:	f10a 0303 	add.w	r3, sl, #3
 8004c92:	f000 bd4c 	b.w	800572e <_dtoa_r+0xb36>
 8004c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c9a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f7fb fe7f 	bl	80009a8 <__aeabi_dcmpeq>
 8004caa:	4607      	mov	r7, r0
 8004cac:	b158      	cbz	r0, 8004cc6 <_dtoa_r+0xce>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004cb6:	b113      	cbz	r3, 8004cbe <_dtoa_r+0xc6>
 8004cb8:	4b85      	ldr	r3, [pc, #532]	@ (8004ed0 <_dtoa_r+0x2d8>)
 8004cba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004ed4 <_dtoa_r+0x2dc>
 8004cc2:	f000 bd36 	b.w	8005732 <_dtoa_r+0xb3a>
 8004cc6:	ab14      	add	r3, sp, #80	@ 0x50
 8004cc8:	9301      	str	r3, [sp, #4]
 8004cca:	ab15      	add	r3, sp, #84	@ 0x54
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	4658      	mov	r0, fp
 8004cd0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004cd4:	f001 f97e 	bl	8005fd4 <__d2b>
 8004cd8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004cdc:	4681      	mov	r9, r0
 8004cde:	2e00      	cmp	r6, #0
 8004ce0:	d077      	beq.n	8004dd2 <_dtoa_r+0x1da>
 8004ce2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ce8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cf0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004cf4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004cf8:	9712      	str	r7, [sp, #72]	@ 0x48
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4b76      	ldr	r3, [pc, #472]	@ (8004ed8 <_dtoa_r+0x2e0>)
 8004d00:	f7fb fa32 	bl	8000168 <__aeabi_dsub>
 8004d04:	a368      	add	r3, pc, #416	@ (adr r3, 8004ea8 <_dtoa_r+0x2b0>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f7fb fbe5 	bl	80004d8 <__aeabi_dmul>
 8004d0e:	a368      	add	r3, pc, #416	@ (adr r3, 8004eb0 <_dtoa_r+0x2b8>)
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f7fb fa2a 	bl	800016c <__adddf3>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	460d      	mov	r5, r1
 8004d1e:	f7fb fb71 	bl	8000404 <__aeabi_i2d>
 8004d22:	a365      	add	r3, pc, #404	@ (adr r3, 8004eb8 <_dtoa_r+0x2c0>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f7fb fbd6 	bl	80004d8 <__aeabi_dmul>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4620      	mov	r0, r4
 8004d32:	4629      	mov	r1, r5
 8004d34:	f7fb fa1a 	bl	800016c <__adddf3>
 8004d38:	4604      	mov	r4, r0
 8004d3a:	460d      	mov	r5, r1
 8004d3c:	f7fb fe7c 	bl	8000a38 <__aeabi_d2iz>
 8004d40:	2200      	movs	r2, #0
 8004d42:	4607      	mov	r7, r0
 8004d44:	2300      	movs	r3, #0
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb fe37 	bl	80009bc <__aeabi_dcmplt>
 8004d4e:	b140      	cbz	r0, 8004d62 <_dtoa_r+0x16a>
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7fb fb57 	bl	8000404 <__aeabi_i2d>
 8004d56:	4622      	mov	r2, r4
 8004d58:	462b      	mov	r3, r5
 8004d5a:	f7fb fe25 	bl	80009a8 <__aeabi_dcmpeq>
 8004d5e:	b900      	cbnz	r0, 8004d62 <_dtoa_r+0x16a>
 8004d60:	3f01      	subs	r7, #1
 8004d62:	2f16      	cmp	r7, #22
 8004d64:	d853      	bhi.n	8004e0e <_dtoa_r+0x216>
 8004d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8004edc <_dtoa_r+0x2e4>)
 8004d6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb fe22 	bl	80009bc <__aeabi_dcmplt>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d04a      	beq.n	8004e12 <_dtoa_r+0x21a>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	3f01      	subs	r7, #1
 8004d80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d84:	1b9b      	subs	r3, r3, r6
 8004d86:	1e5a      	subs	r2, r3, #1
 8004d88:	bf46      	itte	mi
 8004d8a:	f1c3 0801 	rsbmi	r8, r3, #1
 8004d8e:	2300      	movmi	r3, #0
 8004d90:	f04f 0800 	movpl.w	r8, #0
 8004d94:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d96:	bf48      	it	mi
 8004d98:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004d9a:	2f00      	cmp	r7, #0
 8004d9c:	db3b      	blt.n	8004e16 <_dtoa_r+0x21e>
 8004d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da0:	970e      	str	r7, [sp, #56]	@ 0x38
 8004da2:	443b      	add	r3, r7
 8004da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004da6:	2300      	movs	r3, #0
 8004da8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004daa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dac:	2b09      	cmp	r3, #9
 8004dae:	d866      	bhi.n	8004e7e <_dtoa_r+0x286>
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	bfc4      	itt	gt
 8004db4:	3b04      	subgt	r3, #4
 8004db6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004db8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dba:	bfc8      	it	gt
 8004dbc:	2400      	movgt	r4, #0
 8004dbe:	f1a3 0302 	sub.w	r3, r3, #2
 8004dc2:	bfd8      	it	le
 8004dc4:	2401      	movle	r4, #1
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d864      	bhi.n	8004e94 <_dtoa_r+0x29c>
 8004dca:	e8df f003 	tbb	[pc, r3]
 8004dce:	382b      	.short	0x382b
 8004dd0:	5636      	.short	0x5636
 8004dd2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004dd6:	441e      	add	r6, r3
 8004dd8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	bfc1      	itttt	gt
 8004de0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004de4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004de8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004dec:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004df0:	bfd6      	itet	le
 8004df2:	f1c3 0320 	rsble	r3, r3, #32
 8004df6:	ea48 0003 	orrgt.w	r0, r8, r3
 8004dfa:	fa04 f003 	lslle.w	r0, r4, r3
 8004dfe:	f7fb faf1 	bl	80003e4 <__aeabi_ui2d>
 8004e02:	2201      	movs	r2, #1
 8004e04:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004e08:	3e01      	subs	r6, #1
 8004e0a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004e0c:	e775      	b.n	8004cfa <_dtoa_r+0x102>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e7b6      	b.n	8004d80 <_dtoa_r+0x188>
 8004e12:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004e14:	e7b5      	b.n	8004d82 <_dtoa_r+0x18a>
 8004e16:	427b      	negs	r3, r7
 8004e18:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	eba8 0807 	sub.w	r8, r8, r7
 8004e20:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e22:	e7c2      	b.n	8004daa <_dtoa_r+0x1b2>
 8004e24:	2300      	movs	r3, #0
 8004e26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	dc35      	bgt.n	8004e9a <_dtoa_r+0x2a2>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	461a      	mov	r2, r3
 8004e32:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e36:	9221      	str	r2, [sp, #132]	@ 0x84
 8004e38:	e00b      	b.n	8004e52 <_dtoa_r+0x25a>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e7f3      	b.n	8004e26 <_dtoa_r+0x22e>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	9308      	str	r3, [sp, #32]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	9307      	str	r3, [sp, #28]
 8004e4e:	bfb8      	it	lt
 8004e50:	2301      	movlt	r3, #1
 8004e52:	2100      	movs	r1, #0
 8004e54:	2204      	movs	r2, #4
 8004e56:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004e5a:	f102 0514 	add.w	r5, r2, #20
 8004e5e:	429d      	cmp	r5, r3
 8004e60:	d91f      	bls.n	8004ea2 <_dtoa_r+0x2aa>
 8004e62:	6041      	str	r1, [r0, #4]
 8004e64:	4658      	mov	r0, fp
 8004e66:	f000 fd8d 	bl	8005984 <_Balloc>
 8004e6a:	4682      	mov	sl, r0
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d139      	bne.n	8004ee4 <_dtoa_r+0x2ec>
 8004e70:	4602      	mov	r2, r0
 8004e72:	f240 11af 	movw	r1, #431	@ 0x1af
 8004e76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee0 <_dtoa_r+0x2e8>)
 8004e78:	e6d2      	b.n	8004c20 <_dtoa_r+0x28>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e7e0      	b.n	8004e40 <_dtoa_r+0x248>
 8004e7e:	2401      	movs	r4, #1
 8004e80:	2300      	movs	r3, #0
 8004e82:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004e84:	9320      	str	r3, [sp, #128]	@ 0x80
 8004e86:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e90:	2312      	movs	r3, #18
 8004e92:	e7d0      	b.n	8004e36 <_dtoa_r+0x23e>
 8004e94:	2301      	movs	r3, #1
 8004e96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e98:	e7f5      	b.n	8004e86 <_dtoa_r+0x28e>
 8004e9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ea0:	e7d7      	b.n	8004e52 <_dtoa_r+0x25a>
 8004ea2:	3101      	adds	r1, #1
 8004ea4:	0052      	lsls	r2, r2, #1
 8004ea6:	e7d8      	b.n	8004e5a <_dtoa_r+0x262>
 8004ea8:	636f4361 	.word	0x636f4361
 8004eac:	3fd287a7 	.word	0x3fd287a7
 8004eb0:	8b60c8b3 	.word	0x8b60c8b3
 8004eb4:	3fc68a28 	.word	0x3fc68a28
 8004eb8:	509f79fb 	.word	0x509f79fb
 8004ebc:	3fd34413 	.word	0x3fd34413
 8004ec0:	08008bd9 	.word	0x08008bd9
 8004ec4:	08008bf0 	.word	0x08008bf0
 8004ec8:	7ff00000 	.word	0x7ff00000
 8004ecc:	08008bd5 	.word	0x08008bd5
 8004ed0:	08008ba9 	.word	0x08008ba9
 8004ed4:	08008ba8 	.word	0x08008ba8
 8004ed8:	3ff80000 	.word	0x3ff80000
 8004edc:	08008ce8 	.word	0x08008ce8
 8004ee0:	08008c48 	.word	0x08008c48
 8004ee4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ee8:	6018      	str	r0, [r3, #0]
 8004eea:	9b07      	ldr	r3, [sp, #28]
 8004eec:	2b0e      	cmp	r3, #14
 8004eee:	f200 80a4 	bhi.w	800503a <_dtoa_r+0x442>
 8004ef2:	2c00      	cmp	r4, #0
 8004ef4:	f000 80a1 	beq.w	800503a <_dtoa_r+0x442>
 8004ef8:	2f00      	cmp	r7, #0
 8004efa:	dd33      	ble.n	8004f64 <_dtoa_r+0x36c>
 8004efc:	4b86      	ldr	r3, [pc, #536]	@ (8005118 <_dtoa_r+0x520>)
 8004efe:	f007 020f 	and.w	r2, r7, #15
 8004f02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f06:	05f8      	lsls	r0, r7, #23
 8004f08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004f14:	d516      	bpl.n	8004f44 <_dtoa_r+0x34c>
 8004f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f1a:	4b80      	ldr	r3, [pc, #512]	@ (800511c <_dtoa_r+0x524>)
 8004f1c:	2603      	movs	r6, #3
 8004f1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f22:	f7fb fc03 	bl	800072c <__aeabi_ddiv>
 8004f26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f2a:	f004 040f 	and.w	r4, r4, #15
 8004f2e:	4d7b      	ldr	r5, [pc, #492]	@ (800511c <_dtoa_r+0x524>)
 8004f30:	b954      	cbnz	r4, 8004f48 <_dtoa_r+0x350>
 8004f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f3a:	f7fb fbf7 	bl	800072c <__aeabi_ddiv>
 8004f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f42:	e028      	b.n	8004f96 <_dtoa_r+0x39e>
 8004f44:	2602      	movs	r6, #2
 8004f46:	e7f2      	b.n	8004f2e <_dtoa_r+0x336>
 8004f48:	07e1      	lsls	r1, r4, #31
 8004f4a:	d508      	bpl.n	8004f5e <_dtoa_r+0x366>
 8004f4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f54:	f7fb fac0 	bl	80004d8 <__aeabi_dmul>
 8004f58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	1064      	asrs	r4, r4, #1
 8004f60:	3508      	adds	r5, #8
 8004f62:	e7e5      	b.n	8004f30 <_dtoa_r+0x338>
 8004f64:	f000 80d2 	beq.w	800510c <_dtoa_r+0x514>
 8004f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f6c:	427c      	negs	r4, r7
 8004f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005118 <_dtoa_r+0x520>)
 8004f70:	f004 020f 	and.w	r2, r4, #15
 8004f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f7fb faac 	bl	80004d8 <__aeabi_dmul>
 8004f80:	2602      	movs	r6, #2
 8004f82:	2300      	movs	r3, #0
 8004f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f88:	4d64      	ldr	r5, [pc, #400]	@ (800511c <_dtoa_r+0x524>)
 8004f8a:	1124      	asrs	r4, r4, #4
 8004f8c:	2c00      	cmp	r4, #0
 8004f8e:	f040 80b2 	bne.w	80050f6 <_dtoa_r+0x4fe>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1d3      	bne.n	8004f3e <_dtoa_r+0x346>
 8004f96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004f9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80b7 	beq.w	8005110 <_dtoa_r+0x518>
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	4b5d      	ldr	r3, [pc, #372]	@ (8005120 <_dtoa_r+0x528>)
 8004faa:	f7fb fd07 	bl	80009bc <__aeabi_dcmplt>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	f000 80ae 	beq.w	8005110 <_dtoa_r+0x518>
 8004fb4:	9b07      	ldr	r3, [sp, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80aa 	beq.w	8005110 <_dtoa_r+0x518>
 8004fbc:	9b08      	ldr	r3, [sp, #32]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	dd37      	ble.n	8005032 <_dtoa_r+0x43a>
 8004fc2:	1e7b      	subs	r3, r7, #1
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4629      	mov	r1, r5
 8004fcc:	4b55      	ldr	r3, [pc, #340]	@ (8005124 <_dtoa_r+0x52c>)
 8004fce:	f7fb fa83 	bl	80004d8 <__aeabi_dmul>
 8004fd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fd6:	9c08      	ldr	r4, [sp, #32]
 8004fd8:	3601      	adds	r6, #1
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f7fb fa12 	bl	8000404 <__aeabi_i2d>
 8004fe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe4:	f7fb fa78 	bl	80004d8 <__aeabi_dmul>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	4b4f      	ldr	r3, [pc, #316]	@ (8005128 <_dtoa_r+0x530>)
 8004fec:	f7fb f8be 	bl	800016c <__adddf3>
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004ff6:	2c00      	cmp	r4, #0
 8004ff8:	f040 809a 	bne.w	8005130 <_dtoa_r+0x538>
 8004ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005000:	2200      	movs	r2, #0
 8005002:	4b4a      	ldr	r3, [pc, #296]	@ (800512c <_dtoa_r+0x534>)
 8005004:	f7fb f8b0 	bl	8000168 <__aeabi_dsub>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005010:	462a      	mov	r2, r5
 8005012:	4633      	mov	r3, r6
 8005014:	f7fb fcf0 	bl	80009f8 <__aeabi_dcmpgt>
 8005018:	2800      	cmp	r0, #0
 800501a:	f040 828e 	bne.w	800553a <_dtoa_r+0x942>
 800501e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005022:	462a      	mov	r2, r5
 8005024:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005028:	f7fb fcc8 	bl	80009bc <__aeabi_dcmplt>
 800502c:	2800      	cmp	r0, #0
 800502e:	f040 8127 	bne.w	8005280 <_dtoa_r+0x688>
 8005032:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005036:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800503a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800503c:	2b00      	cmp	r3, #0
 800503e:	f2c0 8163 	blt.w	8005308 <_dtoa_r+0x710>
 8005042:	2f0e      	cmp	r7, #14
 8005044:	f300 8160 	bgt.w	8005308 <_dtoa_r+0x710>
 8005048:	4b33      	ldr	r3, [pc, #204]	@ (8005118 <_dtoa_r+0x520>)
 800504a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800504e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005052:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005056:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005058:	2b00      	cmp	r3, #0
 800505a:	da03      	bge.n	8005064 <_dtoa_r+0x46c>
 800505c:	9b07      	ldr	r3, [sp, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f340 8100 	ble.w	8005264 <_dtoa_r+0x66c>
 8005064:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005068:	4656      	mov	r6, sl
 800506a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800506e:	4620      	mov	r0, r4
 8005070:	4629      	mov	r1, r5
 8005072:	f7fb fb5b 	bl	800072c <__aeabi_ddiv>
 8005076:	f7fb fcdf 	bl	8000a38 <__aeabi_d2iz>
 800507a:	4680      	mov	r8, r0
 800507c:	f7fb f9c2 	bl	8000404 <__aeabi_i2d>
 8005080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005084:	f7fb fa28 	bl	80004d8 <__aeabi_dmul>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4620      	mov	r0, r4
 800508e:	4629      	mov	r1, r5
 8005090:	f7fb f86a 	bl	8000168 <__aeabi_dsub>
 8005094:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005098:	9d07      	ldr	r5, [sp, #28]
 800509a:	f806 4b01 	strb.w	r4, [r6], #1
 800509e:	eba6 040a 	sub.w	r4, r6, sl
 80050a2:	42a5      	cmp	r5, r4
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	f040 8116 	bne.w	80052d8 <_dtoa_r+0x6e0>
 80050ac:	f7fb f85e 	bl	800016c <__adddf3>
 80050b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050b4:	4604      	mov	r4, r0
 80050b6:	460d      	mov	r5, r1
 80050b8:	f7fb fc9e 	bl	80009f8 <__aeabi_dcmpgt>
 80050bc:	2800      	cmp	r0, #0
 80050be:	f040 80f8 	bne.w	80052b2 <_dtoa_r+0x6ba>
 80050c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050c6:	4620      	mov	r0, r4
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7fb fc6d 	bl	80009a8 <__aeabi_dcmpeq>
 80050ce:	b118      	cbz	r0, 80050d8 <_dtoa_r+0x4e0>
 80050d0:	f018 0f01 	tst.w	r8, #1
 80050d4:	f040 80ed 	bne.w	80052b2 <_dtoa_r+0x6ba>
 80050d8:	4649      	mov	r1, r9
 80050da:	4658      	mov	r0, fp
 80050dc:	f000 fc92 	bl	8005a04 <_Bfree>
 80050e0:	2300      	movs	r3, #0
 80050e2:	7033      	strb	r3, [r6, #0]
 80050e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80050e6:	3701      	adds	r7, #1
 80050e8:	601f      	str	r7, [r3, #0]
 80050ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8320 	beq.w	8005732 <_dtoa_r+0xb3a>
 80050f2:	601e      	str	r6, [r3, #0]
 80050f4:	e31d      	b.n	8005732 <_dtoa_r+0xb3a>
 80050f6:	07e2      	lsls	r2, r4, #31
 80050f8:	d505      	bpl.n	8005106 <_dtoa_r+0x50e>
 80050fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050fe:	f7fb f9eb 	bl	80004d8 <__aeabi_dmul>
 8005102:	2301      	movs	r3, #1
 8005104:	3601      	adds	r6, #1
 8005106:	1064      	asrs	r4, r4, #1
 8005108:	3508      	adds	r5, #8
 800510a:	e73f      	b.n	8004f8c <_dtoa_r+0x394>
 800510c:	2602      	movs	r6, #2
 800510e:	e742      	b.n	8004f96 <_dtoa_r+0x39e>
 8005110:	9c07      	ldr	r4, [sp, #28]
 8005112:	9704      	str	r7, [sp, #16]
 8005114:	e761      	b.n	8004fda <_dtoa_r+0x3e2>
 8005116:	bf00      	nop
 8005118:	08008ce8 	.word	0x08008ce8
 800511c:	08008cc0 	.word	0x08008cc0
 8005120:	3ff00000 	.word	0x3ff00000
 8005124:	40240000 	.word	0x40240000
 8005128:	401c0000 	.word	0x401c0000
 800512c:	40140000 	.word	0x40140000
 8005130:	4b70      	ldr	r3, [pc, #448]	@ (80052f4 <_dtoa_r+0x6fc>)
 8005132:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005134:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005138:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800513c:	4454      	add	r4, sl
 800513e:	2900      	cmp	r1, #0
 8005140:	d045      	beq.n	80051ce <_dtoa_r+0x5d6>
 8005142:	2000      	movs	r0, #0
 8005144:	496c      	ldr	r1, [pc, #432]	@ (80052f8 <_dtoa_r+0x700>)
 8005146:	f7fb faf1 	bl	800072c <__aeabi_ddiv>
 800514a:	4633      	mov	r3, r6
 800514c:	462a      	mov	r2, r5
 800514e:	f7fb f80b 	bl	8000168 <__aeabi_dsub>
 8005152:	4656      	mov	r6, sl
 8005154:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800515c:	f7fb fc6c 	bl	8000a38 <__aeabi_d2iz>
 8005160:	4605      	mov	r5, r0
 8005162:	f7fb f94f 	bl	8000404 <__aeabi_i2d>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800516e:	f7fa fffb 	bl	8000168 <__aeabi_dsub>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	3530      	adds	r5, #48	@ 0x30
 8005178:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800517c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005180:	f806 5b01 	strb.w	r5, [r6], #1
 8005184:	f7fb fc1a 	bl	80009bc <__aeabi_dcmplt>
 8005188:	2800      	cmp	r0, #0
 800518a:	d163      	bne.n	8005254 <_dtoa_r+0x65c>
 800518c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005190:	2000      	movs	r0, #0
 8005192:	495a      	ldr	r1, [pc, #360]	@ (80052fc <_dtoa_r+0x704>)
 8005194:	f7fa ffe8 	bl	8000168 <__aeabi_dsub>
 8005198:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800519c:	f7fb fc0e 	bl	80009bc <__aeabi_dcmplt>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	f040 8087 	bne.w	80052b4 <_dtoa_r+0x6bc>
 80051a6:	42a6      	cmp	r6, r4
 80051a8:	f43f af43 	beq.w	8005032 <_dtoa_r+0x43a>
 80051ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80051b0:	2200      	movs	r2, #0
 80051b2:	4b53      	ldr	r3, [pc, #332]	@ (8005300 <_dtoa_r+0x708>)
 80051b4:	f7fb f990 	bl	80004d8 <__aeabi_dmul>
 80051b8:	2200      	movs	r2, #0
 80051ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005300 <_dtoa_r+0x708>)
 80051c4:	f7fb f988 	bl	80004d8 <__aeabi_dmul>
 80051c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051cc:	e7c4      	b.n	8005158 <_dtoa_r+0x560>
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	f7fb f981 	bl	80004d8 <__aeabi_dmul>
 80051d6:	4656      	mov	r6, sl
 80051d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051dc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80051de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051e2:	f7fb fc29 	bl	8000a38 <__aeabi_d2iz>
 80051e6:	4605      	mov	r5, r0
 80051e8:	f7fb f90c 	bl	8000404 <__aeabi_i2d>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051f4:	f7fa ffb8 	bl	8000168 <__aeabi_dsub>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	3530      	adds	r5, #48	@ 0x30
 80051fe:	f806 5b01 	strb.w	r5, [r6], #1
 8005202:	42a6      	cmp	r6, r4
 8005204:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	d124      	bne.n	8005258 <_dtoa_r+0x660>
 800520e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005212:	4b39      	ldr	r3, [pc, #228]	@ (80052f8 <_dtoa_r+0x700>)
 8005214:	f7fa ffaa 	bl	800016c <__adddf3>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005220:	f7fb fbea 	bl	80009f8 <__aeabi_dcmpgt>
 8005224:	2800      	cmp	r0, #0
 8005226:	d145      	bne.n	80052b4 <_dtoa_r+0x6bc>
 8005228:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800522c:	2000      	movs	r0, #0
 800522e:	4932      	ldr	r1, [pc, #200]	@ (80052f8 <_dtoa_r+0x700>)
 8005230:	f7fa ff9a 	bl	8000168 <__aeabi_dsub>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800523c:	f7fb fbbe 	bl	80009bc <__aeabi_dcmplt>
 8005240:	2800      	cmp	r0, #0
 8005242:	f43f aef6 	beq.w	8005032 <_dtoa_r+0x43a>
 8005246:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005248:	1e73      	subs	r3, r6, #1
 800524a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800524c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005250:	2b30      	cmp	r3, #48	@ 0x30
 8005252:	d0f8      	beq.n	8005246 <_dtoa_r+0x64e>
 8005254:	9f04      	ldr	r7, [sp, #16]
 8005256:	e73f      	b.n	80050d8 <_dtoa_r+0x4e0>
 8005258:	4b29      	ldr	r3, [pc, #164]	@ (8005300 <_dtoa_r+0x708>)
 800525a:	f7fb f93d 	bl	80004d8 <__aeabi_dmul>
 800525e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005262:	e7bc      	b.n	80051de <_dtoa_r+0x5e6>
 8005264:	d10c      	bne.n	8005280 <_dtoa_r+0x688>
 8005266:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800526a:	2200      	movs	r2, #0
 800526c:	4b25      	ldr	r3, [pc, #148]	@ (8005304 <_dtoa_r+0x70c>)
 800526e:	f7fb f933 	bl	80004d8 <__aeabi_dmul>
 8005272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005276:	f7fb fbb5 	bl	80009e4 <__aeabi_dcmpge>
 800527a:	2800      	cmp	r0, #0
 800527c:	f000 815b 	beq.w	8005536 <_dtoa_r+0x93e>
 8005280:	2400      	movs	r4, #0
 8005282:	4625      	mov	r5, r4
 8005284:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005286:	4656      	mov	r6, sl
 8005288:	43db      	mvns	r3, r3
 800528a:	9304      	str	r3, [sp, #16]
 800528c:	2700      	movs	r7, #0
 800528e:	4621      	mov	r1, r4
 8005290:	4658      	mov	r0, fp
 8005292:	f000 fbb7 	bl	8005a04 <_Bfree>
 8005296:	2d00      	cmp	r5, #0
 8005298:	d0dc      	beq.n	8005254 <_dtoa_r+0x65c>
 800529a:	b12f      	cbz	r7, 80052a8 <_dtoa_r+0x6b0>
 800529c:	42af      	cmp	r7, r5
 800529e:	d003      	beq.n	80052a8 <_dtoa_r+0x6b0>
 80052a0:	4639      	mov	r1, r7
 80052a2:	4658      	mov	r0, fp
 80052a4:	f000 fbae 	bl	8005a04 <_Bfree>
 80052a8:	4629      	mov	r1, r5
 80052aa:	4658      	mov	r0, fp
 80052ac:	f000 fbaa 	bl	8005a04 <_Bfree>
 80052b0:	e7d0      	b.n	8005254 <_dtoa_r+0x65c>
 80052b2:	9704      	str	r7, [sp, #16]
 80052b4:	4633      	mov	r3, r6
 80052b6:	461e      	mov	r6, r3
 80052b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052bc:	2a39      	cmp	r2, #57	@ 0x39
 80052be:	d107      	bne.n	80052d0 <_dtoa_r+0x6d8>
 80052c0:	459a      	cmp	sl, r3
 80052c2:	d1f8      	bne.n	80052b6 <_dtoa_r+0x6be>
 80052c4:	9a04      	ldr	r2, [sp, #16]
 80052c6:	3201      	adds	r2, #1
 80052c8:	9204      	str	r2, [sp, #16]
 80052ca:	2230      	movs	r2, #48	@ 0x30
 80052cc:	f88a 2000 	strb.w	r2, [sl]
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	3201      	adds	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e7bd      	b.n	8005254 <_dtoa_r+0x65c>
 80052d8:	2200      	movs	r2, #0
 80052da:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <_dtoa_r+0x708>)
 80052dc:	f7fb f8fc 	bl	80004d8 <__aeabi_dmul>
 80052e0:	2200      	movs	r2, #0
 80052e2:	2300      	movs	r3, #0
 80052e4:	4604      	mov	r4, r0
 80052e6:	460d      	mov	r5, r1
 80052e8:	f7fb fb5e 	bl	80009a8 <__aeabi_dcmpeq>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	f43f aebc 	beq.w	800506a <_dtoa_r+0x472>
 80052f2:	e6f1      	b.n	80050d8 <_dtoa_r+0x4e0>
 80052f4:	08008ce8 	.word	0x08008ce8
 80052f8:	3fe00000 	.word	0x3fe00000
 80052fc:	3ff00000 	.word	0x3ff00000
 8005300:	40240000 	.word	0x40240000
 8005304:	40140000 	.word	0x40140000
 8005308:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800530a:	2a00      	cmp	r2, #0
 800530c:	f000 80db 	beq.w	80054c6 <_dtoa_r+0x8ce>
 8005310:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005312:	2a01      	cmp	r2, #1
 8005314:	f300 80bf 	bgt.w	8005496 <_dtoa_r+0x89e>
 8005318:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800531a:	2a00      	cmp	r2, #0
 800531c:	f000 80b7 	beq.w	800548e <_dtoa_r+0x896>
 8005320:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005324:	4646      	mov	r6, r8
 8005326:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005328:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800532a:	2101      	movs	r1, #1
 800532c:	441a      	add	r2, r3
 800532e:	4658      	mov	r0, fp
 8005330:	4498      	add	r8, r3
 8005332:	9209      	str	r2, [sp, #36]	@ 0x24
 8005334:	f000 fc1a 	bl	8005b6c <__i2b>
 8005338:	4605      	mov	r5, r0
 800533a:	b15e      	cbz	r6, 8005354 <_dtoa_r+0x75c>
 800533c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	dd08      	ble.n	8005354 <_dtoa_r+0x75c>
 8005342:	42b3      	cmp	r3, r6
 8005344:	bfa8      	it	ge
 8005346:	4633      	movge	r3, r6
 8005348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800534a:	eba8 0803 	sub.w	r8, r8, r3
 800534e:	1af6      	subs	r6, r6, r3
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	9309      	str	r3, [sp, #36]	@ 0x24
 8005354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005356:	b1f3      	cbz	r3, 8005396 <_dtoa_r+0x79e>
 8005358:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80b7 	beq.w	80054ce <_dtoa_r+0x8d6>
 8005360:	b18c      	cbz	r4, 8005386 <_dtoa_r+0x78e>
 8005362:	4629      	mov	r1, r5
 8005364:	4622      	mov	r2, r4
 8005366:	4658      	mov	r0, fp
 8005368:	f000 fcbe 	bl	8005ce8 <__pow5mult>
 800536c:	464a      	mov	r2, r9
 800536e:	4601      	mov	r1, r0
 8005370:	4605      	mov	r5, r0
 8005372:	4658      	mov	r0, fp
 8005374:	f000 fc10 	bl	8005b98 <__multiply>
 8005378:	4649      	mov	r1, r9
 800537a:	9004      	str	r0, [sp, #16]
 800537c:	4658      	mov	r0, fp
 800537e:	f000 fb41 	bl	8005a04 <_Bfree>
 8005382:	9b04      	ldr	r3, [sp, #16]
 8005384:	4699      	mov	r9, r3
 8005386:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005388:	1b1a      	subs	r2, r3, r4
 800538a:	d004      	beq.n	8005396 <_dtoa_r+0x79e>
 800538c:	4649      	mov	r1, r9
 800538e:	4658      	mov	r0, fp
 8005390:	f000 fcaa 	bl	8005ce8 <__pow5mult>
 8005394:	4681      	mov	r9, r0
 8005396:	2101      	movs	r1, #1
 8005398:	4658      	mov	r0, fp
 800539a:	f000 fbe7 	bl	8005b6c <__i2b>
 800539e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053a0:	4604      	mov	r4, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 81c9 	beq.w	800573a <_dtoa_r+0xb42>
 80053a8:	461a      	mov	r2, r3
 80053aa:	4601      	mov	r1, r0
 80053ac:	4658      	mov	r0, fp
 80053ae:	f000 fc9b 	bl	8005ce8 <__pow5mult>
 80053b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053b4:	4604      	mov	r4, r0
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	f300 808f 	bgt.w	80054da <_dtoa_r+0x8e2>
 80053bc:	9b02      	ldr	r3, [sp, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f040 8087 	bne.w	80054d2 <_dtoa_r+0x8da>
 80053c4:	9b03      	ldr	r3, [sp, #12]
 80053c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f040 8083 	bne.w	80054d6 <_dtoa_r+0x8de>
 80053d0:	9b03      	ldr	r3, [sp, #12]
 80053d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053d6:	0d1b      	lsrs	r3, r3, #20
 80053d8:	051b      	lsls	r3, r3, #20
 80053da:	b12b      	cbz	r3, 80053e8 <_dtoa_r+0x7f0>
 80053dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053de:	f108 0801 	add.w	r8, r8, #1
 80053e2:	3301      	adds	r3, #1
 80053e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80053e6:	2301      	movs	r3, #1
 80053e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80053ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 81aa 	beq.w	8005746 <_dtoa_r+0xb4e>
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80053f8:	6918      	ldr	r0, [r3, #16]
 80053fa:	f000 fb6b 	bl	8005ad4 <__hi0bits>
 80053fe:	f1c0 0020 	rsb	r0, r0, #32
 8005402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005404:	4418      	add	r0, r3
 8005406:	f010 001f 	ands.w	r0, r0, #31
 800540a:	d071      	beq.n	80054f0 <_dtoa_r+0x8f8>
 800540c:	f1c0 0320 	rsb	r3, r0, #32
 8005410:	2b04      	cmp	r3, #4
 8005412:	dd65      	ble.n	80054e0 <_dtoa_r+0x8e8>
 8005414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005416:	f1c0 001c 	rsb	r0, r0, #28
 800541a:	4403      	add	r3, r0
 800541c:	4480      	add	r8, r0
 800541e:	4406      	add	r6, r0
 8005420:	9309      	str	r3, [sp, #36]	@ 0x24
 8005422:	f1b8 0f00 	cmp.w	r8, #0
 8005426:	dd05      	ble.n	8005434 <_dtoa_r+0x83c>
 8005428:	4649      	mov	r1, r9
 800542a:	4642      	mov	r2, r8
 800542c:	4658      	mov	r0, fp
 800542e:	f000 fcb5 	bl	8005d9c <__lshift>
 8005432:	4681      	mov	r9, r0
 8005434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	dd05      	ble.n	8005446 <_dtoa_r+0x84e>
 800543a:	4621      	mov	r1, r4
 800543c:	461a      	mov	r2, r3
 800543e:	4658      	mov	r0, fp
 8005440:	f000 fcac 	bl	8005d9c <__lshift>
 8005444:	4604      	mov	r4, r0
 8005446:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d053      	beq.n	80054f4 <_dtoa_r+0x8fc>
 800544c:	4621      	mov	r1, r4
 800544e:	4648      	mov	r0, r9
 8005450:	f000 fd10 	bl	8005e74 <__mcmp>
 8005454:	2800      	cmp	r0, #0
 8005456:	da4d      	bge.n	80054f4 <_dtoa_r+0x8fc>
 8005458:	1e7b      	subs	r3, r7, #1
 800545a:	4649      	mov	r1, r9
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	220a      	movs	r2, #10
 8005460:	2300      	movs	r3, #0
 8005462:	4658      	mov	r0, fp
 8005464:	f000 faf0 	bl	8005a48 <__multadd>
 8005468:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800546a:	4681      	mov	r9, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 816c 	beq.w	800574a <_dtoa_r+0xb52>
 8005472:	2300      	movs	r3, #0
 8005474:	4629      	mov	r1, r5
 8005476:	220a      	movs	r2, #10
 8005478:	4658      	mov	r0, fp
 800547a:	f000 fae5 	bl	8005a48 <__multadd>
 800547e:	9b08      	ldr	r3, [sp, #32]
 8005480:	4605      	mov	r5, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	dc61      	bgt.n	800554a <_dtoa_r+0x952>
 8005486:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005488:	2b02      	cmp	r3, #2
 800548a:	dc3b      	bgt.n	8005504 <_dtoa_r+0x90c>
 800548c:	e05d      	b.n	800554a <_dtoa_r+0x952>
 800548e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005490:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005494:	e746      	b.n	8005324 <_dtoa_r+0x72c>
 8005496:	9b07      	ldr	r3, [sp, #28]
 8005498:	1e5c      	subs	r4, r3, #1
 800549a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800549c:	42a3      	cmp	r3, r4
 800549e:	bfbf      	itttt	lt
 80054a0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80054a2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80054a4:	1ae3      	sublt	r3, r4, r3
 80054a6:	18d2      	addlt	r2, r2, r3
 80054a8:	bfa8      	it	ge
 80054aa:	1b1c      	subge	r4, r3, r4
 80054ac:	9b07      	ldr	r3, [sp, #28]
 80054ae:	bfbe      	ittt	lt
 80054b0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80054b2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80054b4:	2400      	movlt	r4, #0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bfb5      	itete	lt
 80054ba:	eba8 0603 	sublt.w	r6, r8, r3
 80054be:	4646      	movge	r6, r8
 80054c0:	2300      	movlt	r3, #0
 80054c2:	9b07      	ldrge	r3, [sp, #28]
 80054c4:	e730      	b.n	8005328 <_dtoa_r+0x730>
 80054c6:	4646      	mov	r6, r8
 80054c8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80054ca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80054cc:	e735      	b.n	800533a <_dtoa_r+0x742>
 80054ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054d0:	e75c      	b.n	800538c <_dtoa_r+0x794>
 80054d2:	2300      	movs	r3, #0
 80054d4:	e788      	b.n	80053e8 <_dtoa_r+0x7f0>
 80054d6:	9b02      	ldr	r3, [sp, #8]
 80054d8:	e786      	b.n	80053e8 <_dtoa_r+0x7f0>
 80054da:	2300      	movs	r3, #0
 80054dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80054de:	e788      	b.n	80053f2 <_dtoa_r+0x7fa>
 80054e0:	d09f      	beq.n	8005422 <_dtoa_r+0x82a>
 80054e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054e4:	331c      	adds	r3, #28
 80054e6:	441a      	add	r2, r3
 80054e8:	4498      	add	r8, r3
 80054ea:	441e      	add	r6, r3
 80054ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80054ee:	e798      	b.n	8005422 <_dtoa_r+0x82a>
 80054f0:	4603      	mov	r3, r0
 80054f2:	e7f6      	b.n	80054e2 <_dtoa_r+0x8ea>
 80054f4:	9b07      	ldr	r3, [sp, #28]
 80054f6:	9704      	str	r7, [sp, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dc20      	bgt.n	800553e <_dtoa_r+0x946>
 80054fc:	9308      	str	r3, [sp, #32]
 80054fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005500:	2b02      	cmp	r3, #2
 8005502:	dd1e      	ble.n	8005542 <_dtoa_r+0x94a>
 8005504:	9b08      	ldr	r3, [sp, #32]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f47f aebc 	bne.w	8005284 <_dtoa_r+0x68c>
 800550c:	4621      	mov	r1, r4
 800550e:	2205      	movs	r2, #5
 8005510:	4658      	mov	r0, fp
 8005512:	f000 fa99 	bl	8005a48 <__multadd>
 8005516:	4601      	mov	r1, r0
 8005518:	4604      	mov	r4, r0
 800551a:	4648      	mov	r0, r9
 800551c:	f000 fcaa 	bl	8005e74 <__mcmp>
 8005520:	2800      	cmp	r0, #0
 8005522:	f77f aeaf 	ble.w	8005284 <_dtoa_r+0x68c>
 8005526:	2331      	movs	r3, #49	@ 0x31
 8005528:	4656      	mov	r6, sl
 800552a:	f806 3b01 	strb.w	r3, [r6], #1
 800552e:	9b04      	ldr	r3, [sp, #16]
 8005530:	3301      	adds	r3, #1
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	e6aa      	b.n	800528c <_dtoa_r+0x694>
 8005536:	9c07      	ldr	r4, [sp, #28]
 8005538:	9704      	str	r7, [sp, #16]
 800553a:	4625      	mov	r5, r4
 800553c:	e7f3      	b.n	8005526 <_dtoa_r+0x92e>
 800553e:	9b07      	ldr	r3, [sp, #28]
 8005540:	9308      	str	r3, [sp, #32]
 8005542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8104 	beq.w	8005752 <_dtoa_r+0xb5a>
 800554a:	2e00      	cmp	r6, #0
 800554c:	dd05      	ble.n	800555a <_dtoa_r+0x962>
 800554e:	4629      	mov	r1, r5
 8005550:	4632      	mov	r2, r6
 8005552:	4658      	mov	r0, fp
 8005554:	f000 fc22 	bl	8005d9c <__lshift>
 8005558:	4605      	mov	r5, r0
 800555a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800555c:	2b00      	cmp	r3, #0
 800555e:	d05a      	beq.n	8005616 <_dtoa_r+0xa1e>
 8005560:	4658      	mov	r0, fp
 8005562:	6869      	ldr	r1, [r5, #4]
 8005564:	f000 fa0e 	bl	8005984 <_Balloc>
 8005568:	4606      	mov	r6, r0
 800556a:	b928      	cbnz	r0, 8005578 <_dtoa_r+0x980>
 800556c:	4602      	mov	r2, r0
 800556e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005572:	4b83      	ldr	r3, [pc, #524]	@ (8005780 <_dtoa_r+0xb88>)
 8005574:	f7ff bb54 	b.w	8004c20 <_dtoa_r+0x28>
 8005578:	692a      	ldr	r2, [r5, #16]
 800557a:	f105 010c 	add.w	r1, r5, #12
 800557e:	3202      	adds	r2, #2
 8005580:	0092      	lsls	r2, r2, #2
 8005582:	300c      	adds	r0, #12
 8005584:	f7ff fa9f 	bl	8004ac6 <memcpy>
 8005588:	2201      	movs	r2, #1
 800558a:	4631      	mov	r1, r6
 800558c:	4658      	mov	r0, fp
 800558e:	f000 fc05 	bl	8005d9c <__lshift>
 8005592:	462f      	mov	r7, r5
 8005594:	4605      	mov	r5, r0
 8005596:	f10a 0301 	add.w	r3, sl, #1
 800559a:	9307      	str	r3, [sp, #28]
 800559c:	9b08      	ldr	r3, [sp, #32]
 800559e:	4453      	add	r3, sl
 80055a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055a2:	9b02      	ldr	r3, [sp, #8]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80055aa:	9b07      	ldr	r3, [sp, #28]
 80055ac:	4621      	mov	r1, r4
 80055ae:	3b01      	subs	r3, #1
 80055b0:	4648      	mov	r0, r9
 80055b2:	9302      	str	r3, [sp, #8]
 80055b4:	f7ff fa95 	bl	8004ae2 <quorem>
 80055b8:	4639      	mov	r1, r7
 80055ba:	9008      	str	r0, [sp, #32]
 80055bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80055c0:	4648      	mov	r0, r9
 80055c2:	f000 fc57 	bl	8005e74 <__mcmp>
 80055c6:	462a      	mov	r2, r5
 80055c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80055ca:	4621      	mov	r1, r4
 80055cc:	4658      	mov	r0, fp
 80055ce:	f000 fc6d 	bl	8005eac <__mdiff>
 80055d2:	68c2      	ldr	r2, [r0, #12]
 80055d4:	4606      	mov	r6, r0
 80055d6:	bb02      	cbnz	r2, 800561a <_dtoa_r+0xa22>
 80055d8:	4601      	mov	r1, r0
 80055da:	4648      	mov	r0, r9
 80055dc:	f000 fc4a 	bl	8005e74 <__mcmp>
 80055e0:	4602      	mov	r2, r0
 80055e2:	4631      	mov	r1, r6
 80055e4:	4658      	mov	r0, fp
 80055e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80055e8:	f000 fa0c 	bl	8005a04 <_Bfree>
 80055ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80055f0:	9e07      	ldr	r6, [sp, #28]
 80055f2:	ea43 0102 	orr.w	r1, r3, r2
 80055f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055f8:	4319      	orrs	r1, r3
 80055fa:	d110      	bne.n	800561e <_dtoa_r+0xa26>
 80055fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005600:	d029      	beq.n	8005656 <_dtoa_r+0xa5e>
 8005602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	dd02      	ble.n	800560e <_dtoa_r+0xa16>
 8005608:	9b08      	ldr	r3, [sp, #32]
 800560a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800560e:	9b02      	ldr	r3, [sp, #8]
 8005610:	f883 8000 	strb.w	r8, [r3]
 8005614:	e63b      	b.n	800528e <_dtoa_r+0x696>
 8005616:	4628      	mov	r0, r5
 8005618:	e7bb      	b.n	8005592 <_dtoa_r+0x99a>
 800561a:	2201      	movs	r2, #1
 800561c:	e7e1      	b.n	80055e2 <_dtoa_r+0x9ea>
 800561e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005620:	2b00      	cmp	r3, #0
 8005622:	db04      	blt.n	800562e <_dtoa_r+0xa36>
 8005624:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005626:	430b      	orrs	r3, r1
 8005628:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800562a:	430b      	orrs	r3, r1
 800562c:	d120      	bne.n	8005670 <_dtoa_r+0xa78>
 800562e:	2a00      	cmp	r2, #0
 8005630:	dded      	ble.n	800560e <_dtoa_r+0xa16>
 8005632:	4649      	mov	r1, r9
 8005634:	2201      	movs	r2, #1
 8005636:	4658      	mov	r0, fp
 8005638:	f000 fbb0 	bl	8005d9c <__lshift>
 800563c:	4621      	mov	r1, r4
 800563e:	4681      	mov	r9, r0
 8005640:	f000 fc18 	bl	8005e74 <__mcmp>
 8005644:	2800      	cmp	r0, #0
 8005646:	dc03      	bgt.n	8005650 <_dtoa_r+0xa58>
 8005648:	d1e1      	bne.n	800560e <_dtoa_r+0xa16>
 800564a:	f018 0f01 	tst.w	r8, #1
 800564e:	d0de      	beq.n	800560e <_dtoa_r+0xa16>
 8005650:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005654:	d1d8      	bne.n	8005608 <_dtoa_r+0xa10>
 8005656:	2339      	movs	r3, #57	@ 0x39
 8005658:	9a02      	ldr	r2, [sp, #8]
 800565a:	7013      	strb	r3, [r2, #0]
 800565c:	4633      	mov	r3, r6
 800565e:	461e      	mov	r6, r3
 8005660:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005664:	3b01      	subs	r3, #1
 8005666:	2a39      	cmp	r2, #57	@ 0x39
 8005668:	d052      	beq.n	8005710 <_dtoa_r+0xb18>
 800566a:	3201      	adds	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e60e      	b.n	800528e <_dtoa_r+0x696>
 8005670:	2a00      	cmp	r2, #0
 8005672:	dd07      	ble.n	8005684 <_dtoa_r+0xa8c>
 8005674:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005678:	d0ed      	beq.n	8005656 <_dtoa_r+0xa5e>
 800567a:	9a02      	ldr	r2, [sp, #8]
 800567c:	f108 0301 	add.w	r3, r8, #1
 8005680:	7013      	strb	r3, [r2, #0]
 8005682:	e604      	b.n	800528e <_dtoa_r+0x696>
 8005684:	9b07      	ldr	r3, [sp, #28]
 8005686:	9a07      	ldr	r2, [sp, #28]
 8005688:	f803 8c01 	strb.w	r8, [r3, #-1]
 800568c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800568e:	4293      	cmp	r3, r2
 8005690:	d028      	beq.n	80056e4 <_dtoa_r+0xaec>
 8005692:	4649      	mov	r1, r9
 8005694:	2300      	movs	r3, #0
 8005696:	220a      	movs	r2, #10
 8005698:	4658      	mov	r0, fp
 800569a:	f000 f9d5 	bl	8005a48 <__multadd>
 800569e:	42af      	cmp	r7, r5
 80056a0:	4681      	mov	r9, r0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	f04f 020a 	mov.w	r2, #10
 80056aa:	4639      	mov	r1, r7
 80056ac:	4658      	mov	r0, fp
 80056ae:	d107      	bne.n	80056c0 <_dtoa_r+0xac8>
 80056b0:	f000 f9ca 	bl	8005a48 <__multadd>
 80056b4:	4607      	mov	r7, r0
 80056b6:	4605      	mov	r5, r0
 80056b8:	9b07      	ldr	r3, [sp, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	9307      	str	r3, [sp, #28]
 80056be:	e774      	b.n	80055aa <_dtoa_r+0x9b2>
 80056c0:	f000 f9c2 	bl	8005a48 <__multadd>
 80056c4:	4629      	mov	r1, r5
 80056c6:	4607      	mov	r7, r0
 80056c8:	2300      	movs	r3, #0
 80056ca:	220a      	movs	r2, #10
 80056cc:	4658      	mov	r0, fp
 80056ce:	f000 f9bb 	bl	8005a48 <__multadd>
 80056d2:	4605      	mov	r5, r0
 80056d4:	e7f0      	b.n	80056b8 <_dtoa_r+0xac0>
 80056d6:	9b08      	ldr	r3, [sp, #32]
 80056d8:	2700      	movs	r7, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bfcc      	ite	gt
 80056de:	461e      	movgt	r6, r3
 80056e0:	2601      	movle	r6, #1
 80056e2:	4456      	add	r6, sl
 80056e4:	4649      	mov	r1, r9
 80056e6:	2201      	movs	r2, #1
 80056e8:	4658      	mov	r0, fp
 80056ea:	f000 fb57 	bl	8005d9c <__lshift>
 80056ee:	4621      	mov	r1, r4
 80056f0:	4681      	mov	r9, r0
 80056f2:	f000 fbbf 	bl	8005e74 <__mcmp>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	dcb0      	bgt.n	800565c <_dtoa_r+0xa64>
 80056fa:	d102      	bne.n	8005702 <_dtoa_r+0xb0a>
 80056fc:	f018 0f01 	tst.w	r8, #1
 8005700:	d1ac      	bne.n	800565c <_dtoa_r+0xa64>
 8005702:	4633      	mov	r3, r6
 8005704:	461e      	mov	r6, r3
 8005706:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800570a:	2a30      	cmp	r2, #48	@ 0x30
 800570c:	d0fa      	beq.n	8005704 <_dtoa_r+0xb0c>
 800570e:	e5be      	b.n	800528e <_dtoa_r+0x696>
 8005710:	459a      	cmp	sl, r3
 8005712:	d1a4      	bne.n	800565e <_dtoa_r+0xa66>
 8005714:	9b04      	ldr	r3, [sp, #16]
 8005716:	3301      	adds	r3, #1
 8005718:	9304      	str	r3, [sp, #16]
 800571a:	2331      	movs	r3, #49	@ 0x31
 800571c:	f88a 3000 	strb.w	r3, [sl]
 8005720:	e5b5      	b.n	800528e <_dtoa_r+0x696>
 8005722:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005724:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005784 <_dtoa_r+0xb8c>
 8005728:	b11b      	cbz	r3, 8005732 <_dtoa_r+0xb3a>
 800572a:	f10a 0308 	add.w	r3, sl, #8
 800572e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4650      	mov	r0, sl
 8005734:	b017      	add	sp, #92	@ 0x5c
 8005736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800573c:	2b01      	cmp	r3, #1
 800573e:	f77f ae3d 	ble.w	80053bc <_dtoa_r+0x7c4>
 8005742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005744:	930a      	str	r3, [sp, #40]	@ 0x28
 8005746:	2001      	movs	r0, #1
 8005748:	e65b      	b.n	8005402 <_dtoa_r+0x80a>
 800574a:	9b08      	ldr	r3, [sp, #32]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f77f aed6 	ble.w	80054fe <_dtoa_r+0x906>
 8005752:	4656      	mov	r6, sl
 8005754:	4621      	mov	r1, r4
 8005756:	4648      	mov	r0, r9
 8005758:	f7ff f9c3 	bl	8004ae2 <quorem>
 800575c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005760:	9b08      	ldr	r3, [sp, #32]
 8005762:	f806 8b01 	strb.w	r8, [r6], #1
 8005766:	eba6 020a 	sub.w	r2, r6, sl
 800576a:	4293      	cmp	r3, r2
 800576c:	ddb3      	ble.n	80056d6 <_dtoa_r+0xade>
 800576e:	4649      	mov	r1, r9
 8005770:	2300      	movs	r3, #0
 8005772:	220a      	movs	r2, #10
 8005774:	4658      	mov	r0, fp
 8005776:	f000 f967 	bl	8005a48 <__multadd>
 800577a:	4681      	mov	r9, r0
 800577c:	e7ea      	b.n	8005754 <_dtoa_r+0xb5c>
 800577e:	bf00      	nop
 8005780:	08008c48 	.word	0x08008c48
 8005784:	08008bcc 	.word	0x08008bcc

08005788 <_free_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4605      	mov	r5, r0
 800578c:	2900      	cmp	r1, #0
 800578e:	d040      	beq.n	8005812 <_free_r+0x8a>
 8005790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005794:	1f0c      	subs	r4, r1, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	bfb8      	it	lt
 800579a:	18e4      	addlt	r4, r4, r3
 800579c:	f000 f8e6 	bl	800596c <__malloc_lock>
 80057a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005814 <_free_r+0x8c>)
 80057a2:	6813      	ldr	r3, [r2, #0]
 80057a4:	b933      	cbnz	r3, 80057b4 <_free_r+0x2c>
 80057a6:	6063      	str	r3, [r4, #4]
 80057a8:	6014      	str	r4, [r2, #0]
 80057aa:	4628      	mov	r0, r5
 80057ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057b0:	f000 b8e2 	b.w	8005978 <__malloc_unlock>
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d908      	bls.n	80057ca <_free_r+0x42>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	1821      	adds	r1, r4, r0
 80057bc:	428b      	cmp	r3, r1
 80057be:	bf01      	itttt	eq
 80057c0:	6819      	ldreq	r1, [r3, #0]
 80057c2:	685b      	ldreq	r3, [r3, #4]
 80057c4:	1809      	addeq	r1, r1, r0
 80057c6:	6021      	streq	r1, [r4, #0]
 80057c8:	e7ed      	b.n	80057a6 <_free_r+0x1e>
 80057ca:	461a      	mov	r2, r3
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	b10b      	cbz	r3, 80057d4 <_free_r+0x4c>
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	d9fa      	bls.n	80057ca <_free_r+0x42>
 80057d4:	6811      	ldr	r1, [r2, #0]
 80057d6:	1850      	adds	r0, r2, r1
 80057d8:	42a0      	cmp	r0, r4
 80057da:	d10b      	bne.n	80057f4 <_free_r+0x6c>
 80057dc:	6820      	ldr	r0, [r4, #0]
 80057de:	4401      	add	r1, r0
 80057e0:	1850      	adds	r0, r2, r1
 80057e2:	4283      	cmp	r3, r0
 80057e4:	6011      	str	r1, [r2, #0]
 80057e6:	d1e0      	bne.n	80057aa <_free_r+0x22>
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	4408      	add	r0, r1
 80057ee:	6010      	str	r0, [r2, #0]
 80057f0:	6053      	str	r3, [r2, #4]
 80057f2:	e7da      	b.n	80057aa <_free_r+0x22>
 80057f4:	d902      	bls.n	80057fc <_free_r+0x74>
 80057f6:	230c      	movs	r3, #12
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	e7d6      	b.n	80057aa <_free_r+0x22>
 80057fc:	6820      	ldr	r0, [r4, #0]
 80057fe:	1821      	adds	r1, r4, r0
 8005800:	428b      	cmp	r3, r1
 8005802:	bf01      	itttt	eq
 8005804:	6819      	ldreq	r1, [r3, #0]
 8005806:	685b      	ldreq	r3, [r3, #4]
 8005808:	1809      	addeq	r1, r1, r0
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	6063      	str	r3, [r4, #4]
 800580e:	6054      	str	r4, [r2, #4]
 8005810:	e7cb      	b.n	80057aa <_free_r+0x22>
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	200008ac 	.word	0x200008ac

08005818 <malloc>:
 8005818:	4b02      	ldr	r3, [pc, #8]	@ (8005824 <malloc+0xc>)
 800581a:	4601      	mov	r1, r0
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	f000 b825 	b.w	800586c <_malloc_r>
 8005822:	bf00      	nop
 8005824:	200000b8 	.word	0x200000b8

08005828 <sbrk_aligned>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	4e0f      	ldr	r6, [pc, #60]	@ (8005868 <sbrk_aligned+0x40>)
 800582c:	460c      	mov	r4, r1
 800582e:	6831      	ldr	r1, [r6, #0]
 8005830:	4605      	mov	r5, r0
 8005832:	b911      	cbnz	r1, 800583a <sbrk_aligned+0x12>
 8005834:	f000 fe26 	bl	8006484 <_sbrk_r>
 8005838:	6030      	str	r0, [r6, #0]
 800583a:	4621      	mov	r1, r4
 800583c:	4628      	mov	r0, r5
 800583e:	f000 fe21 	bl	8006484 <_sbrk_r>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	d103      	bne.n	800584e <sbrk_aligned+0x26>
 8005846:	f04f 34ff 	mov.w	r4, #4294967295
 800584a:	4620      	mov	r0, r4
 800584c:	bd70      	pop	{r4, r5, r6, pc}
 800584e:	1cc4      	adds	r4, r0, #3
 8005850:	f024 0403 	bic.w	r4, r4, #3
 8005854:	42a0      	cmp	r0, r4
 8005856:	d0f8      	beq.n	800584a <sbrk_aligned+0x22>
 8005858:	1a21      	subs	r1, r4, r0
 800585a:	4628      	mov	r0, r5
 800585c:	f000 fe12 	bl	8006484 <_sbrk_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d1f2      	bne.n	800584a <sbrk_aligned+0x22>
 8005864:	e7ef      	b.n	8005846 <sbrk_aligned+0x1e>
 8005866:	bf00      	nop
 8005868:	200008a8 	.word	0x200008a8

0800586c <_malloc_r>:
 800586c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005870:	1ccd      	adds	r5, r1, #3
 8005872:	f025 0503 	bic.w	r5, r5, #3
 8005876:	3508      	adds	r5, #8
 8005878:	2d0c      	cmp	r5, #12
 800587a:	bf38      	it	cc
 800587c:	250c      	movcc	r5, #12
 800587e:	2d00      	cmp	r5, #0
 8005880:	4606      	mov	r6, r0
 8005882:	db01      	blt.n	8005888 <_malloc_r+0x1c>
 8005884:	42a9      	cmp	r1, r5
 8005886:	d904      	bls.n	8005892 <_malloc_r+0x26>
 8005888:	230c      	movs	r3, #12
 800588a:	6033      	str	r3, [r6, #0]
 800588c:	2000      	movs	r0, #0
 800588e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005892:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005968 <_malloc_r+0xfc>
 8005896:	f000 f869 	bl	800596c <__malloc_lock>
 800589a:	f8d8 3000 	ldr.w	r3, [r8]
 800589e:	461c      	mov	r4, r3
 80058a0:	bb44      	cbnz	r4, 80058f4 <_malloc_r+0x88>
 80058a2:	4629      	mov	r1, r5
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7ff ffbf 	bl	8005828 <sbrk_aligned>
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	4604      	mov	r4, r0
 80058ae:	d158      	bne.n	8005962 <_malloc_r+0xf6>
 80058b0:	f8d8 4000 	ldr.w	r4, [r8]
 80058b4:	4627      	mov	r7, r4
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	d143      	bne.n	8005942 <_malloc_r+0xd6>
 80058ba:	2c00      	cmp	r4, #0
 80058bc:	d04b      	beq.n	8005956 <_malloc_r+0xea>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	4639      	mov	r1, r7
 80058c2:	4630      	mov	r0, r6
 80058c4:	eb04 0903 	add.w	r9, r4, r3
 80058c8:	f000 fddc 	bl	8006484 <_sbrk_r>
 80058cc:	4581      	cmp	r9, r0
 80058ce:	d142      	bne.n	8005956 <_malloc_r+0xea>
 80058d0:	6821      	ldr	r1, [r4, #0]
 80058d2:	4630      	mov	r0, r6
 80058d4:	1a6d      	subs	r5, r5, r1
 80058d6:	4629      	mov	r1, r5
 80058d8:	f7ff ffa6 	bl	8005828 <sbrk_aligned>
 80058dc:	3001      	adds	r0, #1
 80058de:	d03a      	beq.n	8005956 <_malloc_r+0xea>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	442b      	add	r3, r5
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	f8d8 3000 	ldr.w	r3, [r8]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	bb62      	cbnz	r2, 8005948 <_malloc_r+0xdc>
 80058ee:	f8c8 7000 	str.w	r7, [r8]
 80058f2:	e00f      	b.n	8005914 <_malloc_r+0xa8>
 80058f4:	6822      	ldr	r2, [r4, #0]
 80058f6:	1b52      	subs	r2, r2, r5
 80058f8:	d420      	bmi.n	800593c <_malloc_r+0xd0>
 80058fa:	2a0b      	cmp	r2, #11
 80058fc:	d917      	bls.n	800592e <_malloc_r+0xc2>
 80058fe:	1961      	adds	r1, r4, r5
 8005900:	42a3      	cmp	r3, r4
 8005902:	6025      	str	r5, [r4, #0]
 8005904:	bf18      	it	ne
 8005906:	6059      	strne	r1, [r3, #4]
 8005908:	6863      	ldr	r3, [r4, #4]
 800590a:	bf08      	it	eq
 800590c:	f8c8 1000 	streq.w	r1, [r8]
 8005910:	5162      	str	r2, [r4, r5]
 8005912:	604b      	str	r3, [r1, #4]
 8005914:	4630      	mov	r0, r6
 8005916:	f000 f82f 	bl	8005978 <__malloc_unlock>
 800591a:	f104 000b 	add.w	r0, r4, #11
 800591e:	1d23      	adds	r3, r4, #4
 8005920:	f020 0007 	bic.w	r0, r0, #7
 8005924:	1ac2      	subs	r2, r0, r3
 8005926:	bf1c      	itt	ne
 8005928:	1a1b      	subne	r3, r3, r0
 800592a:	50a3      	strne	r3, [r4, r2]
 800592c:	e7af      	b.n	800588e <_malloc_r+0x22>
 800592e:	6862      	ldr	r2, [r4, #4]
 8005930:	42a3      	cmp	r3, r4
 8005932:	bf0c      	ite	eq
 8005934:	f8c8 2000 	streq.w	r2, [r8]
 8005938:	605a      	strne	r2, [r3, #4]
 800593a:	e7eb      	b.n	8005914 <_malloc_r+0xa8>
 800593c:	4623      	mov	r3, r4
 800593e:	6864      	ldr	r4, [r4, #4]
 8005940:	e7ae      	b.n	80058a0 <_malloc_r+0x34>
 8005942:	463c      	mov	r4, r7
 8005944:	687f      	ldr	r7, [r7, #4]
 8005946:	e7b6      	b.n	80058b6 <_malloc_r+0x4a>
 8005948:	461a      	mov	r2, r3
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	42a3      	cmp	r3, r4
 800594e:	d1fb      	bne.n	8005948 <_malloc_r+0xdc>
 8005950:	2300      	movs	r3, #0
 8005952:	6053      	str	r3, [r2, #4]
 8005954:	e7de      	b.n	8005914 <_malloc_r+0xa8>
 8005956:	230c      	movs	r3, #12
 8005958:	4630      	mov	r0, r6
 800595a:	6033      	str	r3, [r6, #0]
 800595c:	f000 f80c 	bl	8005978 <__malloc_unlock>
 8005960:	e794      	b.n	800588c <_malloc_r+0x20>
 8005962:	6005      	str	r5, [r0, #0]
 8005964:	e7d6      	b.n	8005914 <_malloc_r+0xa8>
 8005966:	bf00      	nop
 8005968:	200008ac 	.word	0x200008ac

0800596c <__malloc_lock>:
 800596c:	4801      	ldr	r0, [pc, #4]	@ (8005974 <__malloc_lock+0x8>)
 800596e:	f7ff b89a 	b.w	8004aa6 <__retarget_lock_acquire_recursive>
 8005972:	bf00      	nop
 8005974:	200008a4 	.word	0x200008a4

08005978 <__malloc_unlock>:
 8005978:	4801      	ldr	r0, [pc, #4]	@ (8005980 <__malloc_unlock+0x8>)
 800597a:	f7ff b895 	b.w	8004aa8 <__retarget_lock_release_recursive>
 800597e:	bf00      	nop
 8005980:	200008a4 	.word	0x200008a4

08005984 <_Balloc>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	69c6      	ldr	r6, [r0, #28]
 8005988:	4604      	mov	r4, r0
 800598a:	460d      	mov	r5, r1
 800598c:	b976      	cbnz	r6, 80059ac <_Balloc+0x28>
 800598e:	2010      	movs	r0, #16
 8005990:	f7ff ff42 	bl	8005818 <malloc>
 8005994:	4602      	mov	r2, r0
 8005996:	61e0      	str	r0, [r4, #28]
 8005998:	b920      	cbnz	r0, 80059a4 <_Balloc+0x20>
 800599a:	216b      	movs	r1, #107	@ 0x6b
 800599c:	4b17      	ldr	r3, [pc, #92]	@ (80059fc <_Balloc+0x78>)
 800599e:	4818      	ldr	r0, [pc, #96]	@ (8005a00 <_Balloc+0x7c>)
 80059a0:	f000 fd80 	bl	80064a4 <__assert_func>
 80059a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059a8:	6006      	str	r6, [r0, #0]
 80059aa:	60c6      	str	r6, [r0, #12]
 80059ac:	69e6      	ldr	r6, [r4, #28]
 80059ae:	68f3      	ldr	r3, [r6, #12]
 80059b0:	b183      	cbz	r3, 80059d4 <_Balloc+0x50>
 80059b2:	69e3      	ldr	r3, [r4, #28]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059ba:	b9b8      	cbnz	r0, 80059ec <_Balloc+0x68>
 80059bc:	2101      	movs	r1, #1
 80059be:	fa01 f605 	lsl.w	r6, r1, r5
 80059c2:	1d72      	adds	r2, r6, #5
 80059c4:	4620      	mov	r0, r4
 80059c6:	0092      	lsls	r2, r2, #2
 80059c8:	f000 fd8a 	bl	80064e0 <_calloc_r>
 80059cc:	b160      	cbz	r0, 80059e8 <_Balloc+0x64>
 80059ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059d2:	e00e      	b.n	80059f2 <_Balloc+0x6e>
 80059d4:	2221      	movs	r2, #33	@ 0x21
 80059d6:	2104      	movs	r1, #4
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 fd81 	bl	80064e0 <_calloc_r>
 80059de:	69e3      	ldr	r3, [r4, #28]
 80059e0:	60f0      	str	r0, [r6, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e4      	bne.n	80059b2 <_Balloc+0x2e>
 80059e8:	2000      	movs	r0, #0
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	6802      	ldr	r2, [r0, #0]
 80059ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059f2:	2300      	movs	r3, #0
 80059f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059f8:	e7f7      	b.n	80059ea <_Balloc+0x66>
 80059fa:	bf00      	nop
 80059fc:	08008bd9 	.word	0x08008bd9
 8005a00:	08008c59 	.word	0x08008c59

08005a04 <_Bfree>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	69c6      	ldr	r6, [r0, #28]
 8005a08:	4605      	mov	r5, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	b976      	cbnz	r6, 8005a2c <_Bfree+0x28>
 8005a0e:	2010      	movs	r0, #16
 8005a10:	f7ff ff02 	bl	8005818 <malloc>
 8005a14:	4602      	mov	r2, r0
 8005a16:	61e8      	str	r0, [r5, #28]
 8005a18:	b920      	cbnz	r0, 8005a24 <_Bfree+0x20>
 8005a1a:	218f      	movs	r1, #143	@ 0x8f
 8005a1c:	4b08      	ldr	r3, [pc, #32]	@ (8005a40 <_Bfree+0x3c>)
 8005a1e:	4809      	ldr	r0, [pc, #36]	@ (8005a44 <_Bfree+0x40>)
 8005a20:	f000 fd40 	bl	80064a4 <__assert_func>
 8005a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a28:	6006      	str	r6, [r0, #0]
 8005a2a:	60c6      	str	r6, [r0, #12]
 8005a2c:	b13c      	cbz	r4, 8005a3e <_Bfree+0x3a>
 8005a2e:	69eb      	ldr	r3, [r5, #28]
 8005a30:	6862      	ldr	r2, [r4, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a38:	6021      	str	r1, [r4, #0]
 8005a3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	08008bd9 	.word	0x08008bd9
 8005a44:	08008c59 	.word	0x08008c59

08005a48 <__multadd>:
 8005a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	461e      	mov	r6, r3
 8005a52:	2000      	movs	r0, #0
 8005a54:	690d      	ldr	r5, [r1, #16]
 8005a56:	f101 0c14 	add.w	ip, r1, #20
 8005a5a:	f8dc 3000 	ldr.w	r3, [ip]
 8005a5e:	3001      	adds	r0, #1
 8005a60:	b299      	uxth	r1, r3
 8005a62:	fb02 6101 	mla	r1, r2, r1, r6
 8005a66:	0c1e      	lsrs	r6, r3, #16
 8005a68:	0c0b      	lsrs	r3, r1, #16
 8005a6a:	fb02 3306 	mla	r3, r2, r6, r3
 8005a6e:	b289      	uxth	r1, r1
 8005a70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a74:	4285      	cmp	r5, r0
 8005a76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a7a:	f84c 1b04 	str.w	r1, [ip], #4
 8005a7e:	dcec      	bgt.n	8005a5a <__multadd+0x12>
 8005a80:	b30e      	cbz	r6, 8005ac6 <__multadd+0x7e>
 8005a82:	68a3      	ldr	r3, [r4, #8]
 8005a84:	42ab      	cmp	r3, r5
 8005a86:	dc19      	bgt.n	8005abc <__multadd+0x74>
 8005a88:	6861      	ldr	r1, [r4, #4]
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	3101      	adds	r1, #1
 8005a8e:	f7ff ff79 	bl	8005984 <_Balloc>
 8005a92:	4680      	mov	r8, r0
 8005a94:	b928      	cbnz	r0, 8005aa2 <__multadd+0x5a>
 8005a96:	4602      	mov	r2, r0
 8005a98:	21ba      	movs	r1, #186	@ 0xba
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005acc <__multadd+0x84>)
 8005a9c:	480c      	ldr	r0, [pc, #48]	@ (8005ad0 <__multadd+0x88>)
 8005a9e:	f000 fd01 	bl	80064a4 <__assert_func>
 8005aa2:	6922      	ldr	r2, [r4, #16]
 8005aa4:	f104 010c 	add.w	r1, r4, #12
 8005aa8:	3202      	adds	r2, #2
 8005aaa:	0092      	lsls	r2, r2, #2
 8005aac:	300c      	adds	r0, #12
 8005aae:	f7ff f80a 	bl	8004ac6 <memcpy>
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	f7ff ffa5 	bl	8005a04 <_Bfree>
 8005aba:	4644      	mov	r4, r8
 8005abc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ac0:	3501      	adds	r5, #1
 8005ac2:	615e      	str	r6, [r3, #20]
 8005ac4:	6125      	str	r5, [r4, #16]
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005acc:	08008c48 	.word	0x08008c48
 8005ad0:	08008c59 	.word	0x08008c59

08005ad4 <__hi0bits>:
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ada:	bf3a      	itte	cc
 8005adc:	0403      	lslcc	r3, r0, #16
 8005ade:	2010      	movcc	r0, #16
 8005ae0:	2000      	movcs	r0, #0
 8005ae2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ae6:	bf3c      	itt	cc
 8005ae8:	021b      	lslcc	r3, r3, #8
 8005aea:	3008      	addcc	r0, #8
 8005aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005af0:	bf3c      	itt	cc
 8005af2:	011b      	lslcc	r3, r3, #4
 8005af4:	3004      	addcc	r0, #4
 8005af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005afa:	bf3c      	itt	cc
 8005afc:	009b      	lslcc	r3, r3, #2
 8005afe:	3002      	addcc	r0, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	db05      	blt.n	8005b10 <__hi0bits+0x3c>
 8005b04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005b08:	f100 0001 	add.w	r0, r0, #1
 8005b0c:	bf08      	it	eq
 8005b0e:	2020      	moveq	r0, #32
 8005b10:	4770      	bx	lr

08005b12 <__lo0bits>:
 8005b12:	6803      	ldr	r3, [r0, #0]
 8005b14:	4602      	mov	r2, r0
 8005b16:	f013 0007 	ands.w	r0, r3, #7
 8005b1a:	d00b      	beq.n	8005b34 <__lo0bits+0x22>
 8005b1c:	07d9      	lsls	r1, r3, #31
 8005b1e:	d421      	bmi.n	8005b64 <__lo0bits+0x52>
 8005b20:	0798      	lsls	r0, r3, #30
 8005b22:	bf49      	itett	mi
 8005b24:	085b      	lsrmi	r3, r3, #1
 8005b26:	089b      	lsrpl	r3, r3, #2
 8005b28:	2001      	movmi	r0, #1
 8005b2a:	6013      	strmi	r3, [r2, #0]
 8005b2c:	bf5c      	itt	pl
 8005b2e:	2002      	movpl	r0, #2
 8005b30:	6013      	strpl	r3, [r2, #0]
 8005b32:	4770      	bx	lr
 8005b34:	b299      	uxth	r1, r3
 8005b36:	b909      	cbnz	r1, 8005b3c <__lo0bits+0x2a>
 8005b38:	2010      	movs	r0, #16
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	b2d9      	uxtb	r1, r3
 8005b3e:	b909      	cbnz	r1, 8005b44 <__lo0bits+0x32>
 8005b40:	3008      	adds	r0, #8
 8005b42:	0a1b      	lsrs	r3, r3, #8
 8005b44:	0719      	lsls	r1, r3, #28
 8005b46:	bf04      	itt	eq
 8005b48:	091b      	lsreq	r3, r3, #4
 8005b4a:	3004      	addeq	r0, #4
 8005b4c:	0799      	lsls	r1, r3, #30
 8005b4e:	bf04      	itt	eq
 8005b50:	089b      	lsreq	r3, r3, #2
 8005b52:	3002      	addeq	r0, #2
 8005b54:	07d9      	lsls	r1, r3, #31
 8005b56:	d403      	bmi.n	8005b60 <__lo0bits+0x4e>
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	f100 0001 	add.w	r0, r0, #1
 8005b5e:	d003      	beq.n	8005b68 <__lo0bits+0x56>
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4770      	bx	lr
 8005b64:	2000      	movs	r0, #0
 8005b66:	4770      	bx	lr
 8005b68:	2020      	movs	r0, #32
 8005b6a:	4770      	bx	lr

08005b6c <__i2b>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	460c      	mov	r4, r1
 8005b70:	2101      	movs	r1, #1
 8005b72:	f7ff ff07 	bl	8005984 <_Balloc>
 8005b76:	4602      	mov	r2, r0
 8005b78:	b928      	cbnz	r0, 8005b86 <__i2b+0x1a>
 8005b7a:	f240 1145 	movw	r1, #325	@ 0x145
 8005b7e:	4b04      	ldr	r3, [pc, #16]	@ (8005b90 <__i2b+0x24>)
 8005b80:	4804      	ldr	r0, [pc, #16]	@ (8005b94 <__i2b+0x28>)
 8005b82:	f000 fc8f 	bl	80064a4 <__assert_func>
 8005b86:	2301      	movs	r3, #1
 8005b88:	6144      	str	r4, [r0, #20]
 8005b8a:	6103      	str	r3, [r0, #16]
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	08008c48 	.word	0x08008c48
 8005b94:	08008c59 	.word	0x08008c59

08005b98 <__multiply>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	690a      	ldr	r2, [r1, #16]
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	460f      	mov	r7, r1
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	bfa2      	ittt	ge
 8005ba8:	4623      	movge	r3, r4
 8005baa:	460c      	movge	r4, r1
 8005bac:	461f      	movge	r7, r3
 8005bae:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005bb2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005bb6:	68a3      	ldr	r3, [r4, #8]
 8005bb8:	6861      	ldr	r1, [r4, #4]
 8005bba:	eb0a 0609 	add.w	r6, sl, r9
 8005bbe:	42b3      	cmp	r3, r6
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	bfb8      	it	lt
 8005bc4:	3101      	addlt	r1, #1
 8005bc6:	f7ff fedd 	bl	8005984 <_Balloc>
 8005bca:	b930      	cbnz	r0, 8005bda <__multiply+0x42>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005bd2:	4b43      	ldr	r3, [pc, #268]	@ (8005ce0 <__multiply+0x148>)
 8005bd4:	4843      	ldr	r0, [pc, #268]	@ (8005ce4 <__multiply+0x14c>)
 8005bd6:	f000 fc65 	bl	80064a4 <__assert_func>
 8005bda:	f100 0514 	add.w	r5, r0, #20
 8005bde:	462b      	mov	r3, r5
 8005be0:	2200      	movs	r2, #0
 8005be2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005be6:	4543      	cmp	r3, r8
 8005be8:	d321      	bcc.n	8005c2e <__multiply+0x96>
 8005bea:	f107 0114 	add.w	r1, r7, #20
 8005bee:	f104 0214 	add.w	r2, r4, #20
 8005bf2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005bf6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005bfa:	9302      	str	r3, [sp, #8]
 8005bfc:	1b13      	subs	r3, r2, r4
 8005bfe:	3b15      	subs	r3, #21
 8005c00:	f023 0303 	bic.w	r3, r3, #3
 8005c04:	3304      	adds	r3, #4
 8005c06:	f104 0715 	add.w	r7, r4, #21
 8005c0a:	42ba      	cmp	r2, r7
 8005c0c:	bf38      	it	cc
 8005c0e:	2304      	movcc	r3, #4
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	9b02      	ldr	r3, [sp, #8]
 8005c14:	9103      	str	r1, [sp, #12]
 8005c16:	428b      	cmp	r3, r1
 8005c18:	d80c      	bhi.n	8005c34 <__multiply+0x9c>
 8005c1a:	2e00      	cmp	r6, #0
 8005c1c:	dd03      	ble.n	8005c26 <__multiply+0x8e>
 8005c1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d05a      	beq.n	8005cdc <__multiply+0x144>
 8005c26:	6106      	str	r6, [r0, #16]
 8005c28:	b005      	add	sp, #20
 8005c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2e:	f843 2b04 	str.w	r2, [r3], #4
 8005c32:	e7d8      	b.n	8005be6 <__multiply+0x4e>
 8005c34:	f8b1 a000 	ldrh.w	sl, [r1]
 8005c38:	f1ba 0f00 	cmp.w	sl, #0
 8005c3c:	d023      	beq.n	8005c86 <__multiply+0xee>
 8005c3e:	46a9      	mov	r9, r5
 8005c40:	f04f 0c00 	mov.w	ip, #0
 8005c44:	f104 0e14 	add.w	lr, r4, #20
 8005c48:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005c4c:	f8d9 3000 	ldr.w	r3, [r9]
 8005c50:	fa1f fb87 	uxth.w	fp, r7
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	fb0a 330b 	mla	r3, sl, fp, r3
 8005c5a:	4463      	add	r3, ip
 8005c5c:	f8d9 c000 	ldr.w	ip, [r9]
 8005c60:	0c3f      	lsrs	r7, r7, #16
 8005c62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c66:	fb0a c707 	mla	r7, sl, r7, ip
 8005c6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005c74:	4572      	cmp	r2, lr
 8005c76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005c7a:	f849 3b04 	str.w	r3, [r9], #4
 8005c7e:	d8e3      	bhi.n	8005c48 <__multiply+0xb0>
 8005c80:	9b01      	ldr	r3, [sp, #4]
 8005c82:	f845 c003 	str.w	ip, [r5, r3]
 8005c86:	9b03      	ldr	r3, [sp, #12]
 8005c88:	3104      	adds	r1, #4
 8005c8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005c8e:	f1b9 0f00 	cmp.w	r9, #0
 8005c92:	d021      	beq.n	8005cd8 <__multiply+0x140>
 8005c94:	46ae      	mov	lr, r5
 8005c96:	f04f 0a00 	mov.w	sl, #0
 8005c9a:	682b      	ldr	r3, [r5, #0]
 8005c9c:	f104 0c14 	add.w	ip, r4, #20
 8005ca0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ca4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	fb09 770b 	mla	r7, r9, fp, r7
 8005cae:	4457      	add	r7, sl
 8005cb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005cb4:	f84e 3b04 	str.w	r3, [lr], #4
 8005cb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005cbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cc0:	f8be 3000 	ldrh.w	r3, [lr]
 8005cc4:	4562      	cmp	r2, ip
 8005cc6:	fb09 330a 	mla	r3, r9, sl, r3
 8005cca:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005cce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cd2:	d8e5      	bhi.n	8005ca0 <__multiply+0x108>
 8005cd4:	9f01      	ldr	r7, [sp, #4]
 8005cd6:	51eb      	str	r3, [r5, r7]
 8005cd8:	3504      	adds	r5, #4
 8005cda:	e79a      	b.n	8005c12 <__multiply+0x7a>
 8005cdc:	3e01      	subs	r6, #1
 8005cde:	e79c      	b.n	8005c1a <__multiply+0x82>
 8005ce0:	08008c48 	.word	0x08008c48
 8005ce4:	08008c59 	.word	0x08008c59

08005ce8 <__pow5mult>:
 8005ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cec:	4615      	mov	r5, r2
 8005cee:	f012 0203 	ands.w	r2, r2, #3
 8005cf2:	4607      	mov	r7, r0
 8005cf4:	460e      	mov	r6, r1
 8005cf6:	d007      	beq.n	8005d08 <__pow5mult+0x20>
 8005cf8:	4c25      	ldr	r4, [pc, #148]	@ (8005d90 <__pow5mult+0xa8>)
 8005cfa:	3a01      	subs	r2, #1
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d02:	f7ff fea1 	bl	8005a48 <__multadd>
 8005d06:	4606      	mov	r6, r0
 8005d08:	10ad      	asrs	r5, r5, #2
 8005d0a:	d03d      	beq.n	8005d88 <__pow5mult+0xa0>
 8005d0c:	69fc      	ldr	r4, [r7, #28]
 8005d0e:	b97c      	cbnz	r4, 8005d30 <__pow5mult+0x48>
 8005d10:	2010      	movs	r0, #16
 8005d12:	f7ff fd81 	bl	8005818 <malloc>
 8005d16:	4602      	mov	r2, r0
 8005d18:	61f8      	str	r0, [r7, #28]
 8005d1a:	b928      	cbnz	r0, 8005d28 <__pow5mult+0x40>
 8005d1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005d20:	4b1c      	ldr	r3, [pc, #112]	@ (8005d94 <__pow5mult+0xac>)
 8005d22:	481d      	ldr	r0, [pc, #116]	@ (8005d98 <__pow5mult+0xb0>)
 8005d24:	f000 fbbe 	bl	80064a4 <__assert_func>
 8005d28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d2c:	6004      	str	r4, [r0, #0]
 8005d2e:	60c4      	str	r4, [r0, #12]
 8005d30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005d34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d38:	b94c      	cbnz	r4, 8005d4e <__pow5mult+0x66>
 8005d3a:	f240 2171 	movw	r1, #625	@ 0x271
 8005d3e:	4638      	mov	r0, r7
 8005d40:	f7ff ff14 	bl	8005b6c <__i2b>
 8005d44:	2300      	movs	r3, #0
 8005d46:	4604      	mov	r4, r0
 8005d48:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d4c:	6003      	str	r3, [r0, #0]
 8005d4e:	f04f 0900 	mov.w	r9, #0
 8005d52:	07eb      	lsls	r3, r5, #31
 8005d54:	d50a      	bpl.n	8005d6c <__pow5mult+0x84>
 8005d56:	4631      	mov	r1, r6
 8005d58:	4622      	mov	r2, r4
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f7ff ff1c 	bl	8005b98 <__multiply>
 8005d60:	4680      	mov	r8, r0
 8005d62:	4631      	mov	r1, r6
 8005d64:	4638      	mov	r0, r7
 8005d66:	f7ff fe4d 	bl	8005a04 <_Bfree>
 8005d6a:	4646      	mov	r6, r8
 8005d6c:	106d      	asrs	r5, r5, #1
 8005d6e:	d00b      	beq.n	8005d88 <__pow5mult+0xa0>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	b938      	cbnz	r0, 8005d84 <__pow5mult+0x9c>
 8005d74:	4622      	mov	r2, r4
 8005d76:	4621      	mov	r1, r4
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f7ff ff0d 	bl	8005b98 <__multiply>
 8005d7e:	6020      	str	r0, [r4, #0]
 8005d80:	f8c0 9000 	str.w	r9, [r0]
 8005d84:	4604      	mov	r4, r0
 8005d86:	e7e4      	b.n	8005d52 <__pow5mult+0x6a>
 8005d88:	4630      	mov	r0, r6
 8005d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8e:	bf00      	nop
 8005d90:	08008cb4 	.word	0x08008cb4
 8005d94:	08008bd9 	.word	0x08008bd9
 8005d98:	08008c59 	.word	0x08008c59

08005d9c <__lshift>:
 8005d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	460c      	mov	r4, r1
 8005da2:	4607      	mov	r7, r0
 8005da4:	4691      	mov	r9, r2
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	6849      	ldr	r1, [r1, #4]
 8005daa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dae:	68a3      	ldr	r3, [r4, #8]
 8005db0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005db4:	f108 0601 	add.w	r6, r8, #1
 8005db8:	42b3      	cmp	r3, r6
 8005dba:	db0b      	blt.n	8005dd4 <__lshift+0x38>
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	f7ff fde1 	bl	8005984 <_Balloc>
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	b948      	cbnz	r0, 8005dda <__lshift+0x3e>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005dcc:	4b27      	ldr	r3, [pc, #156]	@ (8005e6c <__lshift+0xd0>)
 8005dce:	4828      	ldr	r0, [pc, #160]	@ (8005e70 <__lshift+0xd4>)
 8005dd0:	f000 fb68 	bl	80064a4 <__assert_func>
 8005dd4:	3101      	adds	r1, #1
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	e7ee      	b.n	8005db8 <__lshift+0x1c>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f100 0114 	add.w	r1, r0, #20
 8005de0:	f100 0210 	add.w	r2, r0, #16
 8005de4:	4618      	mov	r0, r3
 8005de6:	4553      	cmp	r3, sl
 8005de8:	db33      	blt.n	8005e52 <__lshift+0xb6>
 8005dea:	6920      	ldr	r0, [r4, #16]
 8005dec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005df0:	f104 0314 	add.w	r3, r4, #20
 8005df4:	f019 091f 	ands.w	r9, r9, #31
 8005df8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e00:	d02b      	beq.n	8005e5a <__lshift+0xbe>
 8005e02:	468a      	mov	sl, r1
 8005e04:	2200      	movs	r2, #0
 8005e06:	f1c9 0e20 	rsb	lr, r9, #32
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	fa00 f009 	lsl.w	r0, r0, r9
 8005e10:	4310      	orrs	r0, r2
 8005e12:	f84a 0b04 	str.w	r0, [sl], #4
 8005e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e1a:	459c      	cmp	ip, r3
 8005e1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e20:	d8f3      	bhi.n	8005e0a <__lshift+0x6e>
 8005e22:	ebac 0304 	sub.w	r3, ip, r4
 8005e26:	3b15      	subs	r3, #21
 8005e28:	f023 0303 	bic.w	r3, r3, #3
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	f104 0015 	add.w	r0, r4, #21
 8005e32:	4584      	cmp	ip, r0
 8005e34:	bf38      	it	cc
 8005e36:	2304      	movcc	r3, #4
 8005e38:	50ca      	str	r2, [r1, r3]
 8005e3a:	b10a      	cbz	r2, 8005e40 <__lshift+0xa4>
 8005e3c:	f108 0602 	add.w	r6, r8, #2
 8005e40:	3e01      	subs	r6, #1
 8005e42:	4638      	mov	r0, r7
 8005e44:	4621      	mov	r1, r4
 8005e46:	612e      	str	r6, [r5, #16]
 8005e48:	f7ff fddc 	bl	8005a04 <_Bfree>
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e52:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e56:	3301      	adds	r3, #1
 8005e58:	e7c5      	b.n	8005de6 <__lshift+0x4a>
 8005e5a:	3904      	subs	r1, #4
 8005e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e60:	459c      	cmp	ip, r3
 8005e62:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e66:	d8f9      	bhi.n	8005e5c <__lshift+0xc0>
 8005e68:	e7ea      	b.n	8005e40 <__lshift+0xa4>
 8005e6a:	bf00      	nop
 8005e6c:	08008c48 	.word	0x08008c48
 8005e70:	08008c59 	.word	0x08008c59

08005e74 <__mcmp>:
 8005e74:	4603      	mov	r3, r0
 8005e76:	690a      	ldr	r2, [r1, #16]
 8005e78:	6900      	ldr	r0, [r0, #16]
 8005e7a:	b530      	push	{r4, r5, lr}
 8005e7c:	1a80      	subs	r0, r0, r2
 8005e7e:	d10e      	bne.n	8005e9e <__mcmp+0x2a>
 8005e80:	3314      	adds	r3, #20
 8005e82:	3114      	adds	r1, #20
 8005e84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e94:	4295      	cmp	r5, r2
 8005e96:	d003      	beq.n	8005ea0 <__mcmp+0x2c>
 8005e98:	d205      	bcs.n	8005ea6 <__mcmp+0x32>
 8005e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9e:	bd30      	pop	{r4, r5, pc}
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d3f3      	bcc.n	8005e8c <__mcmp+0x18>
 8005ea4:	e7fb      	b.n	8005e9e <__mcmp+0x2a>
 8005ea6:	2001      	movs	r0, #1
 8005ea8:	e7f9      	b.n	8005e9e <__mcmp+0x2a>
	...

08005eac <__mdiff>:
 8005eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb0:	4689      	mov	r9, r1
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	4648      	mov	r0, r9
 8005eb8:	4614      	mov	r4, r2
 8005eba:	f7ff ffdb 	bl	8005e74 <__mcmp>
 8005ebe:	1e05      	subs	r5, r0, #0
 8005ec0:	d112      	bne.n	8005ee8 <__mdiff+0x3c>
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f7ff fd5d 	bl	8005984 <_Balloc>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	b928      	cbnz	r0, 8005eda <__mdiff+0x2e>
 8005ece:	f240 2137 	movw	r1, #567	@ 0x237
 8005ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fcc <__mdiff+0x120>)
 8005ed4:	483e      	ldr	r0, [pc, #248]	@ (8005fd0 <__mdiff+0x124>)
 8005ed6:	f000 fae5 	bl	80064a4 <__assert_func>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	b003      	add	sp, #12
 8005ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee8:	bfbc      	itt	lt
 8005eea:	464b      	movlt	r3, r9
 8005eec:	46a1      	movlt	r9, r4
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ef4:	bfba      	itte	lt
 8005ef6:	461c      	movlt	r4, r3
 8005ef8:	2501      	movlt	r5, #1
 8005efa:	2500      	movge	r5, #0
 8005efc:	f7ff fd42 	bl	8005984 <_Balloc>
 8005f00:	4602      	mov	r2, r0
 8005f02:	b918      	cbnz	r0, 8005f0c <__mdiff+0x60>
 8005f04:	f240 2145 	movw	r1, #581	@ 0x245
 8005f08:	4b30      	ldr	r3, [pc, #192]	@ (8005fcc <__mdiff+0x120>)
 8005f0a:	e7e3      	b.n	8005ed4 <__mdiff+0x28>
 8005f0c:	f100 0b14 	add.w	fp, r0, #20
 8005f10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005f14:	f109 0310 	add.w	r3, r9, #16
 8005f18:	60c5      	str	r5, [r0, #12]
 8005f1a:	f04f 0c00 	mov.w	ip, #0
 8005f1e:	f109 0514 	add.w	r5, r9, #20
 8005f22:	46d9      	mov	r9, fp
 8005f24:	6926      	ldr	r6, [r4, #16]
 8005f26:	f104 0e14 	add.w	lr, r4, #20
 8005f2a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005f2e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	9b01      	ldr	r3, [sp, #4]
 8005f36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005f3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005f3e:	b281      	uxth	r1, r0
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	fa1f f38a 	uxth.w	r3, sl
 8005f46:	1a5b      	subs	r3, r3, r1
 8005f48:	0c00      	lsrs	r0, r0, #16
 8005f4a:	4463      	add	r3, ip
 8005f4c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005f50:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005f5a:	4576      	cmp	r6, lr
 8005f5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f60:	f849 3b04 	str.w	r3, [r9], #4
 8005f64:	d8e6      	bhi.n	8005f34 <__mdiff+0x88>
 8005f66:	1b33      	subs	r3, r6, r4
 8005f68:	3b15      	subs	r3, #21
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	3415      	adds	r4, #21
 8005f70:	3304      	adds	r3, #4
 8005f72:	42a6      	cmp	r6, r4
 8005f74:	bf38      	it	cc
 8005f76:	2304      	movcc	r3, #4
 8005f78:	441d      	add	r5, r3
 8005f7a:	445b      	add	r3, fp
 8005f7c:	461e      	mov	r6, r3
 8005f7e:	462c      	mov	r4, r5
 8005f80:	4544      	cmp	r4, r8
 8005f82:	d30e      	bcc.n	8005fa2 <__mdiff+0xf6>
 8005f84:	f108 0103 	add.w	r1, r8, #3
 8005f88:	1b49      	subs	r1, r1, r5
 8005f8a:	f021 0103 	bic.w	r1, r1, #3
 8005f8e:	3d03      	subs	r5, #3
 8005f90:	45a8      	cmp	r8, r5
 8005f92:	bf38      	it	cc
 8005f94:	2100      	movcc	r1, #0
 8005f96:	440b      	add	r3, r1
 8005f98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f9c:	b199      	cbz	r1, 8005fc6 <__mdiff+0x11a>
 8005f9e:	6117      	str	r7, [r2, #16]
 8005fa0:	e79e      	b.n	8005ee0 <__mdiff+0x34>
 8005fa2:	46e6      	mov	lr, ip
 8005fa4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005fa8:	fa1f fc81 	uxth.w	ip, r1
 8005fac:	44f4      	add	ip, lr
 8005fae:	0c08      	lsrs	r0, r1, #16
 8005fb0:	4471      	add	r1, lr
 8005fb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005fb6:	b289      	uxth	r1, r1
 8005fb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005fbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005fc0:	f846 1b04 	str.w	r1, [r6], #4
 8005fc4:	e7dc      	b.n	8005f80 <__mdiff+0xd4>
 8005fc6:	3f01      	subs	r7, #1
 8005fc8:	e7e6      	b.n	8005f98 <__mdiff+0xec>
 8005fca:	bf00      	nop
 8005fcc:	08008c48 	.word	0x08008c48
 8005fd0:	08008c59 	.word	0x08008c59

08005fd4 <__d2b>:
 8005fd4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005fd8:	2101      	movs	r1, #1
 8005fda:	4690      	mov	r8, r2
 8005fdc:	4699      	mov	r9, r3
 8005fde:	9e08      	ldr	r6, [sp, #32]
 8005fe0:	f7ff fcd0 	bl	8005984 <_Balloc>
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	b930      	cbnz	r0, 8005ff6 <__d2b+0x22>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	f240 310f 	movw	r1, #783	@ 0x30f
 8005fee:	4b23      	ldr	r3, [pc, #140]	@ (800607c <__d2b+0xa8>)
 8005ff0:	4823      	ldr	r0, [pc, #140]	@ (8006080 <__d2b+0xac>)
 8005ff2:	f000 fa57 	bl	80064a4 <__assert_func>
 8005ff6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ffa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ffe:	b10d      	cbz	r5, 8006004 <__d2b+0x30>
 8006000:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	f1b8 0300 	subs.w	r3, r8, #0
 800600a:	d024      	beq.n	8006056 <__d2b+0x82>
 800600c:	4668      	mov	r0, sp
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	f7ff fd7f 	bl	8005b12 <__lo0bits>
 8006014:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006018:	b1d8      	cbz	r0, 8006052 <__d2b+0x7e>
 800601a:	f1c0 0320 	rsb	r3, r0, #32
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	430b      	orrs	r3, r1
 8006024:	40c2      	lsrs	r2, r0
 8006026:	6163      	str	r3, [r4, #20]
 8006028:	9201      	str	r2, [sp, #4]
 800602a:	9b01      	ldr	r3, [sp, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	bf0c      	ite	eq
 8006030:	2201      	moveq	r2, #1
 8006032:	2202      	movne	r2, #2
 8006034:	61a3      	str	r3, [r4, #24]
 8006036:	6122      	str	r2, [r4, #16]
 8006038:	b1ad      	cbz	r5, 8006066 <__d2b+0x92>
 800603a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800603e:	4405      	add	r5, r0
 8006040:	6035      	str	r5, [r6, #0]
 8006042:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006048:	6018      	str	r0, [r3, #0]
 800604a:	4620      	mov	r0, r4
 800604c:	b002      	add	sp, #8
 800604e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006052:	6161      	str	r1, [r4, #20]
 8006054:	e7e9      	b.n	800602a <__d2b+0x56>
 8006056:	a801      	add	r0, sp, #4
 8006058:	f7ff fd5b 	bl	8005b12 <__lo0bits>
 800605c:	9b01      	ldr	r3, [sp, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	6163      	str	r3, [r4, #20]
 8006062:	3020      	adds	r0, #32
 8006064:	e7e7      	b.n	8006036 <__d2b+0x62>
 8006066:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800606a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800606e:	6030      	str	r0, [r6, #0]
 8006070:	6918      	ldr	r0, [r3, #16]
 8006072:	f7ff fd2f 	bl	8005ad4 <__hi0bits>
 8006076:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800607a:	e7e4      	b.n	8006046 <__d2b+0x72>
 800607c:	08008c48 	.word	0x08008c48
 8006080:	08008c59 	.word	0x08008c59

08006084 <__ssputs_r>:
 8006084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006088:	461f      	mov	r7, r3
 800608a:	688e      	ldr	r6, [r1, #8]
 800608c:	4682      	mov	sl, r0
 800608e:	42be      	cmp	r6, r7
 8006090:	460c      	mov	r4, r1
 8006092:	4690      	mov	r8, r2
 8006094:	680b      	ldr	r3, [r1, #0]
 8006096:	d82d      	bhi.n	80060f4 <__ssputs_r+0x70>
 8006098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800609c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060a0:	d026      	beq.n	80060f0 <__ssputs_r+0x6c>
 80060a2:	6965      	ldr	r5, [r4, #20]
 80060a4:	6909      	ldr	r1, [r1, #16]
 80060a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060aa:	eba3 0901 	sub.w	r9, r3, r1
 80060ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060b2:	1c7b      	adds	r3, r7, #1
 80060b4:	444b      	add	r3, r9
 80060b6:	106d      	asrs	r5, r5, #1
 80060b8:	429d      	cmp	r5, r3
 80060ba:	bf38      	it	cc
 80060bc:	461d      	movcc	r5, r3
 80060be:	0553      	lsls	r3, r2, #21
 80060c0:	d527      	bpl.n	8006112 <__ssputs_r+0x8e>
 80060c2:	4629      	mov	r1, r5
 80060c4:	f7ff fbd2 	bl	800586c <_malloc_r>
 80060c8:	4606      	mov	r6, r0
 80060ca:	b360      	cbz	r0, 8006126 <__ssputs_r+0xa2>
 80060cc:	464a      	mov	r2, r9
 80060ce:	6921      	ldr	r1, [r4, #16]
 80060d0:	f7fe fcf9 	bl	8004ac6 <memcpy>
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80060da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060de:	81a3      	strh	r3, [r4, #12]
 80060e0:	6126      	str	r6, [r4, #16]
 80060e2:	444e      	add	r6, r9
 80060e4:	6026      	str	r6, [r4, #0]
 80060e6:	463e      	mov	r6, r7
 80060e8:	6165      	str	r5, [r4, #20]
 80060ea:	eba5 0509 	sub.w	r5, r5, r9
 80060ee:	60a5      	str	r5, [r4, #8]
 80060f0:	42be      	cmp	r6, r7
 80060f2:	d900      	bls.n	80060f6 <__ssputs_r+0x72>
 80060f4:	463e      	mov	r6, r7
 80060f6:	4632      	mov	r2, r6
 80060f8:	4641      	mov	r1, r8
 80060fa:	6820      	ldr	r0, [r4, #0]
 80060fc:	f7fe fc3b 	bl	8004976 <memmove>
 8006100:	2000      	movs	r0, #0
 8006102:	68a3      	ldr	r3, [r4, #8]
 8006104:	1b9b      	subs	r3, r3, r6
 8006106:	60a3      	str	r3, [r4, #8]
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	4433      	add	r3, r6
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006112:	462a      	mov	r2, r5
 8006114:	f000 fa0a 	bl	800652c <_realloc_r>
 8006118:	4606      	mov	r6, r0
 800611a:	2800      	cmp	r0, #0
 800611c:	d1e0      	bne.n	80060e0 <__ssputs_r+0x5c>
 800611e:	4650      	mov	r0, sl
 8006120:	6921      	ldr	r1, [r4, #16]
 8006122:	f7ff fb31 	bl	8005788 <_free_r>
 8006126:	230c      	movs	r3, #12
 8006128:	f8ca 3000 	str.w	r3, [sl]
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f04f 30ff 	mov.w	r0, #4294967295
 8006132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006136:	81a3      	strh	r3, [r4, #12]
 8006138:	e7e9      	b.n	800610e <__ssputs_r+0x8a>
	...

0800613c <_svfiprintf_r>:
 800613c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006140:	4698      	mov	r8, r3
 8006142:	898b      	ldrh	r3, [r1, #12]
 8006144:	4607      	mov	r7, r0
 8006146:	061b      	lsls	r3, r3, #24
 8006148:	460d      	mov	r5, r1
 800614a:	4614      	mov	r4, r2
 800614c:	b09d      	sub	sp, #116	@ 0x74
 800614e:	d510      	bpl.n	8006172 <_svfiprintf_r+0x36>
 8006150:	690b      	ldr	r3, [r1, #16]
 8006152:	b973      	cbnz	r3, 8006172 <_svfiprintf_r+0x36>
 8006154:	2140      	movs	r1, #64	@ 0x40
 8006156:	f7ff fb89 	bl	800586c <_malloc_r>
 800615a:	6028      	str	r0, [r5, #0]
 800615c:	6128      	str	r0, [r5, #16]
 800615e:	b930      	cbnz	r0, 800616e <_svfiprintf_r+0x32>
 8006160:	230c      	movs	r3, #12
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	b01d      	add	sp, #116	@ 0x74
 800616a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616e:	2340      	movs	r3, #64	@ 0x40
 8006170:	616b      	str	r3, [r5, #20]
 8006172:	2300      	movs	r3, #0
 8006174:	9309      	str	r3, [sp, #36]	@ 0x24
 8006176:	2320      	movs	r3, #32
 8006178:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800617c:	2330      	movs	r3, #48	@ 0x30
 800617e:	f04f 0901 	mov.w	r9, #1
 8006182:	f8cd 800c 	str.w	r8, [sp, #12]
 8006186:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006320 <_svfiprintf_r+0x1e4>
 800618a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800618e:	4623      	mov	r3, r4
 8006190:	469a      	mov	sl, r3
 8006192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006196:	b10a      	cbz	r2, 800619c <_svfiprintf_r+0x60>
 8006198:	2a25      	cmp	r2, #37	@ 0x25
 800619a:	d1f9      	bne.n	8006190 <_svfiprintf_r+0x54>
 800619c:	ebba 0b04 	subs.w	fp, sl, r4
 80061a0:	d00b      	beq.n	80061ba <_svfiprintf_r+0x7e>
 80061a2:	465b      	mov	r3, fp
 80061a4:	4622      	mov	r2, r4
 80061a6:	4629      	mov	r1, r5
 80061a8:	4638      	mov	r0, r7
 80061aa:	f7ff ff6b 	bl	8006084 <__ssputs_r>
 80061ae:	3001      	adds	r0, #1
 80061b0:	f000 80a7 	beq.w	8006302 <_svfiprintf_r+0x1c6>
 80061b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061b6:	445a      	add	r2, fp
 80061b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80061ba:	f89a 3000 	ldrb.w	r3, [sl]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 809f 	beq.w	8006302 <_svfiprintf_r+0x1c6>
 80061c4:	2300      	movs	r3, #0
 80061c6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ce:	f10a 0a01 	add.w	sl, sl, #1
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	9307      	str	r3, [sp, #28]
 80061d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061da:	931a      	str	r3, [sp, #104]	@ 0x68
 80061dc:	4654      	mov	r4, sl
 80061de:	2205      	movs	r2, #5
 80061e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e4:	484e      	ldr	r0, [pc, #312]	@ (8006320 <_svfiprintf_r+0x1e4>)
 80061e6:	f7fe fc60 	bl	8004aaa <memchr>
 80061ea:	9a04      	ldr	r2, [sp, #16]
 80061ec:	b9d8      	cbnz	r0, 8006226 <_svfiprintf_r+0xea>
 80061ee:	06d0      	lsls	r0, r2, #27
 80061f0:	bf44      	itt	mi
 80061f2:	2320      	movmi	r3, #32
 80061f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061f8:	0711      	lsls	r1, r2, #28
 80061fa:	bf44      	itt	mi
 80061fc:	232b      	movmi	r3, #43	@ 0x2b
 80061fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006202:	f89a 3000 	ldrb.w	r3, [sl]
 8006206:	2b2a      	cmp	r3, #42	@ 0x2a
 8006208:	d015      	beq.n	8006236 <_svfiprintf_r+0xfa>
 800620a:	4654      	mov	r4, sl
 800620c:	2000      	movs	r0, #0
 800620e:	f04f 0c0a 	mov.w	ip, #10
 8006212:	9a07      	ldr	r2, [sp, #28]
 8006214:	4621      	mov	r1, r4
 8006216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800621a:	3b30      	subs	r3, #48	@ 0x30
 800621c:	2b09      	cmp	r3, #9
 800621e:	d94b      	bls.n	80062b8 <_svfiprintf_r+0x17c>
 8006220:	b1b0      	cbz	r0, 8006250 <_svfiprintf_r+0x114>
 8006222:	9207      	str	r2, [sp, #28]
 8006224:	e014      	b.n	8006250 <_svfiprintf_r+0x114>
 8006226:	eba0 0308 	sub.w	r3, r0, r8
 800622a:	fa09 f303 	lsl.w	r3, r9, r3
 800622e:	4313      	orrs	r3, r2
 8006230:	46a2      	mov	sl, r4
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	e7d2      	b.n	80061dc <_svfiprintf_r+0xa0>
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	1d19      	adds	r1, r3, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	9103      	str	r1, [sp, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	bfbb      	ittet	lt
 8006242:	425b      	neglt	r3, r3
 8006244:	f042 0202 	orrlt.w	r2, r2, #2
 8006248:	9307      	strge	r3, [sp, #28]
 800624a:	9307      	strlt	r3, [sp, #28]
 800624c:	bfb8      	it	lt
 800624e:	9204      	strlt	r2, [sp, #16]
 8006250:	7823      	ldrb	r3, [r4, #0]
 8006252:	2b2e      	cmp	r3, #46	@ 0x2e
 8006254:	d10a      	bne.n	800626c <_svfiprintf_r+0x130>
 8006256:	7863      	ldrb	r3, [r4, #1]
 8006258:	2b2a      	cmp	r3, #42	@ 0x2a
 800625a:	d132      	bne.n	80062c2 <_svfiprintf_r+0x186>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	3402      	adds	r4, #2
 8006260:	1d1a      	adds	r2, r3, #4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	9203      	str	r2, [sp, #12]
 8006266:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800626a:	9305      	str	r3, [sp, #20]
 800626c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006324 <_svfiprintf_r+0x1e8>
 8006270:	2203      	movs	r2, #3
 8006272:	4650      	mov	r0, sl
 8006274:	7821      	ldrb	r1, [r4, #0]
 8006276:	f7fe fc18 	bl	8004aaa <memchr>
 800627a:	b138      	cbz	r0, 800628c <_svfiprintf_r+0x150>
 800627c:	2240      	movs	r2, #64	@ 0x40
 800627e:	9b04      	ldr	r3, [sp, #16]
 8006280:	eba0 000a 	sub.w	r0, r0, sl
 8006284:	4082      	lsls	r2, r0
 8006286:	4313      	orrs	r3, r2
 8006288:	3401      	adds	r4, #1
 800628a:	9304      	str	r3, [sp, #16]
 800628c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006290:	2206      	movs	r2, #6
 8006292:	4825      	ldr	r0, [pc, #148]	@ (8006328 <_svfiprintf_r+0x1ec>)
 8006294:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006298:	f7fe fc07 	bl	8004aaa <memchr>
 800629c:	2800      	cmp	r0, #0
 800629e:	d036      	beq.n	800630e <_svfiprintf_r+0x1d2>
 80062a0:	4b22      	ldr	r3, [pc, #136]	@ (800632c <_svfiprintf_r+0x1f0>)
 80062a2:	bb1b      	cbnz	r3, 80062ec <_svfiprintf_r+0x1b0>
 80062a4:	9b03      	ldr	r3, [sp, #12]
 80062a6:	3307      	adds	r3, #7
 80062a8:	f023 0307 	bic.w	r3, r3, #7
 80062ac:	3308      	adds	r3, #8
 80062ae:	9303      	str	r3, [sp, #12]
 80062b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b2:	4433      	add	r3, r6
 80062b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062b6:	e76a      	b.n	800618e <_svfiprintf_r+0x52>
 80062b8:	460c      	mov	r4, r1
 80062ba:	2001      	movs	r0, #1
 80062bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80062c0:	e7a8      	b.n	8006214 <_svfiprintf_r+0xd8>
 80062c2:	2300      	movs	r3, #0
 80062c4:	f04f 0c0a 	mov.w	ip, #10
 80062c8:	4619      	mov	r1, r3
 80062ca:	3401      	adds	r4, #1
 80062cc:	9305      	str	r3, [sp, #20]
 80062ce:	4620      	mov	r0, r4
 80062d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062d4:	3a30      	subs	r2, #48	@ 0x30
 80062d6:	2a09      	cmp	r2, #9
 80062d8:	d903      	bls.n	80062e2 <_svfiprintf_r+0x1a6>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0c6      	beq.n	800626c <_svfiprintf_r+0x130>
 80062de:	9105      	str	r1, [sp, #20]
 80062e0:	e7c4      	b.n	800626c <_svfiprintf_r+0x130>
 80062e2:	4604      	mov	r4, r0
 80062e4:	2301      	movs	r3, #1
 80062e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80062ea:	e7f0      	b.n	80062ce <_svfiprintf_r+0x192>
 80062ec:	ab03      	add	r3, sp, #12
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	462a      	mov	r2, r5
 80062f2:	4638      	mov	r0, r7
 80062f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006330 <_svfiprintf_r+0x1f4>)
 80062f6:	a904      	add	r1, sp, #16
 80062f8:	f7fd fe5a 	bl	8003fb0 <_printf_float>
 80062fc:	1c42      	adds	r2, r0, #1
 80062fe:	4606      	mov	r6, r0
 8006300:	d1d6      	bne.n	80062b0 <_svfiprintf_r+0x174>
 8006302:	89ab      	ldrh	r3, [r5, #12]
 8006304:	065b      	lsls	r3, r3, #25
 8006306:	f53f af2d 	bmi.w	8006164 <_svfiprintf_r+0x28>
 800630a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800630c:	e72c      	b.n	8006168 <_svfiprintf_r+0x2c>
 800630e:	ab03      	add	r3, sp, #12
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	462a      	mov	r2, r5
 8006314:	4638      	mov	r0, r7
 8006316:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <_svfiprintf_r+0x1f4>)
 8006318:	a904      	add	r1, sp, #16
 800631a:	f7fe f8e7 	bl	80044ec <_printf_i>
 800631e:	e7ed      	b.n	80062fc <_svfiprintf_r+0x1c0>
 8006320:	08008db0 	.word	0x08008db0
 8006324:	08008db6 	.word	0x08008db6
 8006328:	08008dba 	.word	0x08008dba
 800632c:	08003fb1 	.word	0x08003fb1
 8006330:	08006085 	.word	0x08006085

08006334 <__sflush_r>:
 8006334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	0716      	lsls	r6, r2, #28
 800633c:	4605      	mov	r5, r0
 800633e:	460c      	mov	r4, r1
 8006340:	d454      	bmi.n	80063ec <__sflush_r+0xb8>
 8006342:	684b      	ldr	r3, [r1, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	dc02      	bgt.n	800634e <__sflush_r+0x1a>
 8006348:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	dd48      	ble.n	80063e0 <__sflush_r+0xac>
 800634e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006350:	2e00      	cmp	r6, #0
 8006352:	d045      	beq.n	80063e0 <__sflush_r+0xac>
 8006354:	2300      	movs	r3, #0
 8006356:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800635a:	682f      	ldr	r7, [r5, #0]
 800635c:	6a21      	ldr	r1, [r4, #32]
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	d030      	beq.n	80063c4 <__sflush_r+0x90>
 8006362:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	0759      	lsls	r1, r3, #29
 8006368:	d505      	bpl.n	8006376 <__sflush_r+0x42>
 800636a:	6863      	ldr	r3, [r4, #4]
 800636c:	1ad2      	subs	r2, r2, r3
 800636e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006370:	b10b      	cbz	r3, 8006376 <__sflush_r+0x42>
 8006372:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006374:	1ad2      	subs	r2, r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	4628      	mov	r0, r5
 800637a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800637c:	6a21      	ldr	r1, [r4, #32]
 800637e:	47b0      	blx	r6
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	89a3      	ldrh	r3, [r4, #12]
 8006384:	d106      	bne.n	8006394 <__sflush_r+0x60>
 8006386:	6829      	ldr	r1, [r5, #0]
 8006388:	291d      	cmp	r1, #29
 800638a:	d82b      	bhi.n	80063e4 <__sflush_r+0xb0>
 800638c:	4a28      	ldr	r2, [pc, #160]	@ (8006430 <__sflush_r+0xfc>)
 800638e:	410a      	asrs	r2, r1
 8006390:	07d6      	lsls	r6, r2, #31
 8006392:	d427      	bmi.n	80063e4 <__sflush_r+0xb0>
 8006394:	2200      	movs	r2, #0
 8006396:	6062      	str	r2, [r4, #4]
 8006398:	6922      	ldr	r2, [r4, #16]
 800639a:	04d9      	lsls	r1, r3, #19
 800639c:	6022      	str	r2, [r4, #0]
 800639e:	d504      	bpl.n	80063aa <__sflush_r+0x76>
 80063a0:	1c42      	adds	r2, r0, #1
 80063a2:	d101      	bne.n	80063a8 <__sflush_r+0x74>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	b903      	cbnz	r3, 80063aa <__sflush_r+0x76>
 80063a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80063aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063ac:	602f      	str	r7, [r5, #0]
 80063ae:	b1b9      	cbz	r1, 80063e0 <__sflush_r+0xac>
 80063b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063b4:	4299      	cmp	r1, r3
 80063b6:	d002      	beq.n	80063be <__sflush_r+0x8a>
 80063b8:	4628      	mov	r0, r5
 80063ba:	f7ff f9e5 	bl	8005788 <_free_r>
 80063be:	2300      	movs	r3, #0
 80063c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80063c2:	e00d      	b.n	80063e0 <__sflush_r+0xac>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4628      	mov	r0, r5
 80063c8:	47b0      	blx	r6
 80063ca:	4602      	mov	r2, r0
 80063cc:	1c50      	adds	r0, r2, #1
 80063ce:	d1c9      	bne.n	8006364 <__sflush_r+0x30>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0c6      	beq.n	8006364 <__sflush_r+0x30>
 80063d6:	2b1d      	cmp	r3, #29
 80063d8:	d001      	beq.n	80063de <__sflush_r+0xaa>
 80063da:	2b16      	cmp	r3, #22
 80063dc:	d11d      	bne.n	800641a <__sflush_r+0xe6>
 80063de:	602f      	str	r7, [r5, #0]
 80063e0:	2000      	movs	r0, #0
 80063e2:	e021      	b.n	8006428 <__sflush_r+0xf4>
 80063e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063e8:	b21b      	sxth	r3, r3
 80063ea:	e01a      	b.n	8006422 <__sflush_r+0xee>
 80063ec:	690f      	ldr	r7, [r1, #16]
 80063ee:	2f00      	cmp	r7, #0
 80063f0:	d0f6      	beq.n	80063e0 <__sflush_r+0xac>
 80063f2:	0793      	lsls	r3, r2, #30
 80063f4:	bf18      	it	ne
 80063f6:	2300      	movne	r3, #0
 80063f8:	680e      	ldr	r6, [r1, #0]
 80063fa:	bf08      	it	eq
 80063fc:	694b      	ldreq	r3, [r1, #20]
 80063fe:	1bf6      	subs	r6, r6, r7
 8006400:	600f      	str	r7, [r1, #0]
 8006402:	608b      	str	r3, [r1, #8]
 8006404:	2e00      	cmp	r6, #0
 8006406:	ddeb      	ble.n	80063e0 <__sflush_r+0xac>
 8006408:	4633      	mov	r3, r6
 800640a:	463a      	mov	r2, r7
 800640c:	4628      	mov	r0, r5
 800640e:	6a21      	ldr	r1, [r4, #32]
 8006410:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006414:	47e0      	blx	ip
 8006416:	2800      	cmp	r0, #0
 8006418:	dc07      	bgt.n	800642a <__sflush_r+0xf6>
 800641a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800641e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006422:	f04f 30ff 	mov.w	r0, #4294967295
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800642a:	4407      	add	r7, r0
 800642c:	1a36      	subs	r6, r6, r0
 800642e:	e7e9      	b.n	8006404 <__sflush_r+0xd0>
 8006430:	dfbffffe 	.word	0xdfbffffe

08006434 <_fflush_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	690b      	ldr	r3, [r1, #16]
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	b913      	cbnz	r3, 8006444 <_fflush_r+0x10>
 800643e:	2500      	movs	r5, #0
 8006440:	4628      	mov	r0, r5
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	b118      	cbz	r0, 800644e <_fflush_r+0x1a>
 8006446:	6a03      	ldr	r3, [r0, #32]
 8006448:	b90b      	cbnz	r3, 800644e <_fflush_r+0x1a>
 800644a:	f7fe f9fb 	bl	8004844 <__sinit>
 800644e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f3      	beq.n	800643e <_fflush_r+0xa>
 8006456:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006458:	07d0      	lsls	r0, r2, #31
 800645a:	d404      	bmi.n	8006466 <_fflush_r+0x32>
 800645c:	0599      	lsls	r1, r3, #22
 800645e:	d402      	bmi.n	8006466 <_fflush_r+0x32>
 8006460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006462:	f7fe fb20 	bl	8004aa6 <__retarget_lock_acquire_recursive>
 8006466:	4628      	mov	r0, r5
 8006468:	4621      	mov	r1, r4
 800646a:	f7ff ff63 	bl	8006334 <__sflush_r>
 800646e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006470:	4605      	mov	r5, r0
 8006472:	07da      	lsls	r2, r3, #31
 8006474:	d4e4      	bmi.n	8006440 <_fflush_r+0xc>
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	059b      	lsls	r3, r3, #22
 800647a:	d4e1      	bmi.n	8006440 <_fflush_r+0xc>
 800647c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800647e:	f7fe fb13 	bl	8004aa8 <__retarget_lock_release_recursive>
 8006482:	e7dd      	b.n	8006440 <_fflush_r+0xc>

08006484 <_sbrk_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	2300      	movs	r3, #0
 8006488:	4d05      	ldr	r5, [pc, #20]	@ (80064a0 <_sbrk_r+0x1c>)
 800648a:	4604      	mov	r4, r0
 800648c:	4608      	mov	r0, r1
 800648e:	602b      	str	r3, [r5, #0]
 8006490:	f7fb fb08 	bl	8001aa4 <_sbrk>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d102      	bne.n	800649e <_sbrk_r+0x1a>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	b103      	cbz	r3, 800649e <_sbrk_r+0x1a>
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	200008a0 	.word	0x200008a0

080064a4 <__assert_func>:
 80064a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064a6:	4614      	mov	r4, r2
 80064a8:	461a      	mov	r2, r3
 80064aa:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <__assert_func+0x2c>)
 80064ac:	4605      	mov	r5, r0
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68d8      	ldr	r0, [r3, #12]
 80064b2:	b954      	cbnz	r4, 80064ca <__assert_func+0x26>
 80064b4:	4b07      	ldr	r3, [pc, #28]	@ (80064d4 <__assert_func+0x30>)
 80064b6:	461c      	mov	r4, r3
 80064b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064bc:	9100      	str	r1, [sp, #0]
 80064be:	462b      	mov	r3, r5
 80064c0:	4905      	ldr	r1, [pc, #20]	@ (80064d8 <__assert_func+0x34>)
 80064c2:	f000 f86f 	bl	80065a4 <fiprintf>
 80064c6:	f000 f87f 	bl	80065c8 <abort>
 80064ca:	4b04      	ldr	r3, [pc, #16]	@ (80064dc <__assert_func+0x38>)
 80064cc:	e7f4      	b.n	80064b8 <__assert_func+0x14>
 80064ce:	bf00      	nop
 80064d0:	200000b8 	.word	0x200000b8
 80064d4:	08008e06 	.word	0x08008e06
 80064d8:	08008dd8 	.word	0x08008dd8
 80064dc:	08008dcb 	.word	0x08008dcb

080064e0 <_calloc_r>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	fba1 5402 	umull	r5, r4, r1, r2
 80064e6:	b93c      	cbnz	r4, 80064f8 <_calloc_r+0x18>
 80064e8:	4629      	mov	r1, r5
 80064ea:	f7ff f9bf 	bl	800586c <_malloc_r>
 80064ee:	4606      	mov	r6, r0
 80064f0:	b928      	cbnz	r0, 80064fe <_calloc_r+0x1e>
 80064f2:	2600      	movs	r6, #0
 80064f4:	4630      	mov	r0, r6
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	220c      	movs	r2, #12
 80064fa:	6002      	str	r2, [r0, #0]
 80064fc:	e7f9      	b.n	80064f2 <_calloc_r+0x12>
 80064fe:	462a      	mov	r2, r5
 8006500:	4621      	mov	r1, r4
 8006502:	f7fe fa52 	bl	80049aa <memset>
 8006506:	e7f5      	b.n	80064f4 <_calloc_r+0x14>

08006508 <__ascii_mbtowc>:
 8006508:	b082      	sub	sp, #8
 800650a:	b901      	cbnz	r1, 800650e <__ascii_mbtowc+0x6>
 800650c:	a901      	add	r1, sp, #4
 800650e:	b142      	cbz	r2, 8006522 <__ascii_mbtowc+0x1a>
 8006510:	b14b      	cbz	r3, 8006526 <__ascii_mbtowc+0x1e>
 8006512:	7813      	ldrb	r3, [r2, #0]
 8006514:	600b      	str	r3, [r1, #0]
 8006516:	7812      	ldrb	r2, [r2, #0]
 8006518:	1e10      	subs	r0, r2, #0
 800651a:	bf18      	it	ne
 800651c:	2001      	movne	r0, #1
 800651e:	b002      	add	sp, #8
 8006520:	4770      	bx	lr
 8006522:	4610      	mov	r0, r2
 8006524:	e7fb      	b.n	800651e <__ascii_mbtowc+0x16>
 8006526:	f06f 0001 	mvn.w	r0, #1
 800652a:	e7f8      	b.n	800651e <__ascii_mbtowc+0x16>

0800652c <_realloc_r>:
 800652c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006530:	4680      	mov	r8, r0
 8006532:	4615      	mov	r5, r2
 8006534:	460c      	mov	r4, r1
 8006536:	b921      	cbnz	r1, 8006542 <_realloc_r+0x16>
 8006538:	4611      	mov	r1, r2
 800653a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800653e:	f7ff b995 	b.w	800586c <_malloc_r>
 8006542:	b92a      	cbnz	r2, 8006550 <_realloc_r+0x24>
 8006544:	f7ff f920 	bl	8005788 <_free_r>
 8006548:	2400      	movs	r4, #0
 800654a:	4620      	mov	r0, r4
 800654c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006550:	f000 f841 	bl	80065d6 <_malloc_usable_size_r>
 8006554:	4285      	cmp	r5, r0
 8006556:	4606      	mov	r6, r0
 8006558:	d802      	bhi.n	8006560 <_realloc_r+0x34>
 800655a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800655e:	d8f4      	bhi.n	800654a <_realloc_r+0x1e>
 8006560:	4629      	mov	r1, r5
 8006562:	4640      	mov	r0, r8
 8006564:	f7ff f982 	bl	800586c <_malloc_r>
 8006568:	4607      	mov	r7, r0
 800656a:	2800      	cmp	r0, #0
 800656c:	d0ec      	beq.n	8006548 <_realloc_r+0x1c>
 800656e:	42b5      	cmp	r5, r6
 8006570:	462a      	mov	r2, r5
 8006572:	4621      	mov	r1, r4
 8006574:	bf28      	it	cs
 8006576:	4632      	movcs	r2, r6
 8006578:	f7fe faa5 	bl	8004ac6 <memcpy>
 800657c:	4621      	mov	r1, r4
 800657e:	4640      	mov	r0, r8
 8006580:	f7ff f902 	bl	8005788 <_free_r>
 8006584:	463c      	mov	r4, r7
 8006586:	e7e0      	b.n	800654a <_realloc_r+0x1e>

08006588 <__ascii_wctomb>:
 8006588:	4603      	mov	r3, r0
 800658a:	4608      	mov	r0, r1
 800658c:	b141      	cbz	r1, 80065a0 <__ascii_wctomb+0x18>
 800658e:	2aff      	cmp	r2, #255	@ 0xff
 8006590:	d904      	bls.n	800659c <__ascii_wctomb+0x14>
 8006592:	228a      	movs	r2, #138	@ 0x8a
 8006594:	f04f 30ff 	mov.w	r0, #4294967295
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	4770      	bx	lr
 800659c:	2001      	movs	r0, #1
 800659e:	700a      	strb	r2, [r1, #0]
 80065a0:	4770      	bx	lr
	...

080065a4 <fiprintf>:
 80065a4:	b40e      	push	{r1, r2, r3}
 80065a6:	b503      	push	{r0, r1, lr}
 80065a8:	4601      	mov	r1, r0
 80065aa:	ab03      	add	r3, sp, #12
 80065ac:	4805      	ldr	r0, [pc, #20]	@ (80065c4 <fiprintf+0x20>)
 80065ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b2:	6800      	ldr	r0, [r0, #0]
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	f000 f83d 	bl	8006634 <_vfiprintf_r>
 80065ba:	b002      	add	sp, #8
 80065bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c0:	b003      	add	sp, #12
 80065c2:	4770      	bx	lr
 80065c4:	200000b8 	.word	0x200000b8

080065c8 <abort>:
 80065c8:	2006      	movs	r0, #6
 80065ca:	b508      	push	{r3, lr}
 80065cc:	f000 fa06 	bl	80069dc <raise>
 80065d0:	2001      	movs	r0, #1
 80065d2:	f7fb f9f2 	bl	80019ba <_exit>

080065d6 <_malloc_usable_size_r>:
 80065d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065da:	1f18      	subs	r0, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	bfbc      	itt	lt
 80065e0:	580b      	ldrlt	r3, [r1, r0]
 80065e2:	18c0      	addlt	r0, r0, r3
 80065e4:	4770      	bx	lr

080065e6 <__sfputc_r>:
 80065e6:	6893      	ldr	r3, [r2, #8]
 80065e8:	b410      	push	{r4}
 80065ea:	3b01      	subs	r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	6093      	str	r3, [r2, #8]
 80065f0:	da07      	bge.n	8006602 <__sfputc_r+0x1c>
 80065f2:	6994      	ldr	r4, [r2, #24]
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	db01      	blt.n	80065fc <__sfputc_r+0x16>
 80065f8:	290a      	cmp	r1, #10
 80065fa:	d102      	bne.n	8006602 <__sfputc_r+0x1c>
 80065fc:	bc10      	pop	{r4}
 80065fe:	f000 b931 	b.w	8006864 <__swbuf_r>
 8006602:	6813      	ldr	r3, [r2, #0]
 8006604:	1c58      	adds	r0, r3, #1
 8006606:	6010      	str	r0, [r2, #0]
 8006608:	7019      	strb	r1, [r3, #0]
 800660a:	4608      	mov	r0, r1
 800660c:	bc10      	pop	{r4}
 800660e:	4770      	bx	lr

08006610 <__sfputs_r>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	4606      	mov	r6, r0
 8006614:	460f      	mov	r7, r1
 8006616:	4614      	mov	r4, r2
 8006618:	18d5      	adds	r5, r2, r3
 800661a:	42ac      	cmp	r4, r5
 800661c:	d101      	bne.n	8006622 <__sfputs_r+0x12>
 800661e:	2000      	movs	r0, #0
 8006620:	e007      	b.n	8006632 <__sfputs_r+0x22>
 8006622:	463a      	mov	r2, r7
 8006624:	4630      	mov	r0, r6
 8006626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662a:	f7ff ffdc 	bl	80065e6 <__sfputc_r>
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	d1f3      	bne.n	800661a <__sfputs_r+0xa>
 8006632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006634 <_vfiprintf_r>:
 8006634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006638:	460d      	mov	r5, r1
 800663a:	4614      	mov	r4, r2
 800663c:	4698      	mov	r8, r3
 800663e:	4606      	mov	r6, r0
 8006640:	b09d      	sub	sp, #116	@ 0x74
 8006642:	b118      	cbz	r0, 800664c <_vfiprintf_r+0x18>
 8006644:	6a03      	ldr	r3, [r0, #32]
 8006646:	b90b      	cbnz	r3, 800664c <_vfiprintf_r+0x18>
 8006648:	f7fe f8fc 	bl	8004844 <__sinit>
 800664c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800664e:	07d9      	lsls	r1, r3, #31
 8006650:	d405      	bmi.n	800665e <_vfiprintf_r+0x2a>
 8006652:	89ab      	ldrh	r3, [r5, #12]
 8006654:	059a      	lsls	r2, r3, #22
 8006656:	d402      	bmi.n	800665e <_vfiprintf_r+0x2a>
 8006658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800665a:	f7fe fa24 	bl	8004aa6 <__retarget_lock_acquire_recursive>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	071b      	lsls	r3, r3, #28
 8006662:	d501      	bpl.n	8006668 <_vfiprintf_r+0x34>
 8006664:	692b      	ldr	r3, [r5, #16]
 8006666:	b99b      	cbnz	r3, 8006690 <_vfiprintf_r+0x5c>
 8006668:	4629      	mov	r1, r5
 800666a:	4630      	mov	r0, r6
 800666c:	f000 f938 	bl	80068e0 <__swsetup_r>
 8006670:	b170      	cbz	r0, 8006690 <_vfiprintf_r+0x5c>
 8006672:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006674:	07dc      	lsls	r4, r3, #31
 8006676:	d504      	bpl.n	8006682 <_vfiprintf_r+0x4e>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	b01d      	add	sp, #116	@ 0x74
 800667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	0598      	lsls	r0, r3, #22
 8006686:	d4f7      	bmi.n	8006678 <_vfiprintf_r+0x44>
 8006688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800668a:	f7fe fa0d 	bl	8004aa8 <__retarget_lock_release_recursive>
 800668e:	e7f3      	b.n	8006678 <_vfiprintf_r+0x44>
 8006690:	2300      	movs	r3, #0
 8006692:	9309      	str	r3, [sp, #36]	@ 0x24
 8006694:	2320      	movs	r3, #32
 8006696:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800669a:	2330      	movs	r3, #48	@ 0x30
 800669c:	f04f 0901 	mov.w	r9, #1
 80066a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006850 <_vfiprintf_r+0x21c>
 80066a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066ac:	4623      	mov	r3, r4
 80066ae:	469a      	mov	sl, r3
 80066b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066b4:	b10a      	cbz	r2, 80066ba <_vfiprintf_r+0x86>
 80066b6:	2a25      	cmp	r2, #37	@ 0x25
 80066b8:	d1f9      	bne.n	80066ae <_vfiprintf_r+0x7a>
 80066ba:	ebba 0b04 	subs.w	fp, sl, r4
 80066be:	d00b      	beq.n	80066d8 <_vfiprintf_r+0xa4>
 80066c0:	465b      	mov	r3, fp
 80066c2:	4622      	mov	r2, r4
 80066c4:	4629      	mov	r1, r5
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7ff ffa2 	bl	8006610 <__sfputs_r>
 80066cc:	3001      	adds	r0, #1
 80066ce:	f000 80a7 	beq.w	8006820 <_vfiprintf_r+0x1ec>
 80066d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066d4:	445a      	add	r2, fp
 80066d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80066d8:	f89a 3000 	ldrb.w	r3, [sl]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 809f 	beq.w	8006820 <_vfiprintf_r+0x1ec>
 80066e2:	2300      	movs	r3, #0
 80066e4:	f04f 32ff 	mov.w	r2, #4294967295
 80066e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066ec:	f10a 0a01 	add.w	sl, sl, #1
 80066f0:	9304      	str	r3, [sp, #16]
 80066f2:	9307      	str	r3, [sp, #28]
 80066f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80066fa:	4654      	mov	r4, sl
 80066fc:	2205      	movs	r2, #5
 80066fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006702:	4853      	ldr	r0, [pc, #332]	@ (8006850 <_vfiprintf_r+0x21c>)
 8006704:	f7fe f9d1 	bl	8004aaa <memchr>
 8006708:	9a04      	ldr	r2, [sp, #16]
 800670a:	b9d8      	cbnz	r0, 8006744 <_vfiprintf_r+0x110>
 800670c:	06d1      	lsls	r1, r2, #27
 800670e:	bf44      	itt	mi
 8006710:	2320      	movmi	r3, #32
 8006712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006716:	0713      	lsls	r3, r2, #28
 8006718:	bf44      	itt	mi
 800671a:	232b      	movmi	r3, #43	@ 0x2b
 800671c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006720:	f89a 3000 	ldrb.w	r3, [sl]
 8006724:	2b2a      	cmp	r3, #42	@ 0x2a
 8006726:	d015      	beq.n	8006754 <_vfiprintf_r+0x120>
 8006728:	4654      	mov	r4, sl
 800672a:	2000      	movs	r0, #0
 800672c:	f04f 0c0a 	mov.w	ip, #10
 8006730:	9a07      	ldr	r2, [sp, #28]
 8006732:	4621      	mov	r1, r4
 8006734:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006738:	3b30      	subs	r3, #48	@ 0x30
 800673a:	2b09      	cmp	r3, #9
 800673c:	d94b      	bls.n	80067d6 <_vfiprintf_r+0x1a2>
 800673e:	b1b0      	cbz	r0, 800676e <_vfiprintf_r+0x13a>
 8006740:	9207      	str	r2, [sp, #28]
 8006742:	e014      	b.n	800676e <_vfiprintf_r+0x13a>
 8006744:	eba0 0308 	sub.w	r3, r0, r8
 8006748:	fa09 f303 	lsl.w	r3, r9, r3
 800674c:	4313      	orrs	r3, r2
 800674e:	46a2      	mov	sl, r4
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	e7d2      	b.n	80066fa <_vfiprintf_r+0xc6>
 8006754:	9b03      	ldr	r3, [sp, #12]
 8006756:	1d19      	adds	r1, r3, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	9103      	str	r1, [sp, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	bfbb      	ittet	lt
 8006760:	425b      	neglt	r3, r3
 8006762:	f042 0202 	orrlt.w	r2, r2, #2
 8006766:	9307      	strge	r3, [sp, #28]
 8006768:	9307      	strlt	r3, [sp, #28]
 800676a:	bfb8      	it	lt
 800676c:	9204      	strlt	r2, [sp, #16]
 800676e:	7823      	ldrb	r3, [r4, #0]
 8006770:	2b2e      	cmp	r3, #46	@ 0x2e
 8006772:	d10a      	bne.n	800678a <_vfiprintf_r+0x156>
 8006774:	7863      	ldrb	r3, [r4, #1]
 8006776:	2b2a      	cmp	r3, #42	@ 0x2a
 8006778:	d132      	bne.n	80067e0 <_vfiprintf_r+0x1ac>
 800677a:	9b03      	ldr	r3, [sp, #12]
 800677c:	3402      	adds	r4, #2
 800677e:	1d1a      	adds	r2, r3, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	9203      	str	r2, [sp, #12]
 8006784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006788:	9305      	str	r3, [sp, #20]
 800678a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006854 <_vfiprintf_r+0x220>
 800678e:	2203      	movs	r2, #3
 8006790:	4650      	mov	r0, sl
 8006792:	7821      	ldrb	r1, [r4, #0]
 8006794:	f7fe f989 	bl	8004aaa <memchr>
 8006798:	b138      	cbz	r0, 80067aa <_vfiprintf_r+0x176>
 800679a:	2240      	movs	r2, #64	@ 0x40
 800679c:	9b04      	ldr	r3, [sp, #16]
 800679e:	eba0 000a 	sub.w	r0, r0, sl
 80067a2:	4082      	lsls	r2, r0
 80067a4:	4313      	orrs	r3, r2
 80067a6:	3401      	adds	r4, #1
 80067a8:	9304      	str	r3, [sp, #16]
 80067aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ae:	2206      	movs	r2, #6
 80067b0:	4829      	ldr	r0, [pc, #164]	@ (8006858 <_vfiprintf_r+0x224>)
 80067b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067b6:	f7fe f978 	bl	8004aaa <memchr>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d03f      	beq.n	800683e <_vfiprintf_r+0x20a>
 80067be:	4b27      	ldr	r3, [pc, #156]	@ (800685c <_vfiprintf_r+0x228>)
 80067c0:	bb1b      	cbnz	r3, 800680a <_vfiprintf_r+0x1d6>
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	3307      	adds	r3, #7
 80067c6:	f023 0307 	bic.w	r3, r3, #7
 80067ca:	3308      	adds	r3, #8
 80067cc:	9303      	str	r3, [sp, #12]
 80067ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d0:	443b      	add	r3, r7
 80067d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067d4:	e76a      	b.n	80066ac <_vfiprintf_r+0x78>
 80067d6:	460c      	mov	r4, r1
 80067d8:	2001      	movs	r0, #1
 80067da:	fb0c 3202 	mla	r2, ip, r2, r3
 80067de:	e7a8      	b.n	8006732 <_vfiprintf_r+0xfe>
 80067e0:	2300      	movs	r3, #0
 80067e2:	f04f 0c0a 	mov.w	ip, #10
 80067e6:	4619      	mov	r1, r3
 80067e8:	3401      	adds	r4, #1
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	4620      	mov	r0, r4
 80067ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067f2:	3a30      	subs	r2, #48	@ 0x30
 80067f4:	2a09      	cmp	r2, #9
 80067f6:	d903      	bls.n	8006800 <_vfiprintf_r+0x1cc>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0c6      	beq.n	800678a <_vfiprintf_r+0x156>
 80067fc:	9105      	str	r1, [sp, #20]
 80067fe:	e7c4      	b.n	800678a <_vfiprintf_r+0x156>
 8006800:	4604      	mov	r4, r0
 8006802:	2301      	movs	r3, #1
 8006804:	fb0c 2101 	mla	r1, ip, r1, r2
 8006808:	e7f0      	b.n	80067ec <_vfiprintf_r+0x1b8>
 800680a:	ab03      	add	r3, sp, #12
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	462a      	mov	r2, r5
 8006810:	4630      	mov	r0, r6
 8006812:	4b13      	ldr	r3, [pc, #76]	@ (8006860 <_vfiprintf_r+0x22c>)
 8006814:	a904      	add	r1, sp, #16
 8006816:	f7fd fbcb 	bl	8003fb0 <_printf_float>
 800681a:	4607      	mov	r7, r0
 800681c:	1c78      	adds	r0, r7, #1
 800681e:	d1d6      	bne.n	80067ce <_vfiprintf_r+0x19a>
 8006820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006822:	07d9      	lsls	r1, r3, #31
 8006824:	d405      	bmi.n	8006832 <_vfiprintf_r+0x1fe>
 8006826:	89ab      	ldrh	r3, [r5, #12]
 8006828:	059a      	lsls	r2, r3, #22
 800682a:	d402      	bmi.n	8006832 <_vfiprintf_r+0x1fe>
 800682c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800682e:	f7fe f93b 	bl	8004aa8 <__retarget_lock_release_recursive>
 8006832:	89ab      	ldrh	r3, [r5, #12]
 8006834:	065b      	lsls	r3, r3, #25
 8006836:	f53f af1f 	bmi.w	8006678 <_vfiprintf_r+0x44>
 800683a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800683c:	e71e      	b.n	800667c <_vfiprintf_r+0x48>
 800683e:	ab03      	add	r3, sp, #12
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	462a      	mov	r2, r5
 8006844:	4630      	mov	r0, r6
 8006846:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <_vfiprintf_r+0x22c>)
 8006848:	a904      	add	r1, sp, #16
 800684a:	f7fd fe4f 	bl	80044ec <_printf_i>
 800684e:	e7e4      	b.n	800681a <_vfiprintf_r+0x1e6>
 8006850:	08008db0 	.word	0x08008db0
 8006854:	08008db6 	.word	0x08008db6
 8006858:	08008dba 	.word	0x08008dba
 800685c:	08003fb1 	.word	0x08003fb1
 8006860:	08006611 	.word	0x08006611

08006864 <__swbuf_r>:
 8006864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006866:	460e      	mov	r6, r1
 8006868:	4614      	mov	r4, r2
 800686a:	4605      	mov	r5, r0
 800686c:	b118      	cbz	r0, 8006876 <__swbuf_r+0x12>
 800686e:	6a03      	ldr	r3, [r0, #32]
 8006870:	b90b      	cbnz	r3, 8006876 <__swbuf_r+0x12>
 8006872:	f7fd ffe7 	bl	8004844 <__sinit>
 8006876:	69a3      	ldr	r3, [r4, #24]
 8006878:	60a3      	str	r3, [r4, #8]
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	071a      	lsls	r2, r3, #28
 800687e:	d501      	bpl.n	8006884 <__swbuf_r+0x20>
 8006880:	6923      	ldr	r3, [r4, #16]
 8006882:	b943      	cbnz	r3, 8006896 <__swbuf_r+0x32>
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f000 f82a 	bl	80068e0 <__swsetup_r>
 800688c:	b118      	cbz	r0, 8006896 <__swbuf_r+0x32>
 800688e:	f04f 37ff 	mov.w	r7, #4294967295
 8006892:	4638      	mov	r0, r7
 8006894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	6922      	ldr	r2, [r4, #16]
 800689a:	b2f6      	uxtb	r6, r6
 800689c:	1a98      	subs	r0, r3, r2
 800689e:	6963      	ldr	r3, [r4, #20]
 80068a0:	4637      	mov	r7, r6
 80068a2:	4283      	cmp	r3, r0
 80068a4:	dc05      	bgt.n	80068b2 <__swbuf_r+0x4e>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f7ff fdc3 	bl	8006434 <_fflush_r>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d1ed      	bne.n	800688e <__swbuf_r+0x2a>
 80068b2:	68a3      	ldr	r3, [r4, #8]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	60a3      	str	r3, [r4, #8]
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	6022      	str	r2, [r4, #0]
 80068be:	701e      	strb	r6, [r3, #0]
 80068c0:	6962      	ldr	r2, [r4, #20]
 80068c2:	1c43      	adds	r3, r0, #1
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d004      	beq.n	80068d2 <__swbuf_r+0x6e>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	07db      	lsls	r3, r3, #31
 80068cc:	d5e1      	bpl.n	8006892 <__swbuf_r+0x2e>
 80068ce:	2e0a      	cmp	r6, #10
 80068d0:	d1df      	bne.n	8006892 <__swbuf_r+0x2e>
 80068d2:	4621      	mov	r1, r4
 80068d4:	4628      	mov	r0, r5
 80068d6:	f7ff fdad 	bl	8006434 <_fflush_r>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d0d9      	beq.n	8006892 <__swbuf_r+0x2e>
 80068de:	e7d6      	b.n	800688e <__swbuf_r+0x2a>

080068e0 <__swsetup_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4b29      	ldr	r3, [pc, #164]	@ (8006988 <__swsetup_r+0xa8>)
 80068e4:	4605      	mov	r5, r0
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	460c      	mov	r4, r1
 80068ea:	b118      	cbz	r0, 80068f4 <__swsetup_r+0x14>
 80068ec:	6a03      	ldr	r3, [r0, #32]
 80068ee:	b90b      	cbnz	r3, 80068f4 <__swsetup_r+0x14>
 80068f0:	f7fd ffa8 	bl	8004844 <__sinit>
 80068f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068f8:	0719      	lsls	r1, r3, #28
 80068fa:	d422      	bmi.n	8006942 <__swsetup_r+0x62>
 80068fc:	06da      	lsls	r2, r3, #27
 80068fe:	d407      	bmi.n	8006910 <__swsetup_r+0x30>
 8006900:	2209      	movs	r2, #9
 8006902:	602a      	str	r2, [r5, #0]
 8006904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	e033      	b.n	8006978 <__swsetup_r+0x98>
 8006910:	0758      	lsls	r0, r3, #29
 8006912:	d512      	bpl.n	800693a <__swsetup_r+0x5a>
 8006914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006916:	b141      	cbz	r1, 800692a <__swsetup_r+0x4a>
 8006918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800691c:	4299      	cmp	r1, r3
 800691e:	d002      	beq.n	8006926 <__swsetup_r+0x46>
 8006920:	4628      	mov	r0, r5
 8006922:	f7fe ff31 	bl	8005788 <_free_r>
 8006926:	2300      	movs	r3, #0
 8006928:	6363      	str	r3, [r4, #52]	@ 0x34
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	2300      	movs	r3, #0
 8006934:	6063      	str	r3, [r4, #4]
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	f043 0308 	orr.w	r3, r3, #8
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	6923      	ldr	r3, [r4, #16]
 8006944:	b94b      	cbnz	r3, 800695a <__swsetup_r+0x7a>
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800694c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006950:	d003      	beq.n	800695a <__swsetup_r+0x7a>
 8006952:	4621      	mov	r1, r4
 8006954:	4628      	mov	r0, r5
 8006956:	f000 f882 	bl	8006a5e <__smakebuf_r>
 800695a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800695e:	f013 0201 	ands.w	r2, r3, #1
 8006962:	d00a      	beq.n	800697a <__swsetup_r+0x9a>
 8006964:	2200      	movs	r2, #0
 8006966:	60a2      	str	r2, [r4, #8]
 8006968:	6962      	ldr	r2, [r4, #20]
 800696a:	4252      	negs	r2, r2
 800696c:	61a2      	str	r2, [r4, #24]
 800696e:	6922      	ldr	r2, [r4, #16]
 8006970:	b942      	cbnz	r2, 8006984 <__swsetup_r+0xa4>
 8006972:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006976:	d1c5      	bne.n	8006904 <__swsetup_r+0x24>
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	0799      	lsls	r1, r3, #30
 800697c:	bf58      	it	pl
 800697e:	6962      	ldrpl	r2, [r4, #20]
 8006980:	60a2      	str	r2, [r4, #8]
 8006982:	e7f4      	b.n	800696e <__swsetup_r+0x8e>
 8006984:	2000      	movs	r0, #0
 8006986:	e7f7      	b.n	8006978 <__swsetup_r+0x98>
 8006988:	200000b8 	.word	0x200000b8

0800698c <_raise_r>:
 800698c:	291f      	cmp	r1, #31
 800698e:	b538      	push	{r3, r4, r5, lr}
 8006990:	4605      	mov	r5, r0
 8006992:	460c      	mov	r4, r1
 8006994:	d904      	bls.n	80069a0 <_raise_r+0x14>
 8006996:	2316      	movs	r3, #22
 8006998:	6003      	str	r3, [r0, #0]
 800699a:	f04f 30ff 	mov.w	r0, #4294967295
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80069a2:	b112      	cbz	r2, 80069aa <_raise_r+0x1e>
 80069a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069a8:	b94b      	cbnz	r3, 80069be <_raise_r+0x32>
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f830 	bl	8006a10 <_getpid_r>
 80069b0:	4622      	mov	r2, r4
 80069b2:	4601      	mov	r1, r0
 80069b4:	4628      	mov	r0, r5
 80069b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ba:	f000 b817 	b.w	80069ec <_kill_r>
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d00a      	beq.n	80069d8 <_raise_r+0x4c>
 80069c2:	1c59      	adds	r1, r3, #1
 80069c4:	d103      	bne.n	80069ce <_raise_r+0x42>
 80069c6:	2316      	movs	r3, #22
 80069c8:	6003      	str	r3, [r0, #0]
 80069ca:	2001      	movs	r0, #1
 80069cc:	e7e7      	b.n	800699e <_raise_r+0x12>
 80069ce:	2100      	movs	r1, #0
 80069d0:	4620      	mov	r0, r4
 80069d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80069d6:	4798      	blx	r3
 80069d8:	2000      	movs	r0, #0
 80069da:	e7e0      	b.n	800699e <_raise_r+0x12>

080069dc <raise>:
 80069dc:	4b02      	ldr	r3, [pc, #8]	@ (80069e8 <raise+0xc>)
 80069de:	4601      	mov	r1, r0
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	f7ff bfd3 	b.w	800698c <_raise_r>
 80069e6:	bf00      	nop
 80069e8:	200000b8 	.word	0x200000b8

080069ec <_kill_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	2300      	movs	r3, #0
 80069f0:	4d06      	ldr	r5, [pc, #24]	@ (8006a0c <_kill_r+0x20>)
 80069f2:	4604      	mov	r4, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	4611      	mov	r1, r2
 80069f8:	602b      	str	r3, [r5, #0]
 80069fa:	f7fa ffce 	bl	800199a <_kill>
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	d102      	bne.n	8006a08 <_kill_r+0x1c>
 8006a02:	682b      	ldr	r3, [r5, #0]
 8006a04:	b103      	cbz	r3, 8006a08 <_kill_r+0x1c>
 8006a06:	6023      	str	r3, [r4, #0]
 8006a08:	bd38      	pop	{r3, r4, r5, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200008a0 	.word	0x200008a0

08006a10 <_getpid_r>:
 8006a10:	f7fa bfbc 	b.w	800198c <_getpid>

08006a14 <__swhatbuf_r>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	460c      	mov	r4, r1
 8006a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a1c:	4615      	mov	r5, r2
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	461e      	mov	r6, r3
 8006a22:	b096      	sub	sp, #88	@ 0x58
 8006a24:	da0c      	bge.n	8006a40 <__swhatbuf_r+0x2c>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	2100      	movs	r1, #0
 8006a2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a2e:	bf14      	ite	ne
 8006a30:	2340      	movne	r3, #64	@ 0x40
 8006a32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a36:	2000      	movs	r0, #0
 8006a38:	6031      	str	r1, [r6, #0]
 8006a3a:	602b      	str	r3, [r5, #0]
 8006a3c:	b016      	add	sp, #88	@ 0x58
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
 8006a40:	466a      	mov	r2, sp
 8006a42:	f000 f849 	bl	8006ad8 <_fstat_r>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	dbed      	blt.n	8006a26 <__swhatbuf_r+0x12>
 8006a4a:	9901      	ldr	r1, [sp, #4]
 8006a4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a54:	4259      	negs	r1, r3
 8006a56:	4159      	adcs	r1, r3
 8006a58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a5c:	e7eb      	b.n	8006a36 <__swhatbuf_r+0x22>

08006a5e <__smakebuf_r>:
 8006a5e:	898b      	ldrh	r3, [r1, #12]
 8006a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a62:	079d      	lsls	r5, r3, #30
 8006a64:	4606      	mov	r6, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	d507      	bpl.n	8006a7a <__smakebuf_r+0x1c>
 8006a6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a6e:	6023      	str	r3, [r4, #0]
 8006a70:	6123      	str	r3, [r4, #16]
 8006a72:	2301      	movs	r3, #1
 8006a74:	6163      	str	r3, [r4, #20]
 8006a76:	b003      	add	sp, #12
 8006a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7a:	466a      	mov	r2, sp
 8006a7c:	ab01      	add	r3, sp, #4
 8006a7e:	f7ff ffc9 	bl	8006a14 <__swhatbuf_r>
 8006a82:	9f00      	ldr	r7, [sp, #0]
 8006a84:	4605      	mov	r5, r0
 8006a86:	4639      	mov	r1, r7
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f7fe feef 	bl	800586c <_malloc_r>
 8006a8e:	b948      	cbnz	r0, 8006aa4 <__smakebuf_r+0x46>
 8006a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a94:	059a      	lsls	r2, r3, #22
 8006a96:	d4ee      	bmi.n	8006a76 <__smakebuf_r+0x18>
 8006a98:	f023 0303 	bic.w	r3, r3, #3
 8006a9c:	f043 0302 	orr.w	r3, r3, #2
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	e7e2      	b.n	8006a6a <__smakebuf_r+0xc>
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	9b01      	ldr	r3, [sp, #4]
 8006ab2:	6020      	str	r0, [r4, #0]
 8006ab4:	b15b      	cbz	r3, 8006ace <__smakebuf_r+0x70>
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006abc:	f000 f81e 	bl	8006afc <_isatty_r>
 8006ac0:	b128      	cbz	r0, 8006ace <__smakebuf_r+0x70>
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f023 0303 	bic.w	r3, r3, #3
 8006ac8:	f043 0301 	orr.w	r3, r3, #1
 8006acc:	81a3      	strh	r3, [r4, #12]
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	431d      	orrs	r5, r3
 8006ad2:	81a5      	strh	r5, [r4, #12]
 8006ad4:	e7cf      	b.n	8006a76 <__smakebuf_r+0x18>
	...

08006ad8 <_fstat_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	2300      	movs	r3, #0
 8006adc:	4d06      	ldr	r5, [pc, #24]	@ (8006af8 <_fstat_r+0x20>)
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	f7fa ffb7 	bl	8001a58 <_fstat>
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	d102      	bne.n	8006af4 <_fstat_r+0x1c>
 8006aee:	682b      	ldr	r3, [r5, #0]
 8006af0:	b103      	cbz	r3, 8006af4 <_fstat_r+0x1c>
 8006af2:	6023      	str	r3, [r4, #0]
 8006af4:	bd38      	pop	{r3, r4, r5, pc}
 8006af6:	bf00      	nop
 8006af8:	200008a0 	.word	0x200008a0

08006afc <_isatty_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	2300      	movs	r3, #0
 8006b00:	4d05      	ldr	r5, [pc, #20]	@ (8006b18 <_isatty_r+0x1c>)
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	602b      	str	r3, [r5, #0]
 8006b08:	f7fa ffb5 	bl	8001a76 <_isatty>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_isatty_r+0x1a>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_isatty_r+0x1a>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	200008a0 	.word	0x200008a0

08006b1c <atan2>:
 8006b1c:	f000 ba90 	b.w	8007040 <__ieee754_atan2>

08006b20 <sqrt>:
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	4606      	mov	r6, r0
 8006b24:	460f      	mov	r7, r1
 8006b26:	f000 f9b3 	bl	8006e90 <__ieee754_sqrt>
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460d      	mov	r5, r1
 8006b30:	463b      	mov	r3, r7
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	f7f9 ff69 	bl	8000a0c <__aeabi_dcmpun>
 8006b3a:	b990      	cbnz	r0, 8006b62 <sqrt+0x42>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4630      	mov	r0, r6
 8006b42:	4639      	mov	r1, r7
 8006b44:	f7f9 ff3a 	bl	80009bc <__aeabi_dcmplt>
 8006b48:	b158      	cbz	r0, 8006b62 <sqrt+0x42>
 8006b4a:	f7fd ff81 	bl	8004a50 <__errno>
 8006b4e:	2321      	movs	r3, #33	@ 0x21
 8006b50:	2200      	movs	r2, #0
 8006b52:	6003      	str	r3, [r0, #0]
 8006b54:	2300      	movs	r3, #0
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f7f9 fde7 	bl	800072c <__aeabi_ddiv>
 8006b5e:	4604      	mov	r4, r0
 8006b60:	460d      	mov	r5, r1
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b68 <atan>:
 8006b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	4bbc      	ldr	r3, [pc, #752]	@ (8006e60 <atan+0x2f8>)
 8006b6e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8006b72:	429e      	cmp	r6, r3
 8006b74:	4604      	mov	r4, r0
 8006b76:	460d      	mov	r5, r1
 8006b78:	468b      	mov	fp, r1
 8006b7a:	d918      	bls.n	8006bae <atan+0x46>
 8006b7c:	4bb9      	ldr	r3, [pc, #740]	@ (8006e64 <atan+0x2fc>)
 8006b7e:	429e      	cmp	r6, r3
 8006b80:	d801      	bhi.n	8006b86 <atan+0x1e>
 8006b82:	d109      	bne.n	8006b98 <atan+0x30>
 8006b84:	b140      	cbz	r0, 8006b98 <atan+0x30>
 8006b86:	4622      	mov	r2, r4
 8006b88:	462b      	mov	r3, r5
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	f7f9 faed 	bl	800016c <__adddf3>
 8006b92:	4604      	mov	r4, r0
 8006b94:	460d      	mov	r5, r1
 8006b96:	e006      	b.n	8006ba6 <atan+0x3e>
 8006b98:	f1bb 0f00 	cmp.w	fp, #0
 8006b9c:	f340 8123 	ble.w	8006de6 <atan+0x27e>
 8006ba0:	a593      	add	r5, pc, #588	@ (adr r5, 8006df0 <atan+0x288>)
 8006ba2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	4629      	mov	r1, r5
 8006baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bae:	4bae      	ldr	r3, [pc, #696]	@ (8006e68 <atan+0x300>)
 8006bb0:	429e      	cmp	r6, r3
 8006bb2:	d811      	bhi.n	8006bd8 <atan+0x70>
 8006bb4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006bb8:	429e      	cmp	r6, r3
 8006bba:	d80a      	bhi.n	8006bd2 <atan+0x6a>
 8006bbc:	a38e      	add	r3, pc, #568	@ (adr r3, 8006df8 <atan+0x290>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f7f9 fad3 	bl	800016c <__adddf3>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4ba8      	ldr	r3, [pc, #672]	@ (8006e6c <atan+0x304>)
 8006bca:	f7f9 ff15 	bl	80009f8 <__aeabi_dcmpgt>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d1e9      	bne.n	8006ba6 <atan+0x3e>
 8006bd2:	f04f 3aff 	mov.w	sl, #4294967295
 8006bd6:	e027      	b.n	8006c28 <atan+0xc0>
 8006bd8:	f000 f956 	bl	8006e88 <fabs>
 8006bdc:	4ba4      	ldr	r3, [pc, #656]	@ (8006e70 <atan+0x308>)
 8006bde:	4604      	mov	r4, r0
 8006be0:	429e      	cmp	r6, r3
 8006be2:	460d      	mov	r5, r1
 8006be4:	f200 80b8 	bhi.w	8006d58 <atan+0x1f0>
 8006be8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006bec:	429e      	cmp	r6, r3
 8006bee:	f200 809c 	bhi.w	8006d2a <atan+0x1c2>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	f7f9 fab9 	bl	800016c <__adddf3>
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8006e6c <atan+0x304>)
 8006bfe:	f7f9 fab3 	bl	8000168 <__aeabi_dsub>
 8006c02:	2200      	movs	r2, #0
 8006c04:	4606      	mov	r6, r0
 8006c06:	460f      	mov	r7, r1
 8006c08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	4629      	mov	r1, r5
 8006c10:	f7f9 faac 	bl	800016c <__adddf3>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	f7f9 fd86 	bl	800072c <__aeabi_ddiv>
 8006c20:	f04f 0a00 	mov.w	sl, #0
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	4622      	mov	r2, r4
 8006c2a:	462b      	mov	r3, r5
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	4629      	mov	r1, r5
 8006c30:	f7f9 fc52 	bl	80004d8 <__aeabi_dmul>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4689      	mov	r9, r1
 8006c3c:	f7f9 fc4c 	bl	80004d8 <__aeabi_dmul>
 8006c40:	a36f      	add	r3, pc, #444	@ (adr r3, 8006e00 <atan+0x298>)
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	4606      	mov	r6, r0
 8006c48:	460f      	mov	r7, r1
 8006c4a:	f7f9 fc45 	bl	80004d8 <__aeabi_dmul>
 8006c4e:	a36e      	add	r3, pc, #440	@ (adr r3, 8006e08 <atan+0x2a0>)
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f7f9 fa8a 	bl	800016c <__adddf3>
 8006c58:	4632      	mov	r2, r6
 8006c5a:	463b      	mov	r3, r7
 8006c5c:	f7f9 fc3c 	bl	80004d8 <__aeabi_dmul>
 8006c60:	a36b      	add	r3, pc, #428	@ (adr r3, 8006e10 <atan+0x2a8>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f7f9 fa81 	bl	800016c <__adddf3>
 8006c6a:	4632      	mov	r2, r6
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	f7f9 fc33 	bl	80004d8 <__aeabi_dmul>
 8006c72:	a369      	add	r3, pc, #420	@ (adr r3, 8006e18 <atan+0x2b0>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f7f9 fa78 	bl	800016c <__adddf3>
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	463b      	mov	r3, r7
 8006c80:	f7f9 fc2a 	bl	80004d8 <__aeabi_dmul>
 8006c84:	a366      	add	r3, pc, #408	@ (adr r3, 8006e20 <atan+0x2b8>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f7f9 fa6f 	bl	800016c <__adddf3>
 8006c8e:	4632      	mov	r2, r6
 8006c90:	463b      	mov	r3, r7
 8006c92:	f7f9 fc21 	bl	80004d8 <__aeabi_dmul>
 8006c96:	a364      	add	r3, pc, #400	@ (adr r3, 8006e28 <atan+0x2c0>)
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	f7f9 fa66 	bl	800016c <__adddf3>
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	f7f9 fc18 	bl	80004d8 <__aeabi_dmul>
 8006ca8:	a361      	add	r3, pc, #388	@ (adr r3, 8006e30 <atan+0x2c8>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	4680      	mov	r8, r0
 8006cb0:	4689      	mov	r9, r1
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	f7f9 fc0f 	bl	80004d8 <__aeabi_dmul>
 8006cba:	a35f      	add	r3, pc, #380	@ (adr r3, 8006e38 <atan+0x2d0>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f7f9 fa52 	bl	8000168 <__aeabi_dsub>
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	f7f9 fc06 	bl	80004d8 <__aeabi_dmul>
 8006ccc:	a35c      	add	r3, pc, #368	@ (adr r3, 8006e40 <atan+0x2d8>)
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	f7f9 fa49 	bl	8000168 <__aeabi_dsub>
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	463b      	mov	r3, r7
 8006cda:	f7f9 fbfd 	bl	80004d8 <__aeabi_dmul>
 8006cde:	a35a      	add	r3, pc, #360	@ (adr r3, 8006e48 <atan+0x2e0>)
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f7f9 fa40 	bl	8000168 <__aeabi_dsub>
 8006ce8:	4632      	mov	r2, r6
 8006cea:	463b      	mov	r3, r7
 8006cec:	f7f9 fbf4 	bl	80004d8 <__aeabi_dmul>
 8006cf0:	a357      	add	r3, pc, #348	@ (adr r3, 8006e50 <atan+0x2e8>)
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	f7f9 fa37 	bl	8000168 <__aeabi_dsub>
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	f7f9 fbeb 	bl	80004d8 <__aeabi_dmul>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4640      	mov	r0, r8
 8006d08:	4649      	mov	r1, r9
 8006d0a:	f7f9 fa2f 	bl	800016c <__adddf3>
 8006d0e:	4622      	mov	r2, r4
 8006d10:	462b      	mov	r3, r5
 8006d12:	f7f9 fbe1 	bl	80004d8 <__aeabi_dmul>
 8006d16:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	d144      	bne.n	8006daa <atan+0x242>
 8006d20:	4620      	mov	r0, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	f7f9 fa20 	bl	8000168 <__aeabi_dsub>
 8006d28:	e733      	b.n	8006b92 <atan+0x2a>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8006e6c <atan+0x304>)
 8006d2e:	f7f9 fa1b 	bl	8000168 <__aeabi_dsub>
 8006d32:	2200      	movs	r2, #0
 8006d34:	4606      	mov	r6, r0
 8006d36:	460f      	mov	r7, r1
 8006d38:	4620      	mov	r0, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8006e6c <atan+0x304>)
 8006d3e:	f7f9 fa15 	bl	800016c <__adddf3>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4630      	mov	r0, r6
 8006d48:	4639      	mov	r1, r7
 8006d4a:	f7f9 fcef 	bl	800072c <__aeabi_ddiv>
 8006d4e:	f04f 0a01 	mov.w	sl, #1
 8006d52:	4604      	mov	r4, r0
 8006d54:	460d      	mov	r5, r1
 8006d56:	e767      	b.n	8006c28 <atan+0xc0>
 8006d58:	4b46      	ldr	r3, [pc, #280]	@ (8006e74 <atan+0x30c>)
 8006d5a:	429e      	cmp	r6, r3
 8006d5c:	d21a      	bcs.n	8006d94 <atan+0x22c>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4b45      	ldr	r3, [pc, #276]	@ (8006e78 <atan+0x310>)
 8006d62:	f7f9 fa01 	bl	8000168 <__aeabi_dsub>
 8006d66:	2200      	movs	r2, #0
 8006d68:	4606      	mov	r6, r0
 8006d6a:	460f      	mov	r7, r1
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	4629      	mov	r1, r5
 8006d70:	4b41      	ldr	r3, [pc, #260]	@ (8006e78 <atan+0x310>)
 8006d72:	f7f9 fbb1 	bl	80004d8 <__aeabi_dmul>
 8006d76:	2200      	movs	r2, #0
 8006d78:	4b3c      	ldr	r3, [pc, #240]	@ (8006e6c <atan+0x304>)
 8006d7a:	f7f9 f9f7 	bl	800016c <__adddf3>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4630      	mov	r0, r6
 8006d84:	4639      	mov	r1, r7
 8006d86:	f7f9 fcd1 	bl	800072c <__aeabi_ddiv>
 8006d8a:	f04f 0a02 	mov.w	sl, #2
 8006d8e:	4604      	mov	r4, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	e749      	b.n	8006c28 <atan+0xc0>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	2000      	movs	r0, #0
 8006d9a:	4938      	ldr	r1, [pc, #224]	@ (8006e7c <atan+0x314>)
 8006d9c:	f7f9 fcc6 	bl	800072c <__aeabi_ddiv>
 8006da0:	f04f 0a03 	mov.w	sl, #3
 8006da4:	4604      	mov	r4, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	e73e      	b.n	8006c28 <atan+0xc0>
 8006daa:	4b35      	ldr	r3, [pc, #212]	@ (8006e80 <atan+0x318>)
 8006dac:	4e35      	ldr	r6, [pc, #212]	@ (8006e84 <atan+0x31c>)
 8006dae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f7f9 f9d7 	bl	8000168 <__aeabi_dsub>
 8006dba:	4622      	mov	r2, r4
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	f7f9 f9d3 	bl	8000168 <__aeabi_dsub>
 8006dc2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006dce:	f7f9 f9cb 	bl	8000168 <__aeabi_dsub>
 8006dd2:	f1bb 0f00 	cmp.w	fp, #0
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	460d      	mov	r5, r1
 8006dda:	f6bf aee4 	bge.w	8006ba6 <atan+0x3e>
 8006dde:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006de2:	461d      	mov	r5, r3
 8006de4:	e6df      	b.n	8006ba6 <atan+0x3e>
 8006de6:	a51c      	add	r5, pc, #112	@ (adr r5, 8006e58 <atan+0x2f0>)
 8006de8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006dec:	e6db      	b.n	8006ba6 <atan+0x3e>
 8006dee:	bf00      	nop
 8006df0:	54442d18 	.word	0x54442d18
 8006df4:	3ff921fb 	.word	0x3ff921fb
 8006df8:	8800759c 	.word	0x8800759c
 8006dfc:	7e37e43c 	.word	0x7e37e43c
 8006e00:	e322da11 	.word	0xe322da11
 8006e04:	3f90ad3a 	.word	0x3f90ad3a
 8006e08:	24760deb 	.word	0x24760deb
 8006e0c:	3fa97b4b 	.word	0x3fa97b4b
 8006e10:	a0d03d51 	.word	0xa0d03d51
 8006e14:	3fb10d66 	.word	0x3fb10d66
 8006e18:	c54c206e 	.word	0xc54c206e
 8006e1c:	3fb745cd 	.word	0x3fb745cd
 8006e20:	920083ff 	.word	0x920083ff
 8006e24:	3fc24924 	.word	0x3fc24924
 8006e28:	5555550d 	.word	0x5555550d
 8006e2c:	3fd55555 	.word	0x3fd55555
 8006e30:	2c6a6c2f 	.word	0x2c6a6c2f
 8006e34:	bfa2b444 	.word	0xbfa2b444
 8006e38:	52defd9a 	.word	0x52defd9a
 8006e3c:	3fadde2d 	.word	0x3fadde2d
 8006e40:	af749a6d 	.word	0xaf749a6d
 8006e44:	3fb3b0f2 	.word	0x3fb3b0f2
 8006e48:	fe231671 	.word	0xfe231671
 8006e4c:	3fbc71c6 	.word	0x3fbc71c6
 8006e50:	9998ebc4 	.word	0x9998ebc4
 8006e54:	3fc99999 	.word	0x3fc99999
 8006e58:	54442d18 	.word	0x54442d18
 8006e5c:	bff921fb 	.word	0xbff921fb
 8006e60:	440fffff 	.word	0x440fffff
 8006e64:	7ff00000 	.word	0x7ff00000
 8006e68:	3fdbffff 	.word	0x3fdbffff
 8006e6c:	3ff00000 	.word	0x3ff00000
 8006e70:	3ff2ffff 	.word	0x3ff2ffff
 8006e74:	40038000 	.word	0x40038000
 8006e78:	3ff80000 	.word	0x3ff80000
 8006e7c:	bff00000 	.word	0xbff00000
 8006e80:	08008f08 	.word	0x08008f08
 8006e84:	08008f28 	.word	0x08008f28

08006e88 <fabs>:
 8006e88:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4770      	bx	lr

08006e90 <__ieee754_sqrt>:
 8006e90:	4a67      	ldr	r2, [pc, #412]	@ (8007030 <__ieee754_sqrt+0x1a0>)
 8006e92:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e96:	438a      	bics	r2, r1
 8006e98:	4606      	mov	r6, r0
 8006e9a:	460f      	mov	r7, r1
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	d10e      	bne.n	8006ec0 <__ieee754_sqrt+0x30>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	f7f9 fb18 	bl	80004d8 <__aeabi_dmul>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4630      	mov	r0, r6
 8006eae:	4639      	mov	r1, r7
 8006eb0:	f7f9 f95c 	bl	800016c <__adddf3>
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	460f      	mov	r7, r1
 8006eb8:	4630      	mov	r0, r6
 8006eba:	4639      	mov	r1, r7
 8006ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	dc0c      	bgt.n	8006ede <__ieee754_sqrt+0x4e>
 8006ec4:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006ec8:	4302      	orrs	r2, r0
 8006eca:	d0f5      	beq.n	8006eb8 <__ieee754_sqrt+0x28>
 8006ecc:	b189      	cbz	r1, 8006ef2 <__ieee754_sqrt+0x62>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	f7f9 f94a 	bl	8000168 <__aeabi_dsub>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	f7f9 fc28 	bl	800072c <__aeabi_ddiv>
 8006edc:	e7ea      	b.n	8006eb4 <__ieee754_sqrt+0x24>
 8006ede:	150a      	asrs	r2, r1, #20
 8006ee0:	d115      	bne.n	8006f0e <__ieee754_sqrt+0x7e>
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	e009      	b.n	8006efa <__ieee754_sqrt+0x6a>
 8006ee6:	0ae3      	lsrs	r3, r4, #11
 8006ee8:	3a15      	subs	r2, #21
 8006eea:	0564      	lsls	r4, r4, #21
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0fa      	beq.n	8006ee6 <__ieee754_sqrt+0x56>
 8006ef0:	e7f7      	b.n	8006ee2 <__ieee754_sqrt+0x52>
 8006ef2:	460a      	mov	r2, r1
 8006ef4:	e7fa      	b.n	8006eec <__ieee754_sqrt+0x5c>
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	3101      	adds	r1, #1
 8006efa:	02d8      	lsls	r0, r3, #11
 8006efc:	d5fb      	bpl.n	8006ef6 <__ieee754_sqrt+0x66>
 8006efe:	1e48      	subs	r0, r1, #1
 8006f00:	1a12      	subs	r2, r2, r0
 8006f02:	f1c1 0020 	rsb	r0, r1, #32
 8006f06:	fa24 f000 	lsr.w	r0, r4, r0
 8006f0a:	4303      	orrs	r3, r0
 8006f0c:	408c      	lsls	r4, r1
 8006f0e:	2600      	movs	r6, #0
 8006f10:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006f14:	2116      	movs	r1, #22
 8006f16:	07d2      	lsls	r2, r2, #31
 8006f18:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f26:	bf5c      	itt	pl
 8006f28:	005b      	lslpl	r3, r3, #1
 8006f2a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006f2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f32:	bf58      	it	pl
 8006f34:	0064      	lslpl	r4, r4, #1
 8006f36:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006f3a:	107f      	asrs	r7, r7, #1
 8006f3c:	0064      	lsls	r4, r4, #1
 8006f3e:	1815      	adds	r5, r2, r0
 8006f40:	429d      	cmp	r5, r3
 8006f42:	bfde      	ittt	le
 8006f44:	182a      	addle	r2, r5, r0
 8006f46:	1b5b      	suble	r3, r3, r5
 8006f48:	1836      	addle	r6, r6, r0
 8006f4a:	0fe5      	lsrs	r5, r4, #31
 8006f4c:	3901      	subs	r1, #1
 8006f4e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006f52:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006f56:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006f5a:	d1f0      	bne.n	8006f3e <__ieee754_sqrt+0xae>
 8006f5c:	460d      	mov	r5, r1
 8006f5e:	f04f 0a20 	mov.w	sl, #32
 8006f62:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006f66:	429a      	cmp	r2, r3
 8006f68:	eb01 0c00 	add.w	ip, r1, r0
 8006f6c:	db02      	blt.n	8006f74 <__ieee754_sqrt+0xe4>
 8006f6e:	d113      	bne.n	8006f98 <__ieee754_sqrt+0x108>
 8006f70:	45a4      	cmp	ip, r4
 8006f72:	d811      	bhi.n	8006f98 <__ieee754_sqrt+0x108>
 8006f74:	f1bc 0f00 	cmp.w	ip, #0
 8006f78:	eb0c 0100 	add.w	r1, ip, r0
 8006f7c:	da42      	bge.n	8007004 <__ieee754_sqrt+0x174>
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	db40      	blt.n	8007004 <__ieee754_sqrt+0x174>
 8006f82:	f102 0e01 	add.w	lr, r2, #1
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	4672      	mov	r2, lr
 8006f8a:	45a4      	cmp	ip, r4
 8006f8c:	bf88      	it	hi
 8006f8e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006f92:	eba4 040c 	sub.w	r4, r4, ip
 8006f96:	4405      	add	r5, r0
 8006f98:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006f9c:	f1ba 0a01 	subs.w	sl, sl, #1
 8006fa0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006fa4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006fa8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006fac:	d1db      	bne.n	8006f66 <__ieee754_sqrt+0xd6>
 8006fae:	431c      	orrs	r4, r3
 8006fb0:	d01a      	beq.n	8006fe8 <__ieee754_sqrt+0x158>
 8006fb2:	4c20      	ldr	r4, [pc, #128]	@ (8007034 <__ieee754_sqrt+0x1a4>)
 8006fb4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8007038 <__ieee754_sqrt+0x1a8>
 8006fb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006fbc:	e9db 2300 	ldrd	r2, r3, [fp]
 8006fc0:	f7f9 f8d2 	bl	8000168 <__aeabi_dsub>
 8006fc4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4649      	mov	r1, r9
 8006fd0:	f7f9 fcfe 	bl	80009d0 <__aeabi_dcmple>
 8006fd4:	b140      	cbz	r0, 8006fe8 <__ieee754_sqrt+0x158>
 8006fd6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006fda:	e9db 2300 	ldrd	r2, r3, [fp]
 8006fde:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006fe2:	d111      	bne.n	8007008 <__ieee754_sqrt+0x178>
 8006fe4:	4655      	mov	r5, sl
 8006fe6:	3601      	adds	r6, #1
 8006fe8:	1072      	asrs	r2, r6, #1
 8006fea:	086b      	lsrs	r3, r5, #1
 8006fec:	07f1      	lsls	r1, r6, #31
 8006fee:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006ff2:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006ff6:	bf48      	it	mi
 8006ff8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8007002:	e757      	b.n	8006eb4 <__ieee754_sqrt+0x24>
 8007004:	4696      	mov	lr, r2
 8007006:	e7be      	b.n	8006f86 <__ieee754_sqrt+0xf6>
 8007008:	f7f9 f8b0 	bl	800016c <__adddf3>
 800700c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4640      	mov	r0, r8
 8007016:	4649      	mov	r1, r9
 8007018:	f7f9 fcd0 	bl	80009bc <__aeabi_dcmplt>
 800701c:	b120      	cbz	r0, 8007028 <__ieee754_sqrt+0x198>
 800701e:	1ca8      	adds	r0, r5, #2
 8007020:	bf08      	it	eq
 8007022:	3601      	addeq	r6, #1
 8007024:	3502      	adds	r5, #2
 8007026:	e7df      	b.n	8006fe8 <__ieee754_sqrt+0x158>
 8007028:	1c6b      	adds	r3, r5, #1
 800702a:	f023 0501 	bic.w	r5, r3, #1
 800702e:	e7db      	b.n	8006fe8 <__ieee754_sqrt+0x158>
 8007030:	7ff00000 	.word	0x7ff00000
 8007034:	20000280 	.word	0x20000280
 8007038:	20000278 	.word	0x20000278
 800703c:	00000000 	.word	0x00000000

08007040 <__ieee754_atan2>:
 8007040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	4617      	mov	r7, r2
 8007046:	4690      	mov	r8, r2
 8007048:	4699      	mov	r9, r3
 800704a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800704e:	427b      	negs	r3, r7
 8007050:	f8df a184 	ldr.w	sl, [pc, #388]	@ 80071d8 <__ieee754_atan2+0x198>
 8007054:	433b      	orrs	r3, r7
 8007056:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800705a:	4553      	cmp	r3, sl
 800705c:	4604      	mov	r4, r0
 800705e:	460d      	mov	r5, r1
 8007060:	d809      	bhi.n	8007076 <__ieee754_atan2+0x36>
 8007062:	4246      	negs	r6, r0
 8007064:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007068:	4306      	orrs	r6, r0
 800706a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800706e:	4556      	cmp	r6, sl
 8007070:	468e      	mov	lr, r1
 8007072:	4683      	mov	fp, r0
 8007074:	d908      	bls.n	8007088 <__ieee754_atan2+0x48>
 8007076:	4642      	mov	r2, r8
 8007078:	464b      	mov	r3, r9
 800707a:	4620      	mov	r0, r4
 800707c:	4629      	mov	r1, r5
 800707e:	f7f9 f875 	bl	800016c <__adddf3>
 8007082:	4604      	mov	r4, r0
 8007084:	460d      	mov	r5, r1
 8007086:	e016      	b.n	80070b6 <__ieee754_atan2+0x76>
 8007088:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800708c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007090:	433e      	orrs	r6, r7
 8007092:	d103      	bne.n	800709c <__ieee754_atan2+0x5c>
 8007094:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	f7ff bd66 	b.w	8006b68 <atan>
 800709c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80070a0:	f006 0602 	and.w	r6, r6, #2
 80070a4:	ea53 0b0b 	orrs.w	fp, r3, fp
 80070a8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80070ac:	d107      	bne.n	80070be <__ieee754_atan2+0x7e>
 80070ae:	2e02      	cmp	r6, #2
 80070b0:	d064      	beq.n	800717c <__ieee754_atan2+0x13c>
 80070b2:	2e03      	cmp	r6, #3
 80070b4:	d066      	beq.n	8007184 <__ieee754_atan2+0x144>
 80070b6:	4620      	mov	r0, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070be:	4317      	orrs	r7, r2
 80070c0:	d106      	bne.n	80070d0 <__ieee754_atan2+0x90>
 80070c2:	f1be 0f00 	cmp.w	lr, #0
 80070c6:	da68      	bge.n	800719a <__ieee754_atan2+0x15a>
 80070c8:	a537      	add	r5, pc, #220	@ (adr r5, 80071a8 <__ieee754_atan2+0x168>)
 80070ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80070ce:	e7f2      	b.n	80070b6 <__ieee754_atan2+0x76>
 80070d0:	4552      	cmp	r2, sl
 80070d2:	d10f      	bne.n	80070f4 <__ieee754_atan2+0xb4>
 80070d4:	4293      	cmp	r3, r2
 80070d6:	f106 36ff 	add.w	r6, r6, #4294967295
 80070da:	d107      	bne.n	80070ec <__ieee754_atan2+0xac>
 80070dc:	2e02      	cmp	r6, #2
 80070de:	d855      	bhi.n	800718c <__ieee754_atan2+0x14c>
 80070e0:	4b3e      	ldr	r3, [pc, #248]	@ (80071dc <__ieee754_atan2+0x19c>)
 80070e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80070ea:	e7e4      	b.n	80070b6 <__ieee754_atan2+0x76>
 80070ec:	2e02      	cmp	r6, #2
 80070ee:	d851      	bhi.n	8007194 <__ieee754_atan2+0x154>
 80070f0:	4b3b      	ldr	r3, [pc, #236]	@ (80071e0 <__ieee754_atan2+0x1a0>)
 80070f2:	e7f6      	b.n	80070e2 <__ieee754_atan2+0xa2>
 80070f4:	4553      	cmp	r3, sl
 80070f6:	d0e4      	beq.n	80070c2 <__ieee754_atan2+0x82>
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80070fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007102:	da21      	bge.n	8007148 <__ieee754_atan2+0x108>
 8007104:	f1b9 0f00 	cmp.w	r9, #0
 8007108:	da01      	bge.n	800710e <__ieee754_atan2+0xce>
 800710a:	323c      	adds	r2, #60	@ 0x3c
 800710c:	db20      	blt.n	8007150 <__ieee754_atan2+0x110>
 800710e:	4642      	mov	r2, r8
 8007110:	464b      	mov	r3, r9
 8007112:	4620      	mov	r0, r4
 8007114:	4629      	mov	r1, r5
 8007116:	f7f9 fb09 	bl	800072c <__aeabi_ddiv>
 800711a:	f7ff feb5 	bl	8006e88 <fabs>
 800711e:	f7ff fd23 	bl	8006b68 <atan>
 8007122:	4604      	mov	r4, r0
 8007124:	460d      	mov	r5, r1
 8007126:	2e01      	cmp	r6, #1
 8007128:	d015      	beq.n	8007156 <__ieee754_atan2+0x116>
 800712a:	2e02      	cmp	r6, #2
 800712c:	d017      	beq.n	800715e <__ieee754_atan2+0x11e>
 800712e:	2e00      	cmp	r6, #0
 8007130:	d0c1      	beq.n	80070b6 <__ieee754_atan2+0x76>
 8007132:	a31f      	add	r3, pc, #124	@ (adr r3, 80071b0 <__ieee754_atan2+0x170>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	4620      	mov	r0, r4
 800713a:	4629      	mov	r1, r5
 800713c:	f7f9 f814 	bl	8000168 <__aeabi_dsub>
 8007140:	a31d      	add	r3, pc, #116	@ (adr r3, 80071b8 <__ieee754_atan2+0x178>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	e016      	b.n	8007176 <__ieee754_atan2+0x136>
 8007148:	a51d      	add	r5, pc, #116	@ (adr r5, 80071c0 <__ieee754_atan2+0x180>)
 800714a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800714e:	e7ea      	b.n	8007126 <__ieee754_atan2+0xe6>
 8007150:	2400      	movs	r4, #0
 8007152:	2500      	movs	r5, #0
 8007154:	e7e7      	b.n	8007126 <__ieee754_atan2+0xe6>
 8007156:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800715a:	461d      	mov	r5, r3
 800715c:	e7ab      	b.n	80070b6 <__ieee754_atan2+0x76>
 800715e:	a314      	add	r3, pc, #80	@ (adr r3, 80071b0 <__ieee754_atan2+0x170>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	4620      	mov	r0, r4
 8007166:	4629      	mov	r1, r5
 8007168:	f7f8 fffe 	bl	8000168 <__aeabi_dsub>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	a111      	add	r1, pc, #68	@ (adr r1, 80071b8 <__ieee754_atan2+0x178>)
 8007172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007176:	f7f8 fff7 	bl	8000168 <__aeabi_dsub>
 800717a:	e782      	b.n	8007082 <__ieee754_atan2+0x42>
 800717c:	a50e      	add	r5, pc, #56	@ (adr r5, 80071b8 <__ieee754_atan2+0x178>)
 800717e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007182:	e798      	b.n	80070b6 <__ieee754_atan2+0x76>
 8007184:	a510      	add	r5, pc, #64	@ (adr r5, 80071c8 <__ieee754_atan2+0x188>)
 8007186:	e9d5 4500 	ldrd	r4, r5, [r5]
 800718a:	e794      	b.n	80070b6 <__ieee754_atan2+0x76>
 800718c:	a510      	add	r5, pc, #64	@ (adr r5, 80071d0 <__ieee754_atan2+0x190>)
 800718e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007192:	e790      	b.n	80070b6 <__ieee754_atan2+0x76>
 8007194:	2400      	movs	r4, #0
 8007196:	2500      	movs	r5, #0
 8007198:	e78d      	b.n	80070b6 <__ieee754_atan2+0x76>
 800719a:	a509      	add	r5, pc, #36	@ (adr r5, 80071c0 <__ieee754_atan2+0x180>)
 800719c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80071a0:	e789      	b.n	80070b6 <__ieee754_atan2+0x76>
 80071a2:	bf00      	nop
 80071a4:	f3af 8000 	nop.w
 80071a8:	54442d18 	.word	0x54442d18
 80071ac:	bff921fb 	.word	0xbff921fb
 80071b0:	33145c07 	.word	0x33145c07
 80071b4:	3ca1a626 	.word	0x3ca1a626
 80071b8:	54442d18 	.word	0x54442d18
 80071bc:	400921fb 	.word	0x400921fb
 80071c0:	54442d18 	.word	0x54442d18
 80071c4:	3ff921fb 	.word	0x3ff921fb
 80071c8:	54442d18 	.word	0x54442d18
 80071cc:	c00921fb 	.word	0xc00921fb
 80071d0:	54442d18 	.word	0x54442d18
 80071d4:	3fe921fb 	.word	0x3fe921fb
 80071d8:	7ff00000 	.word	0x7ff00000
 80071dc:	08008f60 	.word	0x08008f60
 80071e0:	08008f48 	.word	0x08008f48

080071e4 <_init>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr

080071f0 <_fini>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr
